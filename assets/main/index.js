System.register("bundle://main/main.js", ['cc'], function () {
  var cclegacy, _decorator, Node$1, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component, Animation, UIOpacity, profiler, AssetManager, sys, macro, DynamicAtlasManager, View, ResolutionPolicy, CCString, CCInteger, Director, AudioSource, resources, AudioClip, Sprite, tween, ccenum, math, view, screen, find, AnimationClip, CCBoolean, EventHandler, EventTouch, Input, Camera, Graphics, game$1, ProgressBar, Font, Vec2, Vec3, randomRange, EventTarget, CCFloat, randomRangeInt, Pool, Prefab, ParticleSystem2D, Widget, SpriteFrame, JsonAsset, ERigidBody2DType, RigidBody2D, sp, Enum, EditBox, ScrollView, easing, Mask;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node$1 = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
      Animation = module.Animation;
      UIOpacity = module.UIOpacity;
      profiler = module.profiler;
      AssetManager = module.AssetManager;
      sys = module.sys;
      macro = module.macro;
      DynamicAtlasManager = module.DynamicAtlasManager;
      View = module.View;
      ResolutionPolicy = module.ResolutionPolicy;
      CCString = module.CCString;
      CCInteger = module.CCInteger;
      Director = module.Director;
      AudioSource = module.AudioSource;
      resources = module.resources;
      AudioClip = module.AudioClip;
      Sprite = module.Sprite;
      tween = module.tween;
      ccenum = module.ccenum;
      math = module.math;
      view = module.view;
      screen = module.screen;
      find = module.find;
      AnimationClip = module.AnimationClip;
      CCBoolean = module.CCBoolean;
      EventHandler = module.EventHandler;
      EventTouch = module.EventTouch;
      Input = module.Input;
      Camera = module.Camera;
      Graphics = module.Graphics;
      game$1 = module.game;
      ProgressBar = module.ProgressBar;
      Font = module.Font;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
      EventTarget = module.EventTarget;
      CCFloat = module.CCFloat;
      randomRangeInt = module.randomRangeInt;
      Pool = module.Pool;
      Prefab = module.Prefab;
      ParticleSystem2D = module.ParticleSystem2D;
      Widget = module.Widget;
      SpriteFrame = module.SpriteFrame;
      JsonAsset = module.JsonAsset;
      ERigidBody2DType = module.ERigidBody2DType;
      RigidBody2D = module.RigidBody2D;
      sp = module.sp;
      Enum = module.Enum;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      easing = module.easing;
      Mask = module.Mask;
    }],
    execute: function () {
      function _iterableToArrayLimit(arr, i) {
        var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];

        if (null != _i) {
          var _s,
              _e,
              _x,
              _r,
              _arr = [],
              _n = !0,
              _d = !1;

          try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
              if (Object(_i) !== _i) return;
              _n = !1;
            } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
          } catch (err) {
            _d = !0, _e = err;
          } finally {
            try {
              if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
            } finally {
              if (_d) throw _e;
            }
          }

          return _arr;
        }
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }

        return target;
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        }, _typeof(obj);
      }

      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }

      function _asyncToGenerator(fn) {
        return function () {
          var self = this,
              args = arguments;
          return new Promise(function (resolve, reject) {
            var gen = fn.apply(self, args);

            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }

            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }

            _next(undefined);
          });
        };
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }

      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);

        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        Object.defineProperty(subClass, "prototype", {
          writable: false
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
        return _setPrototypeOf(o, p);
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (typeof call === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }

        return _assertThisInitialized(self);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
          object = _getPrototypeOf(object);
          if (object === null) break;
        }

        return object;
      }

      function _get() {
        if (typeof Reflect !== "undefined" && Reflect.get) {
          _get = Reflect.get.bind();
        } else {
          _get = function _get(target, property, receiver) {
            var base = _superPropBase(target, property);

            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);

            if (desc.get) {
              return desc.get.call(arguments.length < 3 ? target : receiver);
            }

            return desc.value;
          };
        }

        return _get.apply(this, arguments);
      }

      function set(target, property, value, receiver) {
        if (typeof Reflect !== "undefined" && Reflect.set) {
          set = Reflect.set;
        } else {
          set = function set(target, property, value, receiver) {
            var base = _superPropBase(target, property);

            var desc;

            if (base) {
              desc = Object.getOwnPropertyDescriptor(base, property);

              if (desc.set) {
                desc.set.call(receiver, value);
                return true;
              } else if (!desc.writable) {
                return false;
              }
            }

            desc = Object.getOwnPropertyDescriptor(receiver, property);

            if (desc) {
              if (!desc.writable) {
                return false;
              }

              desc.value = value;
              Object.defineProperty(receiver, property, desc);
            } else {
              _defineProperty(receiver, property, value);
            }

            return true;
          };
        }

        return set(target, property, value, receiver);
      }

      function _set(target, property, value, receiver, isStrict) {
        var s = set(target, property, value, receiver || target);

        if (!s && isStrict) {
          throw new TypeError('failed to set property');
        }

        return value;
      }

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

        return arr2;
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function () {};

            return {
              s: F,
              n: function () {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function (e) {
                throw e;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function () {
            it = it.call(o);
          },
          n: function () {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function (e) {
            didErr = true;
            err = e;
          },
          f: function () {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];

        if (prim !== undefined) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }

        return (hint === "string" ? String : Number)(input);
      }

      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");

        return typeof key === "symbol" ? key : String(key);
      }

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }

      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugViewRuntimeControl = (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node$1), _dec3 = property(Node$1), _dec4 = property(Node$1), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inherits(DebugViewRuntimeControl, _Component);

        var _super = _createSuper(DebugViewRuntimeControl);

        function DebugViewRuntimeControl() {
          var _this;

          _classCallCheck(this, DebugViewRuntimeControl);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));

          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }

        _createClass(DebugViewRuntimeControl, [{
          key: "start",
          value: function start() {
            // get canvas resolution
            var canvas = this.node.parent.getComponent(Canvas);

            if (!canvas) {
              console.error('debug-view-runtime-control should be child of Canvas');
              return;
            }

            var uiTransform = this.node.parent.getComponent(UITransform);
            var halfScreenWidth = uiTransform.width * 0.5;
            var halfScreenHeight = uiTransform.height * 0.5;
            var x = -halfScreenWidth + halfScreenWidth * 0.1,
                y = halfScreenHeight - halfScreenHeight * 0.1;
            var width = 200,
                height = 20; // new nodes

            var miscNode = this.node.getChildByName('MiscMode');
            var buttonNode = instantiate(miscNode);
            buttonNode.parent = this.node;
            buttonNode.name = 'Buttons';
            var titleNode = instantiate(miscNode);
            titleNode.parent = this.node;
            titleNode.name = 'Titles'; // title

            for (var i = 0; i < 2; i++) {
              var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
              newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
              newLabel.setScale(0.75, 0.75, 0.75);
              newLabel.parent = titleNode;

              var _labelComponent = newLabel.getComponent(Label);

              _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
              _labelComponent.color = Color.WHITE;
              _labelComponent.overflow = 0;
              this.labelComponentList[this.labelComponentList.length] = _labelComponent;
            }

            y -= height; // single

            var currentRow = 0;

            for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
              if (_i === this.strSingle.length >> 1) {
                x += width;
                currentRow = 0;
              }

              var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
              newNode.setPosition(x, y - height * currentRow, 0.0);
              newNode.setScale(0.5, 0.5, 0.5);
              newNode.parent = this.singleModeToggle.parent;
              var textComponent = newNode.getComponentInChildren(RichText);
              textComponent.string = this.strSingle[_i];
              this.textComponentList[this.textComponentList.length] = textComponent;
              this.textContentList[this.textContentList.length] = textComponent.string;
              newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
              this.singleModeToggleList[_i] = newNode;
            }

            x += width; // buttons

            this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
            this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
            this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
            this.EnableAllCompositeModeButton.parent = buttonNode;
            var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
            this.labelComponentList[this.labelComponentList.length] = labelComponent;
            var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
            changeColorButton.setPosition(x + 90, y, 0.0);
            changeColorButton.setScale(0.5, 0.5, 0.5);
            changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
            changeColorButton.parent = buttonNode;
            labelComponent = changeColorButton.getComponentInChildren(Label);
            labelComponent.string = 'TextColor';
            this.labelComponentList[this.labelComponentList.length] = labelComponent;
            var HideButton = instantiate(this.EnableAllCompositeModeButton);
            HideButton.setPosition(x + 200, y, 0.0);
            HideButton.setScale(0.5, 0.5, 0.5);
            HideButton.on(Button.EventType.CLICK, this.hideUI, this);
            HideButton.parent = this.node.parent;
            labelComponent = HideButton.getComponentInChildren(Label);
            labelComponent.string = 'Hide UI';
            this.labelComponentList[this.labelComponentList.length] = labelComponent;
            this.hideButtonLabel = labelComponent; // misc

            y -= 40;

            for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
              var _newNode = instantiate(this.compositeModeToggle);

              _newNode.setPosition(x, y - height * _i2, 0.0);

              _newNode.setScale(0.5, 0.5, 0.5);

              _newNode.parent = miscNode;

              var _textComponent = _newNode.getComponentInChildren(RichText);

              _textComponent.string = this.strMisc[_i2];
              this.textComponentList[this.textComponentList.length] = _textComponent;
              this.textContentList[this.textContentList.length] = _textComponent.string;

              var toggleComponent = _newNode.getComponent(Toggle);

              toggleComponent.isChecked = _i2 ? true : false;

              _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);

              this.miscModeToggleList[_i2] = _newNode;
            } // composite


            y -= 150;

            for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
              var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;

              _newNode2.setPosition(x, y - height * _i3, 0.0);

              _newNode2.setScale(0.5, 0.5, 0.5);

              _newNode2.parent = this.compositeModeToggle.parent;

              var _textComponent2 = _newNode2.getComponentInChildren(RichText);

              _textComponent2.string = this.strComposite[_i3];
              this.textComponentList[this.textComponentList.length] = _textComponent2;
              this.textContentList[this.textContentList.length] = _textComponent2.string;

              _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);

              this.compositeModeToggleList[_i3] = _newNode2;
            }
          }
        }, {
          key: "isTextMatched",
          value: function isTextMatched(textUI, textDescription) {
            var tempText = new String(textUI);
            var findIndex = tempText.search('>');

            if (findIndex === -1) {
              return textUI === textDescription;
            } else {
              tempText = tempText.substr(findIndex + 1);
              tempText = tempText.substr(0, tempText.search('<'));
              return tempText === textDescription;
            }
          }
        }, {
          key: "toggleSingleMode",
          value: function toggleSingleMode(toggle) {
            var debugView = director.root.debugView;
            var textComponent = toggle.getComponentInChildren(RichText);

            for (var i = 0; i < this.strSingle.length; i++) {
              if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
                debugView.singleMode = i;
              }
            }
          }
        }, {
          key: "toggleCompositeMode",
          value: function toggleCompositeMode(toggle) {
            var debugView = director.root.debugView;
            var textComponent = toggle.getComponentInChildren(RichText);

            for (var i = 0; i < this.strComposite.length; i++) {
              if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
                debugView.enableCompositeMode(i, toggle.isChecked);
              }
            }
          }
        }, {
          key: "toggleLightingWithAlbedo",
          value: function toggleLightingWithAlbedo(toggle) {
            var debugView = director.root.debugView;
            debugView.lightingWithAlbedo = toggle.isChecked;
          }
        }, {
          key: "toggleCSMColoration",
          value: function toggleCSMColoration(toggle) {
            var debugView = director.root.debugView;
            debugView.csmLayerColoration = toggle.isChecked;
          }
        }, {
          key: "enableAllCompositeMode",
          value: function enableAllCompositeMode(button) {
            var debugView = director.root.debugView;
            debugView.enableAllCompositeMode(true);

            for (var i = 0; i < this.compositeModeToggleList.length; i++) {
              var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);

              _toggleComponent.isChecked = true;
            }

            var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
            toggleComponent.isChecked = false;
            debugView.csmLayerColoration = false;
            toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
            toggleComponent.isChecked = true;
            debugView.lightingWithAlbedo = true;
          }
        }, {
          key: "hideUI",
          value: function hideUI(button) {
            var titleNode = this.node.getChildByName('Titles');
            var activeValue = !titleNode.active;
            this.singleModeToggleList[0].parent.active = activeValue;
            this.miscModeToggleList[0].parent.active = activeValue;
            this.compositeModeToggleList[0].parent.active = activeValue;
            this.EnableAllCompositeModeButton.parent.active = activeValue;
            titleNode.active = activeValue;
            this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
          }
        }, {
          key: "changeTextColor",
          value: function changeTextColor(button) {
            this._currentColorIndex++;

            if (this._currentColorIndex >= this.strColor.length) {
              this._currentColorIndex = 0;
            }

            for (var i = 0; i < this.textComponentList.length; i++) {
              this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
            }

            for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
              this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
            }
          }
        }, {
          key: "onLoad",
          value: function onLoad() {}
        }, {
          key: "update",
          value: function update(deltaTime) {}
        }]);

        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class);

      cclegacy._RF.pop();

      var EDITOR = false;
      var enData = {
        text: {
          level: 'Level',
          settings: 'SETTINGS',
          music: 'Music',
          sound: 'Sound',
          vibrate: 'Vibrate',
          resume: 'CONTINUE',
          on: 'ON',
          off: 'OFF',
          notification: 'Notification',
          adsNotComplete: 'Sorry, No Rewards!\nYou have cancelled the ad!',
          loadingAds: 'Loading ads...',
          loading: 'Loading...',
          load: 'Loading',
          rewardNotReady: 'No ads to display!',
          next: 'NEXT',
          completed: 'COMPLETED',
          tryAgain: 'TRY AGAIN',
          retry: 'RETRY',
          congratulation: 'CONGRATULATION',
          you_have_pass_all_levels: 'You have passed all levels.',
          please_come_back_later: 'Please come back later,\nwe will update soon!',
          start_over: 'START OVER',
          confirmation: 'CONFIRMATION',
          are_you_sure_to_start_over: 'ARE YOU SURE TO START OVER?',
          you_will_play_the_game_again: 'You will play the game again\nfrom the beginning, at level 1.',
          no: 'NO',
          yes: 'YES'
        },
        texture: {
          image: 'image'
        }
      };
      var ruData = {
        text: {
          level: 'Уровень',
          settings: 'НАСТРОЙКИ',
          music: 'Музыка',
          sound: 'Звук',
          vibrate: 'Вибрация',
          resume: 'ПРОДОЛЖАТЬ',
          on: 'ВКЛ',
          off: 'ВЫКЛ',
          notification: 'Уведомление',
          adsNotComplete: 'Извините, наград нет! Вы \nотменили рекламу!',
          loadingAds: 'Загрузка Рекламы...',
          loading: 'Загрузка...',
          load: 'Загрузка',
          rewardNotReady: 'Нет рекламы для отображения!',
          next: 'СЛЕДУЮЩИЙ',
          completed: 'ЗАВЕРШЕННЫЙ',
          tryAgain: 'ЗАПУСТИТЬ СНОВА',
          retry: 'СНОВА ПРОБОВАТЬ',
          congratulation: 'ПОЗДРАВЛЕНИЕ',
          you_have_pass_all_levels: 'Вы прошли все уровни.',
          please_come_back_later: 'Пожалуйста, зайдите позже,\nмы скоро обновим!',
          start_over: 'НАЧАТЬ СНАЧАЛА',
          confirmation: 'ПОДТВЕРЖДЕНИЕ',
          are_you_sure_to_start_over: 'ВЫ УВЕРЕНЫ, ЧТО НАЧАТЬ СНАЧАЛА?',
          you_will_play_the_game_again: 'Вы снова будете играть в игру\nс самого начала, на уровне 1.',
          no: 'НЕТ',
          yes: 'ДА'
        },
        texture: {
          image: 'image'
        }
      };

      var _dec$1, _dec2$1, _dec3$1, _dec4$1, _class$1, _class2$1, _class3;

      cclegacy._RF.push({}, "48d82pk15tE8o5T2fEjVv3u", "Localization", undefined);

      var ccclass$1 = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode,
          disallowMultiple = _decorator.disallowMultiple,
          executionOrder = _decorator.executionOrder,
          property$1 = _decorator.property;
      var _GameCore = GameCore,
          Events = _GameCore.Events;
      var _globalThis$game = globalThis.game,
          event = _globalThis$game.event,
          language = _globalThis$game.language;
      var Localization = (_dec$1 = ccclass$1('Localization'), _dec2$1 = executionOrder(-100), _dec3$1 = executeInEditMode(true), _dec4$1 = property$1({
        readonly: true
      }), _dec$1(_class$1 = _dec2$1(_class$1 = disallowMultiple(_class$1 = _dec3$1(_class$1 = (_class2$1 = (_class3 = /*#__PURE__*/function (_Component) {
        _inherits(Localization, _Component);

        var _super = _createSuper(Localization);

        function Localization() {
          var _this;

          _classCallCheck(this, Localization);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleLanguageChanged = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator(function* (eventPayload) {
              var locale = eventPayload.locale;

              _this.node.scene.emit('update-language', locale);

              _this.locale = locale;
            });

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }();

          return _this;
        }

        _createClass(Localization, [{
          key: "locale",
          get: function get() {
            return Localization._key;
          },
          set: function set(value) {
            Localization._key = value;
          }
        }, {
          key: "__preload",
          value: function __preload() {
            this.addLanguage('en');
            this.addLanguage('ru');
          }
        }, {
          key: "start",
          value: function start() {
            this.listenEvent();
            {
              this.makePersistent();
            }
          } // ? Localization must be exist in all scenes

        }, {
          key: "makePersistent",
          value: function makePersistent() {
            director.addPersistRootNode(this.node);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            event.off(Events.LANGUAGE_CHANGED, this.handleLanguageChanged);
          }
        }, {
          key: "listenEvent",
          value: function listenEvent() {
            event.on(Events.LANGUAGE_CHANGED, this.handleLanguageChanged);
          }
        }, {
          key: "addLanguage",
          value: function addLanguage(lang) {
            var langData = this.getLangData(lang);
            language.add(lang, langData);
          }
        }, {
          key: "setLanguage",
          value: function setLanguage(lang) {
            language.choose(lang);
          }
        }, {
          key: "getLangData",
          value: function getLangData(lang) {
            switch (lang) {
              case 'en':
                return enData;

              case 'ru':
                return ruData;

              default:
                throw new Error("Language ".concat(lang, " not supported"));
            }
          }
        }]);

        return Localization;
      }(Component), _class3._key = 'en', _class3), _applyDecoratedDescriptor(_class2$1.prototype, "locale", [_dec4$1], Object.getOwnPropertyDescriptor(_class2$1.prototype, "locale"), _class2$1.prototype), _class2$1)) || _class$1) || _class$1) || _class$1) || _class$1);

      cclegacy._RF.pop();

      var _dec$2, _class$2;

      cclegacy._RF.push({}, "99ab1dYv8xPSazFgS5X9NV2", "SceneManager", undefined);

      var ccclass$2 = _decorator.ccclass,
          disallowMultiple$1 = _decorator.disallowMultiple;
      var event$1 = globalThis.game.event;
      var _GameCore$1 = GameCore,
          Events$1 = _GameCore$1.Events,
          Utils = _GameCore$1.Utils;
      var scenes = {};
      var SceneManager = (_dec$2 = ccclass$2('SceneManager'), _dec$2(_class$2 = disallowMultiple$1(_class$2 = /*#__PURE__*/function (_Component) {
        _inherits(SceneManager, _Component);

        var _super = _createSuper(SceneManager);

        function SceneManager() {
          var _this;

          _classCallCheck(this, SceneManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.scene = null;

          _this.switchScene = function (sceneName, sceneData) {
            console.log('SceneManager.switchScene', {
              sceneName: sceneName,
              sceneData: sceneData
            });

            if (!_this.scene) {
              throw new Error('SceneManager.switchScene: scene is null');
            }

            if (_this.scene.name === sceneName) return;

            _this.startScene(sceneName, sceneData);
          };

          _this.onSceneProgress = function (completedCount, totalCount, item) {
            var _item$content$_name, _item$content, _item$info;

            console.log('SceneManager.onSceneProgress', {
              completedCount: completedCount,
              totalCount: totalCount,
              itemName: (_item$content$_name = item === null || item === void 0 ? void 0 : (_item$content = item.content) === null || _item$content === void 0 ? void 0 : _item$content._name) !== null && _item$content$_name !== void 0 ? _item$content$_name : (_item$info = item.info) === null || _item$info === void 0 ? void 0 : _item$info.uuid
            });
          };

          _this.onSceneLoaded = function (error) {
            console.log('SceneManager.onSceneLoaded', {
              error: error
            });
          };

          _this.onSceneLaunched = function (sceneData) {
            return function (error, scene) {
              console.log('SceneManager.onSceneLaunched', {
                error: error,
                scene: scene
              });

              if (error) {
                console.warn('SceneManager.onSceneLaunched', error);
                return;
              }

              if (!scene) return;
              var sceneName = scene.name;
              scenes[sceneName] = scene;

              _this.setSceneData(sceneName, sceneData !== null && sceneData !== void 0 ? sceneData : {});
            };
          };

          return _this;
        }

        _createClass(SceneManager, [{
          key: "onLoad",
          value: function onLoad() {
            this.scene = this.node.scene;

            if (Utils.Valid.isDebugger()) {
              GameSDK.startGameAsync()["catch"](console.warn);
            }
          }
        }, {
          key: "listenSwitchSceneEvent",
          value: function listenSwitchSceneEvent(callback) {
            event$1.clear(Events$1.SWITCH_SCENE);
            event$1.on(Events$1.SWITCH_SCENE, callback);
          }
        }, {
          key: "getScene",
          value: function getScene(sceneName) {
            return scenes[sceneName];
          }
        }, {
          key: "startScene",
          value: function startScene(sceneName, sceneData) {
            console.log('SceneManager.startScene', {
              sceneName: sceneName,
              sceneData: sceneData
            });
            director.loadScene(sceneName, this.onSceneLaunched(sceneData));
          }
        }, {
          key: "setSceneData",
          value: function setSceneData(sceneName, sceneData) {
            if (!sceneData) return;
            var scene = this.getScene(sceneName);

            if (!scene) {
              console.warn('SceneManager.setSceneData', "Scene ".concat(sceneName, " not found"));
              return;
            }

            if (!('data' in scene.scene)) return; // Merge current data

            var currentData = scene.scene.data || {};
            scene.attr({
              data: _objectSpread2(_objectSpread2({}, currentData), sceneData)
            }); // console.log('SceneManager.setSceneData', { sceneName, sceneData, currentData })
          }
        }, {
          key: "getSceneData",
          value: function getSceneData(sceneName) {
            var scene = this.getScene(sceneName);
            if (!scene) return {};
            if (!('data' in scene.scene)) return {};
            return scene.scene.data || {};
          }
        }, {
          key: "preloadScene",
          value: function preloadScene(sceneName) {
            director.preloadScene(sceneName, this.onSceneProgress, this.onSceneLoaded);
          }
        }]);

        return SceneManager;
      }(Component)) || _class$2) || _class$2);

      cclegacy._RF.pop();

      var _dec$3, _dec2$2, _dec3$2, _class$3, _class2$2, _descriptor$1, _descriptor2$1;

      cclegacy._RF.push({}, "acb0egHPppFmYJalVNrDDv/", "BaseScreen", undefined);

      var ccclass$3 = _decorator.ccclass,
          property$2 = _decorator.property,
          disallowMultiple$2 = _decorator.disallowMultiple;
      var _GameCore$2 = GameCore,
          Events$2 = _GameCore$2.Events;
      var event$2 = globalThis.game.event;
      var BaseScreen = (_dec$3 = ccclass$3('BaseScreen'), _dec2$2 = property$2(Node$1), _dec3$2 = property$2(Node$1), _dec$3(_class$3 = disallowMultiple$2(_class$3 = (_class2$2 = /*#__PURE__*/function (_Component) {
        _inherits(BaseScreen, _Component);

        var _super = _createSuper(BaseScreen);

        function BaseScreen() {
          var _this;

          _classCallCheck(this, BaseScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "container", _descriptor$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backgroundMask", _descriptor2$1, _assertThisInitialized(_this));

          _this.data = {};
          return _this;
        }

        _createClass(BaseScreen, [{
          key: "onLoad",
          value: function onLoad() {
            this.animation = this.getComponent(Animation);
            this.validateRequiredComponents();
            this.initializeNodes();
          }
        }, {
          key: "initializeNodes",
          value: function initializeNodes() {
            var maskOpacity = this.getMaskOpacity();
            var containerOpacity = this.getContainerOpacity();
            if (!maskOpacity || !containerOpacity) return;
            maskOpacity.opacity = 0;
            containerOpacity.opacity = 0;
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.animation) {
              throw new Error("".concat(this.node.name, ": animation not found"));
            }

            if (!this.container) {
              throw new Error("".concat(this.node.name, ": container not found"));
            }

            if (!this.backgroundMask) {
              throw new Error("".concat(this.node.name, ": backgroundMask not found"));
            }
          }
        }, {
          key: "open",
          value: function open(data) {
            if (data) {
              this.data = data;
            }

            this.runAnimation('OpenScreen');
            this.logEventOpenScreen();
          }
        }, {
          key: "close",
          value: function close() {
            var _this2 = this;

            if (!this.node.active) return;
            this.animation.once(Animation.EventType.FINISHED, function () {
              event$2.emit(Events$2.CLOSED_SCREEN, {
                screenName: _this2.node.name
              });
              _this2.node.active = false;
            });
            this.runAnimation('CloseScreen');
            this.logEventCloseScreen();
          }
        }, {
          key: "runAnimation",
          value: function runAnimation(name) {
            if (!this.isAnimationExist(name)) {
              throw new Error("".concat(this.node.name, ": Animation component must have ").concat(name, " clip"));
            }

            this.animation.play(name);
          }
        }, {
          key: "isAnimationExist",
          value: function isAnimationExist(name) {
            return this.animation.clips.some(function (clip) {
              if (clip && clip.name === name) return true;
              return false;
            });
          }
        }, {
          key: "getMaskOpacity",
          value: function getMaskOpacity() {
            var maskOpacity = this.backgroundMask.getComponent(UIOpacity);

            if (!maskOpacity) {
              console.warn('BaseScreen: maskOpacity not found');
              return null;
            }

            return maskOpacity;
          }
        }, {
          key: "getContainerOpacity",
          value: function getContainerOpacity() {
            var containerOpacity = this.container.getComponent(UIOpacity);

            if (!containerOpacity) {
              console.warn('BaseScreen: containerOpacity not found');
              return null;
            }

            return containerOpacity;
          }
        }, {
          key: "logEventOpenScreen",
          value: function logEventOpenScreen() {
            var screenName = this.node.name;
            this.logPageview(screenName);
          }
        }, {
          key: "logEventCloseScreen",
          value: function logEventCloseScreen(nextPage) {
            if (!nextPage) return;
            this.logPageview(nextPage);
          }
        }, {
          key: "logPageview",
          value: function logPageview(screenName) {
            var analytics = globalThis.game.analytics;
            analytics.setPlacement(screenName);
            analytics.pageview(screenName);
          } // TODO: add closeable when click outside

        }]);

        return BaseScreen;
      }(Component), (_descriptor$1 = _applyDecoratedDescriptor(_class2$2.prototype, "container", [_dec2$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$1 = _applyDecoratedDescriptor(_class2$2.prototype, "backgroundMask", [_dec3$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$2)) || _class$3) || _class$3);

      cclegacy._RF.pop();

      var _dec$4, _class$4;

      cclegacy._RF.push({}, "00dcd//LMhJA4U/K/BvrB4h", "ScreenManager", undefined);

      var ccclass$4 = _decorator.ccclass,
          disallowMultiple$3 = _decorator.disallowMultiple;
      var event$3 = globalThis.game.event;
      var _GameCore$3 = GameCore,
          Events$3 = _GameCore$3.Events;
      var ScreenManager = (_dec$4 = ccclass$4('ScreenManager'), _dec$4(_class$4 = disallowMultiple$3(_class$4 = /*#__PURE__*/function (_Component) {
        _inherits(ScreenManager, _Component);

        var _super = _createSuper(ScreenManager);

        function ScreenManager() {
          var _this;

          _classCallCheck(this, ScreenManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.screens = {};

          _this.handleOpenScreen = function (payload) {
            var screenName = payload.screenName,
                screenData = payload.screenData;

            _this.openScreen(screenName, screenData);
          };

          _this.handleCloseScreen = function (payload) {
            var screenName = payload.screenName;

            _this.closeScreen(screenName);
          };

          return _this;
        }

        _createClass(ScreenManager, [{
          key: "__preload",
          value: function __preload() {
            var _this2 = this;

            var baseScenes = this.getComponentsInChildren(BaseScreen); // ? Add all screens in this scene

            baseScenes.forEach(function (screen) {
              _this2.addScreen(screen);
            }); // ? Listen events by plugin Event of GameCore

            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$3.on(Events$3.OPEN_SCREEN, this.handleOpenScreen);
            event$3.on(Events$3.CLOSE_SCREEN, this.handleCloseScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$3.off(Events$3.OPEN_SCREEN, this.handleOpenScreen);
            event$3.off(Events$3.CLOSE_SCREEN, this.handleCloseScreen);
          }
        }, {
          key: "addScreen",
          value: function addScreen(screen) {
            this.screens[screen.node.name] = screen;
          }
        }, {
          key: "getScreen",
          value: function getScreen(screenName) {
            return this.screens[screenName];
          }
        }, {
          key: "openScreen",
          value: function openScreen(screenName, screenData) {
            var screen = this.getScreen(screenName);

            if (!screen) {
              console.warn('ScreenManager.openScreen', "Screen ".concat(screenName, " not found"));
              return;
            } // ? Active this screen before emit opening event


            screen.node.active = true;
            var eventPayload = {
              screenName: screenName,
              screenData: screenData
            };
            event$3.emit(Events$3.OPENING_SCREEN, eventPayload);
            screen.open(screenData);
            event$3.emit(Events$3.OPENED_SCREEN, eventPayload);
          }
        }, {
          key: "closeScreen",
          value: function closeScreen(screenName) {
            var screen = this.getScreen(screenName);

            if (!screen) {
              console.warn('ScreenManager.closeScreen', "Screen ".concat(screenName, " not found"));
              return;
            }

            if (!screen.node.active) return;
            var eventPayload = {
              screenName: screenName
            };
            event$3.emit(Events$3.CLOSING_SCREEN, eventPayload);
            screen.close();
          }
        }]);

        return ScreenManager;
      }(Component)) || _class$4) || _class$4);

      cclegacy._RF.pop();

      var _dec$5, _dec2$3, _dec3$3, _class$5;

      cclegacy._RF.push({}, "f9920yQC5RD4re/F5Vd3tvT", "SystemManager", undefined);

      var ccclass$5 = _decorator.ccclass,
          disallowMultiple$4 = _decorator.disallowMultiple,
          executionOrder$1 = _decorator.executionOrder,
          requireComponent = _decorator.requireComponent;
      var SystemManager = (_dec$5 = ccclass$5('SystemManager'), _dec2$3 = executionOrder$1(-900), _dec3$3 = requireComponent(Canvas), _dec$5(_class$5 = disallowMultiple$4(_class$5 = _dec2$3(_class$5 = _dec3$3(_class$5 = /*#__PURE__*/function (_Component) {
        _inherits(SystemManager, _Component);

        var _super = _createSuper(SystemManager);

        function SystemManager() {
          var _this;

          _classCallCheck(this, SystemManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.waitProfilerReady = function () {
            if (!profiler) return; // @ts-expect-error - private property

            profiler._showFPS = false; // @ts-expect-error - private property

            var _rootNode = profiler._rootNode;

            if (_rootNode) {
              _rootNode.active = false;

              if (_rootNode.isValid) {
                _rootNode.destroyAllChildren();

                _rootNode.removeAllChildren();

                _rootNode.destroy();
              }
            }
          };

          return _this;
        }

        _createClass(SystemManager, [{
          key: "__preload",
          value: // private isSpritesLoadCalled = false
          function __preload() {
            this.validateRequiredComponents();
            this.setupGameConfig();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            var canvas = this.getComponent(Canvas);

            if (!canvas) {
              throw new Error('SystemManager: Canvas not found');
            }
          }
        }, {
          key: "setupGameConfig",
          value: function setupGameConfig() {
            this.hideCocosStats();
            this.setupAutoAtlas();
            this.setupDynamicAtlas();
            this.setupResolutionPolicy();
          }
        }, {
          key: "setupAutoAtlas",
          value: function setupAutoAtlas() {
            AssetManager.instance.cacheAsset = true;
          }
        }, {
          key: "setupDynamicAtlas",
          value: function setupDynamicAtlas() {
            var enabled = sys.os !== sys.OS.ANDROID;
            macro.CLEANUP_IMAGE_CACHE = !enabled;
            DynamicAtlasManager.instance.enabled = enabled;
            DynamicAtlasManager.instance.maxAtlasCount = 10;
            DynamicAtlasManager.instance.textureSize = 4096;
            DynamicAtlasManager.instance.maxFrameSize = 2048;
          }
        }, {
          key: "setupResolutionPolicy",
          value: function setupResolutionPolicy() {
            View.instance.setOrientation(macro.ORIENTATION_PORTRAIT);
            View.instance.setResolutionPolicy(ResolutionPolicy.SHOW_ALL);
          } // ? Only hide the cocos stats UI

        }, {
          key: "hideCocosStats",
          value: function hideCocosStats() {
            this.schedule(this.waitProfilerReady, 0.2, 60);
          }
        }]);

        return SystemManager;
      }(Component)) || _class$5) || _class$5) || _class$5) || _class$5);

      cclegacy._RF.pop();

      var _dec$6, _dec2$4, _dec3$4, _dec4$2, _dec5, _class$6, _class2$3, _descriptor$2, _descriptor2$2, _descriptor3$1;

      cclegacy._RF.push({}, "60ac3vor0dMT5bXi8D3VSJN", "BubbleAnimation", undefined);

      var ccclass$6 = _decorator.ccclass,
          requireComponent$1 = _decorator.requireComponent,
          property$3 = _decorator.property;
      var BubbleAnimation = (_dec$6 = ccclass$6('BubbleAnimation'), _dec2$4 = requireComponent$1([Animation]), _dec3$4 = property$3(Animation), _dec4$2 = property$3(CCString), _dec5 = property$3(CCInteger), _dec$6(_class$6 = _dec2$4(_class$6 = (_class2$3 = /*#__PURE__*/function (_Component) {
        _inherits(BubbleAnimation, _Component);

        var _super = _createSuper(BubbleAnimation);

        function BubbleAnimation() {
          var _this;

          _classCallCheck(this, BubbleAnimation);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "animation", _descriptor$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clipName", _descriptor2$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "repeat", _descriptor3$1, _assertThisInitialized(_this));

          _this.currentRepeat = -1;
          return _this;
        }

        _createClass(BubbleAnimation, [{
          key: "onLoad",
          value: function onLoad() {
            this.animation = this.getComponent(Animation);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.animation) {
              throw new Error('BubbleAnimation: Animation component not found');
            }
          }
        }, {
          key: "play",
          value: function play() {
            var _this2 = this;

            if (!this.animation) return;
            var animClip = this.animation.clips.find(function (clip) {
              return (clip === null || clip === void 0 ? void 0 : clip.name) === _this2.clipName;
            });

            if (!animClip) {
              console.warn("BubbleAnimation: Animation component must have ".concat(this.clipName, " clip"));
              return;
            }

            this.currentRepeat = -1;
            this.animation.play(this.clipName);
          }
          /**
           * `bubble` anim event callback
           */

        }, {
          key: "onBubbleAnimationLoop",
          value: function onBubbleAnimationLoop() {
            if (!this.animation) return;
            if (this.repeat === -1) return;
            this.currentRepeat++;

            if (this.currentRepeat > this.repeat) {
              this.animation.stop();
            }
          }
        }]);

        return BubbleAnimation;
      }(Component), (_descriptor$2 = _applyDecoratedDescriptor(_class2$3.prototype, "animation", [_dec3$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$2 = _applyDecoratedDescriptor(_class2$3.prototype, "clipName", [_dec4$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'Bubble';
        }
      }), _descriptor3$1 = _applyDecoratedDescriptor(_class2$3.prototype, "repeat", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      })), _class2$3)) || _class$6) || _class$6);

      cclegacy._RF.pop();

      var _dec$7, _dec2$5, _dec3$5, _class$7, _class2$4, _descriptor$3;

      cclegacy._RF.push({}, "56b92F9LoxNs5aCgvw+tkq6", "LoadingSceneTransition", undefined);

      var ccclass$7 = _decorator.ccclass,
          requireComponent$2 = _decorator.requireComponent,
          property$4 = _decorator.property;
      /**
       * `LoadingSceneTransition` require Scene not use `AutoRelease` options
       */

      var LoadingSceneTransition = (_dec$7 = ccclass$7('LoadingSceneTransition'), _dec2$5 = requireComponent$2([Canvas]), _dec3$5 = property$4([Node$1]), _dec$7(_class$7 = _dec2$5(_class$7 = (_class2$4 = /*#__PURE__*/function (_Component) {
        _inherits(LoadingSceneTransition, _Component);

        var _super = _createSuper(LoadingSceneTransition);

        function LoadingSceneTransition() {
          var _this;

          _classCallCheck(this, LoadingSceneTransition);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "targets", _descriptor$3, _assertThisInitialized(_this));

          _this.realTargets = [];
          return _this;
        }

        _createClass(LoadingSceneTransition, [{
          key: "start",
          value: function start() {
            var _this2 = this;

            for (var i = 0; i < this.targets.length; i++) {
              var target = this.targets[i];
              if (!target) continue;
              var clone = instantiate(target);
              clone.setParent(this.node);
              clone.active = false;
              this.realTargets.push(clone);
            }

            director.addPersistRootNode(this.node);
            director.once(Director.EVENT_BEFORE_SCENE_LAUNCH, function () {
              _this2.playFadeOutAnimationClip();
            });
          }
        }, {
          key: "playFadeOutAnimationClip",
          value: function playFadeOutAnimationClip() {
            var _this3 = this; // const targets = this.targets.map((target) => {
            //     const clone = instantiate(target)
            //     clone.setParent(this.node)
            //     return clone
            // })


            var numOfAnimFinish = 0;
            if (!this.realTargets || this.realTargets.length === 0) return;
            this.realTargets.forEach(function (target) {
              target.active = true;
              var animCom = target.getComponent(Animation);
              if (!animCom) return;
              var isFadeOutExist = animCom.clips.some(function (clip) {
                return (clip === null || clip === void 0 ? void 0 : clip.name) === 'FadeOut';
              });

              if (!isFadeOutExist) {
                _this3.node.destroy();

                console.warn('Not have FadeOut clip');
                return;
              }

              animCom.play('FadeOut');
              animCom.once(Animation.EventType.FINISHED, function () {
                numOfAnimFinish++;

                if (numOfAnimFinish === _this3.realTargets.length) {
                  _this3.node.destroy();
                }
              });
            });
          }
        }]);

        return LoadingSceneTransition;
      }(Component), _descriptor$3 = _applyDecoratedDescriptor(_class2$4.prototype, "targets", [_dec3$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2$4)) || _class$7) || _class$7);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "cc0a5OvhdRCMZRZuRscaz+7", "AudioPlayer", undefined);

      var AudioPlayer = /*#__PURE__*/function (_GameCore$Plugins$Aud) {
        _inherits(AudioPlayer, _GameCore$Plugins$Aud);

        var _super = _createSuper(AudioPlayer);

        function AudioPlayer(key, audioSource) {
          var _this;

          _classCallCheck(this, AudioPlayer);

          _this = _super.call(this, key);
          _this.audioSource = audioSource;
          return _this;
        }

        _createClass(AudioPlayer, [{
          key: "play",
          value: function play(config) {
            if (config) {
              var _config$volume = config.volume,
                  volume = _config$volume === void 0 ? 1 : _config$volume,
                  _config$loop = config.loop,
                  loop = _config$loop === void 0 ? false : _config$loop;
              this.audioSource.volume = volume;
              this.audioSource.loop = loop;
            }

            this.audioSource.play();
          }
        }, {
          key: "pause",
          value: function pause() {
            this.audioSource.pause();
          }
        }, {
          key: "resume",
          value: function resume() {
            if (this.audioSource.state === AudioSource.AudioState.PAUSED) {
              this.audioSource.play();
            }
          }
        }, {
          key: "stop",
          value: function stop() {
            this.audioSource.stop();
          }
        }, {
          key: "setVolume",
          value: function setVolume(volume) {
            this.audioSource.volume = volume;
          }
        }, {
          key: "getAudioSource",
          value: function getAudioSource() {
            return this.audioSource;
          }
        }]);

        return AudioPlayer;
      }(GameCore.Plugins.Audio.BaseAudioPlayer);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "8b5ecHv/+BJiorK1kiVbTcf", "AudioChannel", undefined);

      var BaseChannelManager = GameCore.Plugins.Audio.BaseChannelManager;

      var AudioChannel = /*#__PURE__*/function (_BaseChannelManager) {
        _inherits(AudioChannel, _BaseChannelManager);

        var _super = _createSuper(AudioChannel);

        function AudioChannel(node, channelId) {
          var _this;

          _classCallCheck(this, AudioChannel);

          _this = _super.call(this, channelId);
          _this.allowMultipleTracking = {};

          _this.handleLoadedAudio = function (key, clip) {
            var audioSource = _this.node.addComponent(AudioSource);

            audioSource.clip = clip;
            audioSource.playOnAwake = false;
            var audioPlayer = new AudioPlayer(key, audioSource);
            return audioPlayer;
          };

          _this.node = node;
          return _this;
        }

        _createClass(AudioChannel, [{
          key: "onLoadAudio",
          value: function () {
            var _onLoadAudio = _asyncToGenerator(function* (key, _config) {
              var _this2 = this;

              return new Promise(function (resolve, reject) {
                resources.load(key, AudioClip, function (error, clip) {
                  try {
                    if (error) {
                      throw error;
                    }

                    var audioPlayer = _this2.handleLoadedAudio(key, clip);

                    resolve(audioPlayer);
                  } catch (error) {
                    reject(error);
                  }
                });
              });
            });

            function onLoadAudio(_x, _x2) {
              return _onLoadAudio.apply(this, arguments);
            }

            return onLoadAudio;
          }()
        }, {
          key: "playWithRealConfig",
          value: function playWithRealConfig(audioPlayer, config) {
            if (!this.isCanPlay(config)) return;

            if (config) {
              var _config$volume = config.volume,
                  volume = _config$volume === void 0 ? 1 : _config$volume,
                  _config$allowMultiple = config.allowMultiple,
                  allowMultiple = _config$allowMultiple === void 0 ? false : _config$allowMultiple;
              config.volume = this.getVolume() * volume;

              if (allowMultiple) {
                var newAudioPlayer = this.requestDuplicateAudioPlayer(audioPlayer.getKey(), audioPlayer.getAudioSource().clip, config);
                newAudioPlayer.play(config);
                return;
              }
            }

            audioPlayer.play(config);
          }
        }, {
          key: "isCanPlay",
          value: function isCanPlay(config) {
            var _this3 = this;

            if (config) {
              var _config$checkList = config.checkList,
                  checkList = _config$checkList === void 0 ? [] : _config$checkList;
              var isPlayingExist = checkList.some(function (key) {
                var audioClip = _this3.getAudioClip(key);

                if (audioClip) {
                  var audioPlayer = audioClip.audioPlayer;
                  return audioPlayer.getAudioSource().state === AudioSource.AudioState.PLAYING;
                }

                return false;
              });

              if (isPlayingExist) {
                return false;
              }
            }

            return true;
          }
        }, {
          key: "requestDuplicateAudioPlayer",
          value: function requestDuplicateAudioPlayer(key, clip, config) {
            var existingAudioPlayer = this.getDuplicateAudioFromPool(key);

            if (existingAudioPlayer) {
              if (config) {
                var _dupKey = existingAudioPlayer.key;
                var _config$volume2 = config.volume,
                    volume = _config$volume2 === void 0 ? 1 : _config$volume2;
                this.setAudioClip(_dupKey, {
                  volume: volume
                });
              }

              return existingAudioPlayer.audioPlayer;
            }

            var dupKey = "".concat(key, "_").concat(this.allowMultipleTracking[key].currentPostFix);
            var newAudioPlayer = this.handleLoadedAudio(dupKey, clip);
            this.allowMultipleTracking[key].list.push({
              audioPlayer: newAudioPlayer,
              key: dupKey
            });
            this.allowMultipleTracking[key].currentPostFix += 1;
            this.setAudioClip(dupKey, {
              audioPlayer: newAudioPlayer,
              volume: 1
            });
            return newAudioPlayer;
          }
        }, {
          key: "getDuplicateAudioFromPool",
          value: function getDuplicateAudioFromPool(key) {
            if (this.allowMultipleTracking[key]) {
              var list = this.allowMultipleTracking[key].list;
              var audioClip = list.find(function (audioClip) {
                return audioClip.audioPlayer.getAudioSource().state !== AudioSource.AudioState.PLAYING;
              });

              if (audioClip) {
                return audioClip;
              }
            } else {
              this.allowMultipleTracking[key] = {
                currentPostFix: 1,
                list: []
              };
            }

            return null;
          }
        }]);

        return AudioChannel;
      }(BaseChannelManager);

      cclegacy._RF.pop();

      var _dec$8, _dec2$6, _class$8, _class2$5, _descriptor$4;

      cclegacy._RF.push({}, "1a025mmN7BL7r5cF6gWR4b/", "Music", undefined);

      var ccclass$8 = _decorator.ccclass,
          property$5 = _decorator.property;
      var _globalThis$game$1 = globalThis.game,
          audio = _globalThis$game$1.audio,
          player = _globalThis$game$1.player;
      var Music = (_dec$8 = ccclass$8('Music'), _dec2$6 = property$5(CCString), _dec$8(_class$8 = (_class2$5 = /*#__PURE__*/function (_Component) {
        _inherits(Music, _Component);

        var _super = _createSuper(Music);

        function Music() {
          var _this;

          _classCallCheck(this, Music);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "channelId", _descriptor$4, _assertThisInitialized(_this));

          _this.channel = null;
          return _this;
        }

        _createClass(Music, [{
          key: "__preload",
          value: function __preload() {
            // * Only call new a class (not component) in _preload method
            this.channel = new AudioChannel(this.node, this.channelId);
            audio.addChannel(this.channel);
          } // ? Sometime music background must be play in all scenes

        }, {
          key: "makePersistent",
          value: function makePersistent() {
            director.addPersistRootNode(this.node);
          }
        }, {
          key: "removePersistent",
          value: function removePersistent() {
            director.removePersistRootNode(this.node);
          }
        }, {
          key: "play",
          value: function play(key, options) {
            if (!this.isMusicEnable()) return;

            if (!options || !options.loop) {
              options = _objectSpread2(_objectSpread2({}, options), {}, {
                loop: true
              });
            }

            audio.play(key, options, this.channelId);
          }
        }, {
          key: "isMusicEnable",
          value: function isMusicEnable() {
            return !!player.getPlayerSetting('music');
          }
        }, {
          key: "setVolume",
          value: function setVolume(volume) {
            audio.setVolume(volume, this.channelId);
          }
        }, {
          key: "pause",
          value: function pause(key) {
            audio.pause(key, this.channelId);
          }
        }, {
          key: "resume",
          value: function resume(key) {
            if (!this.isMusicEnable()) return;
            audio.resume(key, this.channelId);
          }
        }, {
          key: "stop",
          value: function stop(key) {
            audio.stop(key, this.channelId);
          }
        }, {
          key: "mute",
          value: function mute(isMute) {
            if (isMute) {
              audio.mute(this.channelId);
            } else {
              audio.unmute(this.channelId);
            }
          }
        }]);

        return Music;
      }(Component), _descriptor$4 = _applyDecoratedDescriptor(_class2$5.prototype, "channelId", [_dec2$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'global_music';
        }
      }), _class2$5)) || _class$8);

      cclegacy._RF.pop();

      var _dec$9, _dec2$7, _class$9, _class2$6, _descriptor$5;

      cclegacy._RF.push({}, "1299a7X1XNNEKxSKMV6E5jQ", "Sound", undefined);

      var ccclass$9 = _decorator.ccclass,
          property$6 = _decorator.property;
      var _globalThis$game$2 = globalThis.game,
          audio$1 = _globalThis$game$2.audio,
          player$1 = _globalThis$game$2.player;
      var Sound = (_dec$9 = ccclass$9('Sound'), _dec2$7 = property$6(CCString), _dec$9(_class$9 = (_class2$6 = /*#__PURE__*/function (_Component) {
        _inherits(Sound, _Component);

        var _super = _createSuper(Sound);

        function Sound() {
          var _this;

          _classCallCheck(this, Sound);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "channelId", _descriptor$5, _assertThisInitialized(_this));

          _this.channel = null;
          return _this;
        }

        _createClass(Sound, [{
          key: "__preload",
          value: function __preload() {
            // * Only call new a class (not component) in _preload method
            this.channel = new AudioChannel(this.node, this.channelId);
            audio$1.addChannel(this.channel);
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            if (this.channelId === '') {
              this.channelId = this.node.uuid;
            }
          } // ? Sometime we need some sound effect must be play when scene is changed

        }, {
          key: "makePersistent",
          value: function makePersistent() {
            director.addPersistRootNode(this.node);
          }
        }, {
          key: "removePersistent",
          value: function removePersistent() {
            director.removePersistRootNode(this.node);
          }
        }, {
          key: "play",
          value: function play(key, options) {
            if (!this.isSoundEnable()) return;
            audio$1.play(key, options, this.channelId);
          }
        }, {
          key: "isSoundEnable",
          value: function isSoundEnable() {
            return !!player$1.getPlayerSetting('sound');
          }
        }, {
          key: "setVolume",
          value: function setVolume(volume) {
            audio$1.setVolume(volume, this.channelId);
          }
        }, {
          key: "pause",
          value: function pause(key) {
            audio$1.pause(key, this.channelId);
          }
        }, {
          key: "resume",
          value: function resume(key) {
            if (!this.isSoundEnable()) return;
            audio$1.resume(key, this.channelId);
          }
        }, {
          key: "stop",
          value: function stop(key) {
            audio$1.stop(key, this.channelId);
          }
        }, {
          key: "stopAll",
          value: function stopAll() {
            audio$1.stopAll(this.channelId);
          }
        }, {
          key: "mute",
          value: function mute(_boolean) {
            if (_boolean) {
              audio$1.mute(this.channelId);
            } else {
              audio$1.unmute(this.channelId);
            }
          }
        }]);

        return Sound;
      }(Component), _descriptor$5 = _applyDecoratedDescriptor(_class2$6.prototype, "channelId", [_dec2$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _class2$6)) || _class$9);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "244e9OHsmpDnpHQKeLzgiiX", "GameEvents", undefined);

      var GameEvents = {
        VIEW_RESIZE: 'view-resize',
        LAYOUT_CHANGED: 'layout-changed',
        REQUEST_VIEW_RESIZE: 'request-view-resize',
        GAMEPLAY_UPDATE_CONFIG: 'gameplay-update-config',
        REQUEST_SWITCH_SCENE_LOADING: 'request-switch-scene-loading'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "5c76fxO2ppOqYp4WNO+Kavm", "GameWorld", undefined);

      var GameWorld = {
        WIDTH: 375,
        HEIGHT: 667,
        Layout: {
          Portrait: 'portrait',
          Landscape: 'landscape'
        },
        DesignSize: {
          Portrait: {
            WIDTH: 750,
            HEIGHT: 1538
          },
          Landscape: {
            WIDTH: 1920,
            HEIGHT: 1538
          }
        },
        // Default is true
        // ? This mean on portrait mode, the game will be stretched to full height
        FULL_PORTRAIT_SIZE: true,
        // Default is true
        // ? This mean on landscape mode, the game will be stretched to full width
        FULL_LANDSCAPE_SIZE: true
      };

      cclegacy._RF.pop();

      var _dec$a, _class$a;

      cclegacy._RF.push({}, "ca427NpeqpC3bUoGTd9I/BM", "Background", undefined);

      var ccclass$a = _decorator.ccclass;
      var Layout = GameWorld.Layout;
      var Background = (_dec$a = ccclass$a('Background'), _dec$a(_class$a = /*#__PURE__*/function (_Component) {
        _inherits(Background, _Component);

        var _super = _createSuper(Background);

        function Background() {
          var _this;

          _classCallCheck(this, Background);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleSpriteTypeWhenLayoutChanged = function (layout) {
            if (layout === Layout.Landscape) {
              _this.setBackgroundEdgeType(Sprite.Type.SLICED);

              _this.setActiveBlockLines(true);

              _this.setBackgroundEdgeEnabled(true);
            } else {
              _this.setBackgroundEdgeType(Sprite.Type.SIMPLE);

              _this.setActiveBlockLines(false);

              _this.setBackgroundEdgeEnabled(false);
            }
          };

          return _this;
        }

        _createClass(Background, [{
          key: "__preload",
          value: function __preload() {
            this.backgroundEdge = this.getComponent(Sprite);
            this.blockLines = this.getComponentsInChildren(Sprite);
            this.validateRequiredComponents();
            this.listenGameEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.backgroundEdge) {
              throw new Error('Background: BG Edge not found');
            }

            if (!this.blockLines) {
              throw new Error('Background: Block lines not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.LAYOUT_CHANGED, this.handleSpriteTypeWhenLayoutChanged);
          }
        }, {
          key: "setBackgroundEdgeEnabled",
          value: function setBackgroundEdgeEnabled(enabled) {
            this.backgroundEdge.enabled = enabled;
          }
        }, {
          key: "setBackgroundEdgeType",
          value: function setBackgroundEdgeType(type) {
            this.backgroundEdge.type = type;
          }
        }, {
          key: "setActiveBlockLines",
          value: function setActiveBlockLines(enable) {
            this.blockLines.forEach(function (component) {
              if (['BlockLineLeft', 'BlockLineRight'].includes(component.node.name)) {
                component.node.active = enable;
              }
            });
          }
        }]);

        return Background;
      }(Component)) || _class$a);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "a68d8OuXsFEo5PDINzJbqaC", "AnimUtils", undefined);

      var AnimUtils = /*#__PURE__*/function () {
        function AnimUtils() {
          _classCallCheck(this, AnimUtils);
        }

        _createClass(AnimUtils, null, [{
          key: "elasticOut",
          value:
          /**
           * Elastic ease-out.
           *
           * @function Phaser.Math.Easing.Elastic.Out
           * @since 3.0.0
           *
           * @param {number} v - The value to be tweened.
           * @param {number} [amplitude=0.1] - The amplitude of the elastic ease.
           * @param {number} [period=0.1] - Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles.
           *
           * @return {number} The tweened value.
           */
          function elasticOut(v, amplitude, period) {
            if (amplitude === undefined) {
              amplitude = 0.1;
            }

            if (period === undefined) {
              period = 0.1;
            }

            if (v === 0) {
              return 0;
            } else if (v === 1) {
              return 1;
            } else {
              var s = period / 4;

              if (amplitude < 1) {
                amplitude = 1;
              } else {
                s = period * Math.asin(1 / amplitude) / (2 * Math.PI);
              }

              return amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1;
            }
          }
        }, {
          key: "easeOutExpo",
          value: function easeOutExpo(progress) {
            return progress === 1 ? 1 : 1 - Math.pow(2, -10 * progress);
          }
        }, {
          key: "easeInExpo",
          value: function easeInExpo(x) {
            return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
          }
        }, {
          key: "runTweenAsync",
          value: function runTweenAsync(tween) {
            return new Promise(function (resolve) {
              tween.call(function () {
                resolve({
                  tween: tween
                });
              }).start();
            });
          }
        }]);

        return AnimUtils;
      }();

      cclegacy._RF.pop();

      var _dec$b, _class$b;

      cclegacy._RF.push({}, "ab9cd/wERRKYqhDoYtJ1L3w", "MultiBackground", undefined);

      var ccclass$b = _decorator.ccclass;
      var Layout$1 = GameWorld.Layout;
      var MultiBackground = (_dec$b = ccclass$b('MultiBackground'), _dec$b(_class$b = /*#__PURE__*/function (_Component) {
        _inherits(MultiBackground, _Component);

        var _super = _createSuper(MultiBackground);

        function MultiBackground() {
          var _this;

          _classCallCheck(this, MultiBackground);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleSpriteTypeWhenLayoutChanged = function (layout) {
            if (layout === Layout$1.Landscape) {
              _this.setBackgroundEdgeType(Sprite.Type.SLICED);

              _this.setActiveBlockLines(true);

              _this.setBackgroundEdgeEnabled(true);
            } else {
              _this.setBackgroundEdgeType(Sprite.Type.SIMPLE);

              _this.setActiveBlockLines(false);

              _this.setBackgroundEdgeEnabled(false);
            }
          };

          return _this;
        }

        _createClass(MultiBackground, [{
          key: "__preload",
          value: function __preload() {
            this.backgroundEdge = this.getComponent(Sprite);
            this.blockLines = this.getComponentsInChildren(Sprite);
            this.summerBackground = this.node.getChildByName('Background1').getComponent(Sprite);
            this.autumnBackground = this.node.getChildByName('Background2').getComponent(Sprite);
            this.winterBackground = this.node.getChildByName('Background3').getComponent(Sprite);
            this.currentBackground = this.summerBackground;
            this.validateRequiredComponents();
            this.listenGameEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.backgroundEdge) {
              throw new Error('Background: BG Edge not found');
            }

            if (!this.blockLines) {
              throw new Error('Background: Block lines not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.LAYOUT_CHANGED, this.handleSpriteTypeWhenLayoutChanged);
          }
        }, {
          key: "setBackgroundEdgeEnabled",
          value: function setBackgroundEdgeEnabled(enabled) {
            this.backgroundEdge.enabled = enabled;
          }
        }, {
          key: "setBackgroundEdgeType",
          value: function setBackgroundEdgeType(type) {
            this.backgroundEdge.type = type;
          }
        }, {
          key: "setActiveBlockLines",
          value: function setActiveBlockLines(enable) {
            this.blockLines.forEach(function (component) {
              if (['BlockLineLeft', 'BlockLineRight'].includes(component.node.name)) {
                component.node.active = enable;
              }
            });
          }
        }, {
          key: "setCurrentMap",
          value: function setCurrentMap(themeId) {
            if (themeId === 'summer') {
              this.summerBackground.node.active = true;
              this.autumnBackground.node.active = false;
              this.winterBackground.node.active = false;
              this.currentBackground = this.summerBackground;
            } else if (themeId === 'autumn') {
              this.summerBackground.node.active = false;
              this.autumnBackground.node.active = true;
              this.winterBackground.node.active = false;
              this.currentBackground = this.autumnBackground;
            } else if (themeId === 'winter') {
              this.summerBackground.node.active = false;
              this.autumnBackground.node.active = false;
              this.winterBackground.node.active = true;
              this.currentBackground = this.winterBackground;
            }
          }
        }, {
          key: "animateToNextMap",
          value: function () {
            var _animateToNextMap = _asyncToGenerator(function* (themeId) {
              var _this2 = this;

              if (themeId === 'summer') {
                this.nextBackground = this.summerBackground;
              } else if (themeId === 'autumn') {
                this.nextBackground = this.autumnBackground;
              } else if (themeId === 'winter') {
                this.nextBackground = this.winterBackground;
              }

              if (this.nextBackground === this.currentBackground) return Promise.resolve();
              this.nextBackground.node.active = true;
              this.nextBackground.node.setSiblingIndex(2);
              this.nextBackground.getComponent(UIOpacity).opacity = 0;
              var t = tween({
                progress: 0
              });
              t.to(3, {
                progress: 255
              }, {
                easing: 'sineOut',
                progress: function progress(start, end, _current, ratio) {
                  var value = Math.floor(start + (end - start) * ratio);
                  _this2.nextBackground.getComponent(UIOpacity).opacity = value;
                  return value;
                }
              });
              t.call(function () {
                _this2.currentBackground.node.active = false;
                _this2.currentBackground = _this2.nextBackground;
              });
              return AnimUtils.runTweenAsync(t);
            });

            function animateToNextMap(_x) {
              return _animateToNextMap.apply(this, arguments);
            }

            return animateToNextMap;
          }()
        }]);

        return MultiBackground;
      }(Component)) || _class$b);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "d159egaUVVLHKLg1UL865ub", "SoundKeys", undefined);

      var path = 'sounds/';
      var CodeSoundKeys = {
        // TODO: replace BUTTON_CLICK
        BUTTON_CLICK: "".concat(path, "use_item_click"),
        BOMB_DEFUSE: "".concat(path, "bomb_defuse"),
        BOMB_EXPLODE_1: "".concat(path, "bomb_explode_1"),
        BOMB_EXPLODE_2: "".concat(path, "bomb_explode_2"),
        CLICKS: "".concat(path, "clicks"),
        CLOSE_POPUP_CLICK: "".concat(path, "close_popup_click"),
        COLLECT_STARS: "".concat(path, "collect_stars"),
        COMBO_1: "".concat(path, "combo_1"),
        COMBO_2: "".concat(path, "combo_2"),
        COMBO_3: "".concat(path, "combo_3"),
        COMBO_4: "".concat(path, "combo_4"),
        COMBO_5: "".concat(path, "combo_5"),
        DAILY_REWARD: "".concat(path, "daily_reward"),
        EXTRA_TIME_SPAWN: "".concat(path, "extra_time_spawn"),
        GIFT_CHARGE: "".concat(path, "gift_charge"),
        GIFT_EXPLODE: "".concat(path, "gift_explode"),
        GIFT_REVEAL: "".concat(path, "gift_reveal"),
        HINT_ITEM: "".concat(path, "hint_item"),
        INVALID_MATCH: "".concat(path, "invalid_match"),
        LEVEL_COMPLETE: "".concat(path, "level_complete"),
        LEVEL_FAIL: "".concat(path, "level_fail"),
        LEVEL_START: "".concat(path, "level_start"),
        PROGRESS_STAR: "".concat(path, "progress_star"),
        RESCUE_TIMER: "".concat(path, "rescue_timer"),
        ROCKET_FLY: "".concat(path, "rocket_fly"),
        SHUFFLE_ITEM: "".concat(path, "shuffle_item"),
        THREE_STARS: "".concat(path, "three_stars"),
        TICKING_BOMB_BEFORE_EXPLODE: "".concat(path, "ticking_bomb_before_explode"),
        TILE_SELECT: "".concat(path, "tile_select"),
        USE_ITEM_CLICK: "".concat(path, "use_item_click"),
        BG_MUSIC: "".concat(path, "bg_music"),
        PATCH_SHIFT: "".concat(path, "patch_shift"),
        THUNDERBOLT: "".concat(path, "thunderbolt"),
        WIND: "".concat(path, "wind"),
        COLLECT_COINS: "".concat(path, "collect_coins"),
        COLLECT_STOCK_COINS: "".concat(path, "collect_stock_coins")
      };
      var values = Object.values(CodeSoundKeys);
      var SoundKeys = values.reduce(function (result, key, index) {
        return _objectSpread2(_objectSpread2({}, result), {}, _defineProperty({}, key, index));
      }, {});
      ccenum(SoundKeys);
      var SoundKeysMapping = values;

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "05faedSJ2NHFqLe9b3g4RIl", "CocosUtils", undefined);

      var CocosUtils = /*#__PURE__*/function () {
        function CocosUtils() {
          _classCallCheck(this, CocosUtils);
        }

        _createClass(CocosUtils, null, [{
          key: "getBoundingBoxToWorld",
          value:
          /**
           * Fix `uiTransformComponent.getBoundingBoxToWorld()` work incorrectly if have children
           * @param node Node need to get BoundingBox, must have a UITransform component
           */
          function getBoundingBoxToWorld(node) {
            if (node.parent) {
              var m = node.parent.getWorldMatrix();
              return this.getBoundingBoxTo(m, node);
            }

            var uiTransformComponent = node.getComponent(UITransform);

            if (!uiTransformComponent) {
              throw new Error('Node must have UITransform component');
            }

            return uiTransformComponent.getBoundingBox();
          }
        }, {
          key: "getBoundingBoxTo",
          value: function getBoundingBoxTo(parentMat, currentNode) {
            var _matrix = math.mat4();

            math.Mat4.fromSRT(_matrix, currentNode.getRotation(), currentNode.getPosition(), currentNode.getScale());
            var uiTransformComponent = currentNode.getComponent(UITransform);

            if (!uiTransformComponent) {
              throw new Error('Node must have UITransform component');
            }

            var width = uiTransformComponent.contentSize.width;
            var height = uiTransformComponent.contentSize.height;
            var rect = new math.Rect(-uiTransformComponent.anchorPoint.x * width, -uiTransformComponent.anchorPoint.y * height, width, height);

            var _worldMatrix = math.mat4();

            math.Mat4.multiply(_worldMatrix, parentMat, _matrix);
            rect.transformMat4(_worldMatrix); // query child's BoundingBox

            if (!currentNode.children || currentNode.children.length === 0) {
              return rect;
            }

            var locChildren = currentNode.children;

            var _iterator = _createForOfIteratorHelper(locChildren),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var child = _step.value;

                if (child && child.active) {
                  var uiTransform = child.getComponent(UITransform);

                  if (uiTransform) {
                    var childRect = this.getBoundingBoxTo(currentNode.getWorldMatrix(), child);

                    if (childRect) {
                      math.Rect.union(rect, rect, childRect);
                    }
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            return rect;
          }
        }, {
          key: "worldSizeToCssSize",
          value: function worldSizeToCssSize(worldSize) {
            var worldGameSize = view.getVisibleSize();
            var cssSize = screen.windowSize;
            var cssVsWorldGameRatio = cssSize.width / worldGameSize.width;
            return worldSize * cssVsWorldGameRatio;
          }
        }, {
          key: "getScreenWidthCss",
          value: function getScreenWidthCss() {
            var _document = document,
                body = _document.body,
                documentElement = _document.documentElement;
            var bodyClientWidth = body.clientWidth;
            var docClientWidth = documentElement.clientWidth;
            return Math.max(docClientWidth, bodyClientWidth) || 0;
          }
        }, {
          key: "getScreenHeightCss",
          value: function getScreenHeightCss() {
            var _document2 = document,
                body = _document2.body,
                documentElement = _document2.documentElement;
            var bodyClientHeight = body.clientHeight;
            var docClientHeight = documentElement.clientHeight;
            return Math.max(docClientHeight, bodyClientHeight) || 0;
          }
        }]);

        return CocosUtils;
      }();

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "358fdIqjFdNzZGa95REWt2F", "Ads", undefined);

      var Ads = {
        MAX_BOTTOM_BANNER_RATIO: 1 / 6
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "0eeb868JeVE67iFwhbkRCmE", "ScreenKeys", undefined);

      var ScreenKeys = {
        TIME_UP_SCREEN: 'TimeUpScreen',
        LOADING_SCREEN: 'LoadingScreen',
        GET_ITEM_SCREEN: 'GetItemScreen',
        GET_COIN_SCREEN: 'GetCoinScreen',
        SETTINGS_SCREEN: 'SettingsScreen',
        START_LEVEL_SCREEN: 'StartLevelScreen',
        NOTIFICATION_SCREEN: 'NotificationScreen',
        LEVEL_COMPLETE_SCREEN: 'LevelCompleteScreen',
        CONGRATULATION_SCREEN: 'CongratulationScreen'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "a7a5fY8NXRDr4f9o8jGqbjt", "GeneralUtils", undefined);

      var _GameCore$4 = GameCore,
          Events$4 = _GameCore$4.Events,
          Configs = _GameCore$4.Configs,
          Plugins = _GameCore$4.Plugins;
      var _globalThis$game$3 = globalThis.game,
          ads = _globalThis$game$3.ads,
          language$1 = _globalThis$game$3.language,
          event$4 = _globalThis$game$3.event;

      var GeneralUtils = /*#__PURE__*/function () {
        function GeneralUtils() {
          _classCallCheck(this, GeneralUtils);
        }

        _createClass(GeneralUtils, null, [{
          key: "showBannerAds",
          value: function showBannerAds() {
            var BannerDisplayAdOptions = GameCore.Configs.Ads.BannerDisplayAdOptions;
            var worldGameSize = View.instance.getVisibleSize();
            var bannerRemainSizeCss = CocosUtils.worldSizeToCssSize(worldGameSize.height * Ads.MAX_BOTTOM_BANNER_RATIO);
            BannerDisplayAdOptions.forEach(function (_ref) {
              var PlacementId = _ref.PlacementId,
                  Position = _ref.Position,
                  BannerHeight = _ref.BannerHeight;
              if (Position === 'bottom' && BannerHeight > bannerRemainSizeCss) return;
              ads.showBannerAdAsync(PlacementId)["catch"](function (_) {// Safe to ignore
              });
            });
          }
        }, {
          key: "showInterstitialAdAsync",
          value: function () {
            var _showInterstitialAdAsync = _asyncToGenerator(function* (_ref2) {
              var _this = this;

              var component = _ref2.component,
                  forLevel = _ref2.forLevel,
                  excludeList = _ref2.excludeList,
                  includeList = _ref2.includeList,
                  onFailedCallback = _ref2.onFailedCallback,
                  onSucceedCallback = _ref2.onSucceedCallback;
              if (excludeList && excludeList.includes(GameSDK.getSDKName())) return;
              if (includeList && !includeList.includes(GameSDK.getSDKName())) return;
              if (forLevel !== undefined && Configs.Gameplay.StartAdAtLevel > forLevel) return;
              var INTERSTITIAL = Plugins.Ads.Types.INTERSTITIAL;
              if (!ads.canbeShowInterstitialAd()) return;
              var beforeTime = Date.now();

              try {
                this.muteAudio(true);
                var loadingText = language$1.getText('loading');
                this.showNotificationScreen(loadingText);
                var adStatus = ads.getAdStatus(Plugins.Ads.Types.INTERSTITIAL);

                if (adStatus !== Plugins.Ads.Status.FILLED) {
                  yield ads.loadAdAsync(INTERSTITIAL);
                }

                yield ads.showAdAsync(INTERSTITIAL);
                onSucceedCallback && onSucceedCallback();
              } catch (error) {
                console.error('showInterstitialAdAsync failed', error);
                onFailedCallback && onFailedCallback();
              } finally {
                this.muteAudio(false);
                var displayTime = (Date.now() - beforeTime) / 1000;
                component.scheduleOnce(function () {
                  _this.closeNotificationScreen();
                }, displayTime > 0.5 ? 0 : 0.5);
                ads.loadAdAsync(INTERSTITIAL)["catch"](function () {// Safe to ignore
                });
              }
            });

            function showInterstitialAdAsync(_x) {
              return _showInterstitialAdAsync.apply(this, arguments);
            }

            return showInterstitialAdAsync;
          }()
        }, {
          key: "showRewardVideoAdAsync",
          value: function () {
            var _showRewardVideoAdAsync = _asyncToGenerator(function* (_ref3) {
              var excludeList = _ref3.excludeList,
                  onFailedCallback = _ref3.onFailedCallback,
                  onSucceedCallback = _ref3.onSucceedCallback;
              if (excludeList && excludeList.includes(GameSDK.getSDKName())) return;
              var REWARDED_VIDEO = Plugins.Ads.Types.REWARDED_VIDEO;

              try {
                this.muteAudio(true);
                var loadingText = language$1.getText('loading');
                this.showNotificationScreen(loadingText);
                var adStatus = ads.getAdStatus(Plugins.Ads.Types.REWARDED_VIDEO);

                if (adStatus !== Plugins.Ads.Status.FILLED) {
                  yield ads.loadAdAsync(REWARDED_VIDEO);
                }

                yield ads.showAdAsync(REWARDED_VIDEO);
                this.closeNotificationScreen();
                onSucceedCallback && onSucceedCallback();
              } catch (error) {
                console.error('show ad failed', error);

                if (error instanceof Object && 'code' in error && error.code === 'USER_INPUT') {
                  this.showNotificationScreen('Sorry, no rewards!\n You have cancelled the ad.', 2);
                  return;
                }

                this.showNotificationScreen('No ads to display.', 2);
                onFailedCallback && onFailedCallback();
              } finally {
                this.muteAudio(false);
                ads.loadAdAsync(REWARDED_VIDEO)["catch"](function () {// Safe to ignore
                });
              }
            });

            function showRewardVideoAdAsync(_x2) {
              return _showRewardVideoAdAsync.apply(this, arguments);
            }

            return showRewardVideoAdAsync;
          }()
        }, {
          key: "muteAudio",
          value: function muteAudio(isMute) {
            this.muteMusic(isMute);
            this.muteSound(isMute);
          }
        }, {
          key: "muteMusic",
          value: function muteMusic(isMute) {
            var music = this.getMusicComponent();
            if (!music) return;
            music.mute(isMute);
          }
        }, {
          key: "muteSound",
          value: function muteSound(isMute) {
            var sound = this.getSoundComponent();
            if (!sound) return;
            sound.mute(isMute);
          }
        }, {
          key: "turnUpBackgroundMusic",
          value: function turnUpBackgroundMusic() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.setVolume(0.8);
          }
        }, {
          key: "turnOffBackgroundMusic",
          value: function turnOffBackgroundMusic() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.setVolume(0);
          }
        }, {
          key: "playSound",
          value: function playSound(name) {
            var sound = this.getSoundComponent();
            if (!sound) return;
            sound.play(name);
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message, duration) {
            event$4.emit(Events$4.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message,
                duration: duration
              }
            });
          }
        }, {
          key: "closeNotificationScreen",
          value: function closeNotificationScreen() {
            event$4.emit(Events$4.CLOSE_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN
            });
          }
        }, {
          key: "getSoundComponent",
          value: function getSoundComponent() {
            var _find;

            var sound = (_find = find('Sound')) === null || _find === void 0 ? void 0 : _find.getComponent(Sound);

            if (!sound) {
              console.warn('WinningScreen: Sound not found');
              return null;
            }

            return sound;
          }
        }, {
          key: "getMusicComponent",
          value: function getMusicComponent() {
            var _find2;

            var music = (_find2 = find('Music')) === null || _find2 === void 0 ? void 0 : _find2.getComponent(Music);

            if (!music) {
              console.warn('WinningScreen: Music not found');
              return null;
            }

            return music;
          }
        }]);

        return GeneralUtils;
      }();

      cclegacy._RF.pop();

      var _dec$c, _dec2$8, _dec3$6, _dec4$3, _dec5$1, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class$c, _class2$7, _descriptor$6, _descriptor2$3, _descriptor3$2, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "4b299Dv1kVGcqQmJC9yBPAV", "ButtonReleased", undefined);

      var ccclass$c = _decorator.ccclass,
          requireComponent$3 = _decorator.requireComponent,
          property$7 = _decorator.property,
          disallowMultiple$5 = _decorator.disallowMultiple,
          executionOrder$2 = _decorator.executionOrder;
      var ButtonReleased = (_dec$c = ccclass$c('ButtonReleased'), _dec2$8 = requireComponent$3([UITransform, Button, Animation]), _dec3$6 = executionOrder$2(111), _dec4$3 = property$7(AnimationClip), _dec5$1 = property$7(AnimationClip), _dec6 = property$7(AnimationClip), _dec7 = property$7(CCBoolean), _dec8 = property$7({
        visible: function visible() {
          return this.useDesktopHover;
        },
        type: AnimationClip
      }), _dec9 = property$7({
        visible: function visible() {
          return this.useDesktopHover;
        },
        type: AnimationClip
      }), _dec10 = property$7(CCBoolean), _dec11 = property$7({
        visible: function visible() {
          return this.useSound;
        },
        type: SoundKeys
      }), _dec12 = property$7(CCBoolean), _dec13 = property$7(EventHandler), _dec14 = property$7(EventHandler), _dec15 = property$7({
        tooltip: 'Add a delay after click to prevent spamming (not apply for cancel click)'
      }), _dec16 = property$7({
        visible: function visible() {
          return this.disableSpamClick;
        },
        tooltip: 'Delay time in seconds'
      }), _dec$c(_class$c = disallowMultiple$5(_class$c = _dec2$8(_class$c = _dec3$6(_class$c = (_class2$7 = /*#__PURE__*/function (_Component) {
        _inherits(ButtonReleased, _Component);

        var _super = _createSuper(ButtonReleased);

        function ButtonReleased() {
          var _this;

          _classCallCheck(this, ButtonReleased);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "downClip", _descriptor$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "upClip", _descriptor2$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "restClip", _descriptor3$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useDesktopHover", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mouseEnterClip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mouseLeaveClip", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useSound", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundKey", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emitBeforeExit", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchStartEvents", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchEndEvents", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "disableSpamClick", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "disableSpamDelay", _descriptor13, _assertThisInitialized(_this));
          /**
           * Handle anim scales the click area result in cancelling click
           */


          _this.currentClickBoundingBox = null;
          /**
           * Handle double click case
           */

          _this.hasDown = false;
          /**
           * Handle double click case
           */

          _this.hasUp = false;
          /**
           * Whether the button has been Down and Up
           *
           * For check onMouseLeave only
           */

          _this.hasFinishClickCycle = false;

          _this.onTouchStart = function (event) {
            if (!_this.buttonComponent.interactable) return;
            if (_this.hasDown) return;
            _this.currentClickBoundingBox = CocosUtils.getBoundingBoxToWorld(_this.node);

            _this.handleDown(event);
          };

          _this.onTouchEnd = function (event) {
            if (!_this.buttonComponent.interactable) return;
            if (!_this.hasDown) return;
            if (_this.hasUp) return;

            _this.handleUp(event);
          };

          _this.onTouchCancel = function (event) {
            var _this$currentClickBou;

            if (!_this.buttonComponent.interactable) return;
            if (!_this.hasDown) return;
            if (_this.hasUp) return;

            if (event instanceof EventTouch && (_this$currentClickBou = _this.currentClickBoundingBox) !== null && _this$currentClickBou !== void 0 && _this$currentClickBou.contains(event.getUILocation())) {
              _this.handleUp(event);

              return;
            }

            _this.hasUp = true;
            _this.hasFinishClickCycle = true;

            _this.runAnimation(_this.upClip.name).then(function () {
              _this.handleResetButtonState();
            });
          };

          _this.onMouseEnter = function (_event) {
            if (!_this.useDesktopHover) return;
            if (!_this.buttonComponent.interactable) return;
            if (_this.hasDown) return;
            _this.hasFinishClickCycle = false;

            _this.runAnimation(_this.mouseEnterClip.name);
          };

          _this.onMouseLeave = function (_event) {
            if (!_this.useDesktopHover) return;
            if (!_this.buttonComponent.interactable) return;
            if (_this.hasDown) return;
            if (_this.hasUp) return;
            if (_this.hasFinishClickCycle) return;

            _this.runAnimation(_this.mouseLeaveClip.name).then(function () {
              _this.handleResetButtonState();
            });
          };

          _this.handleResetButtonState = function () {
            _this.hasDown = false;
            _this.hasUp = false;
            if (!_this.buttonComponent) return; //Reset button scale to normal before animation

            _this.runAnimation(_this.restClip.name);
          };

          return _this;
        }

        _createClass(ButtonReleased, [{
          key: "onLoad",
          value: function onLoad() {
            this.buttonComponent = this.getComponent(Button);
            this.animationComponent = this.getComponent(Animation);
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            this.runAnimation(this.restClip.name);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.buttonComponent) {
              throw new Error('ButtonReleased: Button component not found');
            }

            if (!this.animationComponent) {
              throw new Error('ButtonReleased: Animation component not found');
            }

            var clips = this.animationComponent.clips.map(function (clip) {
              return clip === null || clip === void 0 ? void 0 : clip.name;
            }).filter(function (clip) {
              return clip !== null && clip !== undefined && typeof clip === 'string';
            });

            if (!clips.includes(this.downClip.name)) {
              this.animationComponent.addClip(this.downClip);
            }

            if (!clips.includes(this.upClip.name)) {
              this.animationComponent.addClip(this.upClip);
            }

            if (!clips.includes(this.restClip.name)) {
              this.animationComponent.addClip(this.restClip);
            }

            if (this.useDesktopHover) {
              if (!clips.includes(this.mouseEnterClip.name)) {
                this.animationComponent.addClip(this.mouseEnterClip);
              }

              if (!clips.includes(this.mouseLeaveClip.name)) {
                this.animationComponent.addClip(this.mouseLeaveClip);
              }
            }
          }
        }, {
          key: "onEnable",
          value: function onEnable() {
            if (this.animationComponent.clips.length < 2) {
              console.warn("ButtonAnimAddition: Animation component must have 2 clips in ".concat(this.node.name));
              return;
            } //? remove origin Button Event


            this.node.off(Input.EventType.TOUCH_END, //@ts-expect-error TS2339: Property '_onTouchEnded' does not exist on type 'Button'.
            this.buttonComponent._onTouchEnded, this.buttonComponent); //? add onClick custom handle

            this.node.on(Node$1.EventType.TOUCH_START, this.onTouchStart);
            this.node.on(Node$1.EventType.TOUCH_END, this.onTouchEnd);
            this.node.on(Node$1.EventType.TOUCH_CANCEL, this.onTouchCancel); //? Support for window

            this.node.on(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.on(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
          }
        }, {
          key: "onDisable",
          value: function onDisable() {
            this.node.off(Node$1.EventType.TOUCH_START, this.onTouchStart);
            this.node.off(Node$1.EventType.TOUCH_END, this.onTouchEnd);
            this.node.off(Node$1.EventType.TOUCH_CANCEL, this.onTouchCancel); //? Support for window

            this.node.off(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.off(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
            this.unschedule(this.handleResetButtonState);
            this.handleResetButtonState();
          }
        }, {
          key: "handleDown",
          value: function handleDown(event) {
            var _this2 = this;

            this.hasDown = true;
            this.runAnimation(this.downClip.name);

            if (this.useSound) {
              GeneralUtils.playSound(SoundKeysMapping[this.soundKey]);
            }

            this.touchStartEvents.forEach(function (clickEvent) {
              clickEvent.emit([event, clickEvent.customEventData, _this2]);
            });
          }
        }, {
          key: "handleUp",
          value: function handleUp(event) {
            var _this3 = this;

            this.hasUp = true;
            this.hasFinishClickCycle = true;
            this.runAnimation(this.upClip.name).then(function () {
              if (_this3.disableSpamClick) {
                _this3.scheduleOnce(_this3.handleResetButtonState, _this3.disableSpamDelay);
              } else {
                _this3.handleResetButtonState();
              }

              if (!_this3.emitBeforeExit) {
                _this3.emitButtonEvents(event);
              }

              _this3.touchEndEvents.forEach(function (clickEvent) {
                clickEvent.emit([event, clickEvent.customEventData, _this3]);
              });
            });

            if (this.emitBeforeExit) {
              this.emitButtonEvents(event);
            }
          }
        }, {
          key: "emitButtonEvents",
          value: function emitButtonEvents(event) {
            var _this$buttonComponent;

            if (this.buttonComponent && !this.buttonComponent.interactable) return;
            (_this$buttonComponent = this.buttonComponent) === null || _this$buttonComponent === void 0 ? void 0 : _this$buttonComponent.clickEvents.forEach(function (clickEvent) {
              clickEvent.emit([event, clickEvent.customEventData]);
            });
          }
        }, {
          key: "runAnimation",
          value: function runAnimation(name) {
            var _this4 = this;

            this.animationComponent.off(Animation.EventType.FINISHED);
            this.animationComponent.play(name);
            return new Promise(function (resolve) {
              _this4.animationComponent.once(Animation.EventType.FINISHED, function () {
                resolve();
              });
            });
          }
        }, {
          key: "debugLog",
          value: function debugLog() {
            console.log("Clicked ".concat(this.node.name));
          }
        }]);

        return ButtonReleased;
      }(Component), (_descriptor$6 = _applyDecoratedDescriptor(_class2$7.prototype, "downClip", [_dec4$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$3 = _applyDecoratedDescriptor(_class2$7.prototype, "upClip", [_dec5$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$2 = _applyDecoratedDescriptor(_class2$7.prototype, "restClip", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2$7.prototype, "useDesktopHover", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2$7.prototype, "mouseEnterClip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2$7.prototype, "mouseLeaveClip", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2$7.prototype, "useSound", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2$7.prototype, "soundKey", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SoundKeys[CodeSoundKeys.BUTTON_CLICK];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2$7.prototype, "emitBeforeExit", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2$7.prototype, "touchStartEvents", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2$7.prototype, "touchEndEvents", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2$7.prototype, "disableSpamClick", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2$7.prototype, "disableSpamDelay", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2$7)) || _class$c) || _class$c) || _class$c) || _class$c);

      cclegacy._RF.pop();

      var _dec$d, _dec2$9, _dec3$7, _class$d;

      cclegacy._RF.push({}, "28583YOWYJLYqOTxK/1CK7p", "Orientation", undefined);

      var ccclass$d = _decorator.ccclass,
          executionOrder$3 = _decorator.executionOrder,
          requireComponent$4 = _decorator.requireComponent,
          disallowMultiple$6 = _decorator.disallowMultiple;
      var F = GameCore.Utils.Function;
      var Layout$2 = GameWorld.Layout,
          DesignSize = GameWorld.DesignSize;
      var Portrait = DesignSize.Portrait,
          Landscape = DesignSize.Landscape;
      var Orientation = (_dec$d = ccclass$d('Orientation'), _dec2$9 = executionOrder$3(-999), _dec3$7 = requireComponent$4([Camera]), _dec$d(_class$d = disallowMultiple$6(_class$d = _dec2$9(_class$d = _dec3$7(_class$d = /*#__PURE__*/function (_Component) {
        _inherits(Orientation, _Component);

        var _super = _createSuper(Orientation);

        function Orientation() {
          var _this;

          _classCallCheck(this, Orientation);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.currentLayout = '';
          _this.handleViewResize = F.debounce(function () {
            _this.setupOrientationByScreenSize();
          }, 200);
          return _this;
        }

        _createClass(Orientation, [{
          key: "__preload",
          value: function __preload() {
            this.camera = this.getComponent(Camera);
            this.canvas = this.node.scene.getComponentInChildren(Canvas);
            this.validateRequiredComponents();
            this.listenResizeEvent();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.camera) {
              throw new Error('Orientation: Camera not found');
            }

            if (!this.canvas) {
              throw new Error('Orientation: Canvas not found');
            }
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.attachCameraToCanvas();
            this.setupOrientationByScreenSize();
          }
        }, {
          key: "attachCameraToCanvas",
          value: function attachCameraToCanvas() {
            this.canvas.cameraComponent = this.camera;
          }
        }, {
          key: "setupOrientationByScreenSize",
          value: function setupOrientationByScreenSize() {
            var _screen$windowSize = screen.windowSize,
                width = _screen$windowSize.width,
                height = _screen$windowSize.height;
            var ratio = width / height;
            var isPortraitLossRatio = ratio > this.getPortraitRatio();
            console.info('setupOrientationByScreenSize', {
              width: width,
              height: height,
              ratio: ratio,
              isPortraitLossRatio: isPortraitLossRatio
            });

            if (!isPortraitLossRatio) {
              this.setPortraitView();
            } else {
              this.setLandscapeView();
            }

            this.node.scene.emit(GameEvents.VIEW_RESIZE, {
              width: width,
              height: height
            });
          }
        }, {
          key: "setPortraitView",
          value: function setPortraitView() {
            var resolution = screen.resolution;
            View.instance.setOrientation(macro.ORIENTATION_AUTO);
            var worldRatio = this.getWorldRatio();
            var screenRatio = this.getScreenRatio(); // ? Keep landscape ratio, change FULL_PORTRAIT_SIZE if you want to stretch the game

            var resolutionPolicy = ResolutionPolicy.FIXED_WIDTH;

            if (worldRatio >= screenRatio && !GameWorld.FULL_PORTRAIT_SIZE) {
              resolutionPolicy = ResolutionPolicy.SHOW_ALL;
            }

            View.instance.setDesignResolutionSize(Portrait.WIDTH, Portrait.HEIGHT, resolutionPolicy);
            console.info('setPortraitView', {
              resolution: resolution,
              worldRatio: worldRatio,
              screenRatio: screenRatio
            });

            if (this.currentLayout !== Layout$2.Portrait) {
              this.node.scene.emit(GameEvents.LAYOUT_CHANGED, Layout$2.Portrait);
              this.currentLayout = Layout$2.Portrait;
            }
          }
        }, {
          key: "setLandscapeView",
          value: function setLandscapeView() {
            var resolution = screen.resolution;
            View.instance.setOrientation(macro.ORIENTATION_AUTO);
            var worldRatio = this.getWorldRatio();
            var screenRatio = this.getScreenRatio(); // ? Keep landscape ratio, change FULL_LANDSCAPE_SIZE if you want to support full screen size

            var resolutionPolicy = ResolutionPolicy.FIXED_HEIGHT;

            if (worldRatio < screenRatio && !GameWorld.FULL_LANDSCAPE_SIZE) {
              resolutionPolicy = ResolutionPolicy.EXACT_FIT; // resolutionPolicy = ResolutionPolicy.SHOW_ALL
            }

            View.instance.setDesignResolutionSize(Landscape.WIDTH, Landscape.HEIGHT, resolutionPolicy);
            console.info('setLandscapeView', {
              resolution: resolution,
              worldRatio: worldRatio,
              screenRatio: screenRatio
            });

            if (this.currentLayout !== Layout$2.Landscape) {
              this.node.scene.emit(GameEvents.LAYOUT_CHANGED, Layout$2.Landscape);
              this.currentLayout = Layout$2.Landscape;
            }
          }
        }, {
          key: "listenResizeEvent",
          value: function listenResizeEvent() {
            if (sys.isBrowser) {
              screen.on('window-resize', this.handleViewResize, this);
            } else if (sys.isMobile) {
              window.addEventListener('resize', this.handleViewResize, {
                capture: false,
                passive: true
              });
            } // ? Listen fake resize event, for manually resize


            this.node.scene.on(GameEvents.REQUEST_VIEW_RESIZE, this.handleViewResize);
          }
        }, {
          key: "getScreenRatio",
          value: function getScreenRatio() {
            var resolution = screen.resolution;
            return resolution.width / resolution.height;
          }
        }, {
          key: "getWorldRatio",
          value: function getWorldRatio() {
            var _View$instance$getDes = View.instance.getDesignResolutionSize(),
                width = _View$instance$getDes.width,
                height = _View$instance$getDes.height;

            return width / height;
          }
        }, {
          key: "getPortraitRatio",
          value: function getPortraitRatio() {
            return Portrait.WIDTH / Portrait.HEIGHT;
          }
        }]);

        return Orientation;
      }(Component)) || _class$d) || _class$d) || _class$d) || _class$d);

      cclegacy._RF.pop();

      var _dec$e, _dec2$a, _dec3$8, _class$e, _class2$8, _descriptor$7, _descriptor2$4, _descriptor3$3;

      cclegacy._RF.push({}, "0e570DdAIZPKY6DNtNerFmX", "OpacityToggler", undefined);

      var ccclass$e = _decorator.ccclass,
          requireComponent$5 = _decorator.requireComponent,
          property$8 = _decorator.property;
      var OpacityToggler = (_dec$e = ccclass$e('OpacityToggler'), _dec2$a = requireComponent$5([UIOpacity]), _dec3$8 = property$8(CCBoolean), _dec$e(_class$e = _dec2$a(_class$e = (_class2$8 = /*#__PURE__*/function (_Component) {
        _inherits(OpacityToggler, _Component);

        var _super = _createSuper(OpacityToggler);

        function OpacityToggler() {
          var _this;

          _classCallCheck(this, OpacityToggler);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "isActive", _descriptor$7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "activeValue", _descriptor2$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "inActiveValue", _descriptor3$3, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(OpacityToggler, [{
          key: "onLoad",
          value: function onLoad() {
            this.opacityComponent = this.getComponent(UIOpacity);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.opacityComponent) {
              throw new Error('OpacityToggler: UIOpacity not found');
            }
          }
        }, {
          key: "changeState",
          value: function changeState(active) {
            if (active === undefined) {
              active = !this.isActive;
            } else if (active) {
              this.opacityComponent.opacity = this.activeValue;
              this.isActive = true;
            } else {
              this.opacityComponent.opacity = this.inActiveValue;
              this.isActive = false;
            }
          }
        }]);

        return OpacityToggler;
      }(Component), (_descriptor$7 = _applyDecoratedDescriptor(_class2$8.prototype, "isActive", [_dec3$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2$4 = _applyDecoratedDescriptor(_class2$8.prototype, "activeValue", [property$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 255;
        }
      }), _descriptor3$3 = _applyDecoratedDescriptor(_class2$8.prototype, "inActiveValue", [property$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 128;
        }
      })), _class2$8)) || _class$e) || _class$e);

      cclegacy._RF.pop();

      var _dec$f, _dec2$b, _dec3$9, _class$f, _class2$9, _class3$1;

      cclegacy._RF.push({}, "7ef37Q3PZpKYaeik5JzGwNy", "DebugResolution", undefined);

      var ccclass$f = _decorator.ccclass,
          property$9 = _decorator.property,
          requireComponent$6 = _decorator.requireComponent,
          disallowMultiple$7 = _decorator.disallowMultiple,
          executeInEditMode$1 = _decorator.executeInEditMode;
      var _GameWorld$DesignSize = GameWorld.DesignSize,
          Portrait$1 = _GameWorld$DesignSize.Portrait,
          Landscape$1 = _GameWorld$DesignSize.Landscape;
      var DebugResolution = (_dec$f = ccclass$f('DebugResolution'), _dec2$b = requireComponent$6([Graphics]), _dec3$9 = executeInEditMode$1(true), _dec$f(_class$f = disallowMultiple$7(_class$f = _dec2$b(_class$f = _dec3$9(_class$f = (_class2$9 = (_class3$1 = /*#__PURE__*/function (_Component) {
        _inherits(DebugResolution, _Component);

        var _super = _createSuper(DebugResolution);

        function DebugResolution() {
          var _this;

          _classCallCheck(this, DebugResolution);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleLayoutChange = function () {
            _this.graphics.clear();

            _this.start();
          };

          return _this;
        }

        _createClass(DebugResolution, [{
          key: "drawPortrait",
          get: function get() {
            return DebugResolution._drawPortrait;
          },
          set: function set(value) {
            if (value === DebugResolution._drawPortrait) return;

            if (value) {
              this.drawPortraitResolution();
            } else {
              this.graphics.clear();
            }

            DebugResolution._drawPortrait = value;

            if (DebugResolution._drawLandscape) {
              this.drawLandscapeResolution();
            }
          }
        }, {
          key: "drawLandscape",
          get: function get() {
            return DebugResolution._drawLandscape;
          },
          set: function set(value) {
            if (value === DebugResolution._drawLandscape) return;

            if (value) {
              this.drawLandscapeResolution();
            } else {
              this.graphics.clear();
            }

            DebugResolution._drawLandscape = value;

            if (DebugResolution._drawPortrait) {
              this.drawPortraitResolution();
            }
          }
        }, {
          key: "__preload",
          value: function __preload() {
            this.graphics = this.getComponent(Graphics);
            this.validateRequiredComponents();
            this.listenGameEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.graphics) {
              throw new Error('DebugResolution: Graphics not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.LAYOUT_CHANGED, this.handleLayoutChange);
          }
        }, {
          key: "start",
          value: function start() {
            if (this.drawPortrait) {
              this.drawPortraitResolution();
            }

            if (this.drawLandscape) {
              this.drawLandscapeResolution();
            }
          }
        }, {
          key: "drawPortraitResolution",
          value: function drawPortraitResolution() {
            var graphics = this.graphics;
            var width = Portrait$1.WIDTH;
            var height = Portrait$1.HEIGHT;
            var x = -width / 2;
            var y = -height / 2;
            graphics.strokeColor = Color.GREEN;
            graphics.rect(x, y, width, height);
            graphics.stroke();
          }
        }, {
          key: "drawLandscapeResolution",
          value: function drawLandscapeResolution() {
            var graphics = this.graphics;
            var width = Landscape$1.WIDTH;
            var height = Landscape$1.HEIGHT;
            var x = -width / 2;
            var y = -height / 2;
            graphics.strokeColor = Color.CYAN;
            graphics.rect(x, y, width, height);
            graphics.stroke();
          }
        }]);

        return DebugResolution;
      }(Component), _class3$1._drawPortrait = true, _class3$1._drawLandscape = true, _class3$1), (_applyDecoratedDescriptor(_class2$9.prototype, "drawPortrait", [property$9], Object.getOwnPropertyDescriptor(_class2$9.prototype, "drawPortrait"), _class2$9.prototype), _applyDecoratedDescriptor(_class2$9.prototype, "drawLandscape", [property$9], Object.getOwnPropertyDescriptor(_class2$9.prototype, "drawLandscape"), _class2$9.prototype)), _class2$9)) || _class$f) || _class$f) || _class$f) || _class$f);

      cclegacy._RF.pop();

      var _dec$g, _class$g;

      cclegacy._RF.push({}, "51079bCfn9MZK6cuxbahS7M", "AdaptivePerformance", undefined);

      var ccclass$g = _decorator.ccclass,
          disallowMultiple$8 = _decorator.disallowMultiple;
      var _GameCore$5 = GameCore,
          Events$5 = _GameCore$5.Events,
          Utils$1 = _GameCore$5.Utils;
      var F$1 = Utils$1.Function,
          V = Utils$1.Valid;
      var _globalThis$game$4 = globalThis.game,
          event$5 = _globalThis$game$4.event,
          adaptivePerformance = _globalThis$game$4.adaptivePerformance;
      var AdaptivePerformance = (_dec$g = ccclass$g('AdaptivePerformance'), _dec$g(_class$g = disallowMultiple$8(_class$g = /*#__PURE__*/function (_Component) {
        _inherits(AdaptivePerformance, _Component);

        var _super = _createSuper(AdaptivePerformance);

        function AdaptivePerformance() {
          var _this;

          _classCallCheck(this, AdaptivePerformance);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.originalWidth = 0;
          _this.originalHeight = 0;
          _this.originalDevicePixelRatio = 0;
          _this.hasCalledResizeCanvas = false;
          _this.hasRequestedResizeGame = false;

          _this.handleRequestResizeGame = function (payload) {
            if (!_this.enabled) return;
            var forcePixelRatio = payload.forcePixelRatio;
            if (!V.isNumber(forcePixelRatio)) return; // ? Mush to set to window.devicePixelRatio for other component of Cocos work correctly

            window.devicePixelRatio = forcePixelRatio;
            _this.hasRequestedResizeGame = true; // ? Emit fake view resize event (Orientation component will handle this event)

            _this.node.scene.emit(GameEvents.REQUEST_VIEW_RESIZE);
          };

          _this.handleGameResized = function (payload) {
            if (!_this.enabled) return; // ? Is last event from Orientation component will be emit

            if (_this.hasCalledResizeCanvas) {
              var width = payload.width,
                  height = payload.height;

              _this.updateGameDivCSS(width, height);

              _this.hasCalledResizeCanvas = false;
            }

            if (!_this.hasRequestedResizeGame) return;
            _this.hasRequestedResizeGame = false;
            var scale = window.devicePixelRatio / _this.originalDevicePixelRatio;
            var newWidth = _this.originalWidth * scale;
            var newHeight = _this.originalHeight * scale;

            _this.setCanvasSize(newWidth, newHeight);
          };

          _this.updateGameDivCSS = F$1.debounce(function (width, height) {
            var gameDiv = document.getElementById('GameDiv');
            if (!gameDiv) return;
            gameDiv.style.width = "".concat(width, "px");
            gameDiv.style.height = "".concat(height, "px"); // gameDiv.style.width = '100%'
            // gameDiv.style.height = '100%'
          }, 10);
          return _this;
        }

        _createClass(AdaptivePerformance, [{
          key: "__preload",
          value: function __preload() {
            var _screen$windowSize = screen.windowSize,
                width = _screen$windowSize.width,
                height = _screen$windowSize.height;
            this.originalWidth = width;
            this.originalHeight = height;
            this.originalDevicePixelRatio = screen.devicePixelRatio;
            adaptivePerformance.activate(this.node.scene.name, window.devicePixelRatio);
            this.listenEvents();
          }
        }, {
          key: "listenEvents",
          value: function listenEvents() {
            event$5.on(Events$5.REQUEST_RESIZE_GAME, this.handleRequestResizeGame); // ? Listen event from Orientation component

            this.node.scene.on(GameEvents.VIEW_RESIZE, this.handleGameResized);
          }
        }, {
          key: "setCanvasSize",
          value: function setCanvasSize(width, height) {
            this.hasCalledResizeCanvas = true;
            View.instance.resizeWithBrowserSize(false);
            screen.windowSize = new math.Size(width, height);
            View.instance.resizeWithBrowserSize(true);
          }
        }, {
          key: "lateUpdate",
          value: function lateUpdate(dtInSeconds) {
            if (!this.enabled) return;
            var dtInMs = dtInSeconds * 1000;
            adaptivePerformance.updatePostStepDeltaTime(dtInMs);
          }
        }, {
          key: "update",
          value: function update() {
            if (!this.enabled) return;
            this.updateActualFPS();
          }
        }, {
          key: "updateActualFPS",
          value: function updateActualFPS() {
            var stats = profiler.stats;
            if (!stats) return;
            var actualFPS = stats.fps.counter.value;
            adaptivePerformance.updateActualFPS(actualFPS);
          }
        }]);

        return AdaptivePerformance;
      }(Component)) || _class$g) || _class$g);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "adb272QtfxDGZ+87PwkWEiN", "GameSettings", undefined);

      var GameSettings = {
        MaxLevel: 325
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "542caJcCPRMI5EaOkgOzhek", "ItemKeys", undefined);

      var ItemKeys = {
        HINT: 'hint',
        THUNDER: 'thunder',
        STORM: 'storm',
        PLIERS: 'pliers'
      };

      cclegacy._RF.pop();

      var _dec$h, _dec2$c, _class$h;

      cclegacy._RF.push({}, "0c0e60Dgh1HQrJY3xZUXZZe", "GameCore", undefined);

      var ccclass$h = _decorator.ccclass,
          disallowMultiple$9 = _decorator.disallowMultiple,
          executionOrder$4 = _decorator.executionOrder;
      var _GameCore$6 = GameCore,
          Utils$2 = _GameCore$6.Utils,
          Events$6 = _GameCore$6.Events,
          Configs$1 = _GameCore$6.Configs,
          Dtos = _GameCore$6.Dtos;
      var _globalThis$game$5 = globalThis.game,
          event$6 = _globalThis$game$5.event,
          context = _globalThis$game$5.context;
      var Corecos = (_dec$h = ccclass$h('Corecos'), _dec2$c = executionOrder$4(1000), _dec$h(_class$h = disallowMultiple$9(_class$h = _dec2$c(_class$h = /*#__PURE__*/function (_Component) {
        _inherits(Corecos, _Component);

        var _super = _createSuper(Corecos);

        function Corecos() {
          var _this;

          _classCallCheck(this, Corecos);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleWhenCoreBooting = function () {
            // ? Control GameCore flow for easy injection
            event$6.emit(Events$6.REQUEST_CORE_START);
          };

          _this.handleWhenCoreStarting = function () {
            _this.setupDefaultPlayerGameData();
          };

          _this.handleWhenCoreReady = /*#__PURE__*/_asyncToGenerator(function* () {
            yield _this.startGameAsync();

            _this.startProcessContextData();

            _this.initCoreDebuggerTools();
          });
          return _this;
        }

        _createClass(Corecos, [{
          key: "__preload",
          value: function __preload() {
            this.listenEvents();
          }
        }, {
          key: "listenEvents",
          value: function listenEvents() {
            event$6.once(Events$6.CORE_BOOTING, this.handleWhenCoreBooting);
            event$6.once(Events$6.CORE_STARTING, this.handleWhenCoreStarting);
            event$6.once(Events$6.CORE_READY, this.handleWhenCoreReady);
          }
        }, {
          key: "start",
          value: function start() {
            // Check GameCore has emit CORE_BOOTING event
            var isGameCoreBooted = event$6.getEventEmitCount(Events$6.CORE_BOOTING) > 0;

            if (isGameCoreBooted) {
              this.handleWhenCoreBooting();
            }
          }
        }, {
          key: "setupDefaultPlayerGameData",
          value: function setupDefaultPlayerGameData() {
            var _items;

            var MaxLevel = GameSettings.MaxLevel;
            var Player = Dtos.Player; // * Add default player game data
            // ? Check interface from /types/game-core/player.d.ts

            var defaultData = {
              level: 1,
              coins: 0,
              totalLevel: MaxLevel,
              levelVersion: 0,
              passAllLevels: false,
              items: (_items = {}, _defineProperty(_items, ItemKeys.HINT, 0), _defineProperty(_items, ItemKeys.THUNDER, 0), _defineProperty(_items, ItemKeys.STORM, 0), _defineProperty(_items, ItemKeys.PLIERS, 0), _items),
              themes: {}
            };
            Player.GameData.addDefaultData(defaultData); //TODO: fix core to not modify defaultData
            //@ts-expect-error waiting update core

            window.__defaultData = Utils$2.Json.clone(Player.Data.prototype.data); // ? Override validate function or add new validate function

            Player.GameData.addValidateFunction('totalLevel', function (totalLevel) {
              if (!Utils$2.Valid.isNumber(totalLevel) || totalLevel < 1) {
                throw new Error("totalLevel ".concat(totalLevel, " is invalid"));
              }
            });
            Player.GameData.addValidateFunction('levelVersion', function (levelVersion) {
              if (!Utils$2.Valid.isNumber(levelVersion) || levelVersion < 0) {
                throw new Error("levelVersion ".concat(levelVersion, " is invalid"));
              }
            });
            Player.GameData.addValidateFunction('passAllLevels', function (passAllLevels) {
              if (!Utils$2.Valid.isBoolean(passAllLevels)) {
                throw new Error("passAllLevels ".concat(passAllLevels, " is invalid"));
              }
            });
            Player.GameData.addValidateFunction('items', function (items) {
              if (!Utils$2.Valid.isObject(items)) {
                throw new Error("items ".concat(items, " is invalid"));
              }

              var keys = Object.keys(items);
              var values = Object.values(items);

              if (keys.length !== values.length) {
                throw new Error("items ".concat(items, " is invalid"));
              }

              if (!keys.includes(ItemKeys.HINT) || !keys.includes(ItemKeys.THUNDER) || !keys.includes(ItemKeys.STORM) || !keys.includes(ItemKeys.PLIERS)) {
                throw new Error("items ".concat(items, " is invalid"));
              }

              values.forEach(function (value) {
                if (!Utils$2.Valid.isNumber(value) || value < 0) {
                  throw new Error("items ".concat(items, " is invalid"));
                }
              });
            });
            Player.GameData.addValidateFunction('themes', function (themes) {
              if (!Utils$2.Valid.isObject(themes)) {
                throw new Error("passAllLevels ".concat(themes, " is invalid"));
              }
            });
          } // ? Why call startGameAsync here?
          // * We want to make sure that the game is ready to start, not show

        }, {
          key: "startGameAsync",
          value: function () {
            var _startGameAsync = _asyncToGenerator(function* () {
              try {
                yield GameSDK.startGameAsync();
              } catch (error) {
                console.warn('GameSDK.startGameAsync: error', error);
              }
            });

            function startGameAsync() {
              return _startGameAsync.apply(this, arguments);
            }

            return startGameAsync;
          }()
        }, {
          key: "startProcessContextData",
          value: function () {
            var _startProcessContextData = _asyncToGenerator(function* () {
              // this.isProgressContextData = true
              // processContextData method will be auto switch to next scene
              // * It will also automatically call the flows from the match plugin and context plugin
              // ? This means that the match flow of the GameScene will need to be skipped when first entering your game
              context.processContextData()["catch"](function (error) {
                console.error('ContextPlugin.processContextData', error);
              });
            });

            function startProcessContextData() {
              return _startProcessContextData.apply(this, arguments);
            }

            return startProcessContextData;
          }()
        }, {
          key: "initCoreDebuggerTools",
          value: function initCoreDebuggerTools() {
            var isDebug = Utils$2.Valid.isDebugger();
            if (!isDebug) return;
            this.initCanvasRecorder();
          }
        }, {
          key: "initCanvasRecorder",
          value: function initCanvasRecorder() {
            var Enable = Configs$1.Debugger.CanvasRecorder.Enable;
            if (!Enable) return;
            var canvasRecorder = globalThis.game.canvasRecorder;
            if (!game$1.canvas || !canvasRecorder) return;
            canvasRecorder.setCanvas(game$1.canvas); // canvasRecorder.runTestCanvas()
            // return

            var options = canvasRecorder.getOptions();

            var nextFrame = function nextFrame() {
              game$1.pause();
              game$1.step();
            };

            var originWaitNextFrame = canvasRecorder.waitNextFrame;
            canvasRecorder.waitNextFrame = /*#__PURE__*/_asyncToGenerator(function* () {
              if (options.syncFps) {
                return new Promise(function (resolve) {
                  director.once(Director.EVENT_AFTER_RENDER, resolve);
                  nextFrame();
                });
              } else {
                game$1.resume();
                yield originWaitNextFrame.call(canvasRecorder);
                return Promise.resolve();
              }
            });
          }
        }]);

        return Corecos;
      }(Component)) || _class$h) || _class$h) || _class$h);

      cclegacy._RF.pop();

      var _dec$i, _dec2$d, _dec3$a, _class$i;

      cclegacy._RF.push({}, "c2c6fuMM99Ay57G6rJyH5K5", "RemoteConfig", undefined);

      var ccclass$i = _decorator.ccclass,
          disallowMultiple$a = _decorator.disallowMultiple,
          executionOrder$5 = _decorator.executionOrder,
          requireComponent$7 = _decorator.requireComponent;
      var _GameCore$7 = GameCore,
          Events$7 = _GameCore$7.Events;
      var event$7 = globalThis.game.event;
      var RemoteConfig = (_dec$i = ccclass$i('RemoteConfig'), _dec2$d = executionOrder$5(-200), _dec3$a = requireComponent$7(Corecos), _dec$i(_class$i = _dec2$d(_class$i = disallowMultiple$a(_class$i = _dec3$a(_class$i = /*#__PURE__*/function (_Component) {
        _inherits(RemoteConfig, _Component);

        var _super = _createSuper(RemoteConfig);

        function RemoteConfig() {
          var _this;

          _classCallCheck(this, RemoteConfig);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleHotReload = function () {
            if (!_this.enabled) return;
            game$1.restart();
          };

          _this.handleUpdateConfig = function (data) {
            if (!_this.enabled) return;
            if (data.type !== 'Gameplay') return; // ? Broadcast to all node that config is need to update

            _this.node.scene.emit(GameEvents.GAMEPLAY_UPDATE_CONFIG, data.config);

            var id = data.id,
                type = data.type; // ? Tell RemoteConfig plugin that config is updated

            event$7.emit(Events$7.REMOTE_CONFIG_UPDATED, {
              id: id,
              type: type
            });
          };

          return _this;
        }

        _createClass(RemoteConfig, [{
          key: "__preload",
          value: function __preload() {
            this.listenEvents();
          }
        }, {
          key: "listenEvents",
          value: function listenEvents() {
            event$7.on(Events$7.REQUEST_HOT_RELOAD, this.handleHotReload);
            event$7.on(Events$7.REQUEST_UPDATE_CONFIG, this.handleUpdateConfig);
          }
        }]);

        return RemoteConfig;
      }(Component)) || _class$i) || _class$i) || _class$i) || _class$i);

      cclegacy._RF.pop();

      var _dec$j, _dec2$e, _dec3$b, _dec4$4, _dec5$2, _dec6$1, _dec7$1, _dec8$1, _dec9$1, _class$j, _class2$a, _descriptor$8, _descriptor2$5, _descriptor3$4, _descriptor4$1, _descriptor5$1, _descriptor6$1, _descriptor7$1;

      cclegacy._RF.push({}, "0e2d6yn/BVObK1kyTJ5a09a", "GameStats", undefined);

      var ccclass$j = _decorator.ccclass,
          executionOrder$6 = _decorator.executionOrder,
          property$a = _decorator.property;
      var _GameCore$8 = GameCore,
          Utils$3 = _GameCore$8.Utils;
      var NORMAL_COLOR = Color.BLACK;
      var WARNING_COLOR = Color.MAGENTA;
      var DANGER_COLOR = Color.RED;
      var GameStats = (_dec$j = ccclass$j('GameStats'), _dec2$e = executionOrder$6(-1000), _dec3$b = property$a(Label), _dec4$4 = property$a(Label), _dec5$2 = property$a(Label), _dec6$1 = property$a(Label), _dec7$1 = property$a(Label), _dec8$1 = property$a(Label), _dec9$1 = property$a(Label), _dec$j(_class$j = _dec2$e(_class$j = (_class2$a = /*#__PURE__*/function (_Component) {
        _inherits(GameStats, _Component);

        var _super = _createSuper(GameStats);

        function GameStats() {
          var _this;

          _classCallCheck(this, GameStats);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "fpsLabel", _descriptor$8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "drawCountLabel", _descriptor2$5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logicTimeLabel", _descriptor3$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "physicTimeLabel", _descriptor4$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "renderTimeLabel", _descriptor5$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "objectMemoryUsageLabel", _descriptor6$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textureMemoryUsageLabel", _descriptor7$1, _assertThisInitialized(_this));

          _this.refreshInterval = 0.5;

          _this.handleMouseDown = function () {
            _this.bg.enabled = !_this.bg.enabled;
          };

          _this.waitForStats = function () {
            if (!profiler.stats) return;

            _this.unschedule(_this.waitForStats);

            _this.node.active = true;
            _this.stats = profiler.stats;

            _this.hideCocosStats();

            _this.startUpdateStats();
          };

          _this.updateStats = function () {
            _this.updateFps();

            _this.updateDrawCalls();

            _this.updateLogicTime();

            _this.updatePhysicTime();

            _this.updateRenderTime();

            _this.updateObjectMemoryUsage();

            _this.updateTextureMemoryUsage();

            _this.hideCocosStats();
          };

          return _this;
        }

        _createClass(GameStats, [{
          key: "onLoad",
          value: function onLoad() {
            this.bg = this.getComponent(Sprite);
            this.validateRequiredComponents();
            this.listenInputEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.bg) throw new Error('Missing background sprite');
            if (!this.fpsLabel) throw new Error('Missing fpsLabel');
            if (!this.drawCountLabel) throw new Error('Missing drawCountLabel');
            if (!this.logicTimeLabel) throw new Error('Missing logicTimeLabel');
            if (!this.physicTimeLabel) throw new Error('Missing physicTimeLabel');
            if (!this.renderTimeLabel) throw new Error('Missing renderTimeLabel');
            if (!this.objectMemoryUsageLabel) throw new Error('Missing objectMemoryUsageLabel');
            if (!this.textureMemoryUsageLabel) throw new Error('Missing textureMemoryUsageLabel');
          }
        }, {
          key: "listenInputEvents",
          value: function listenInputEvents() {
            this.node.on(Input.EventType.TOUCH_START, this.handleMouseDown);
          }
        }, {
          key: "start",
          value: function start() {
            this.bg.enabled = false;
            this.node.active = false; // console.warn({ profiler, isDebug: Utils.Valid.isDebugger() })

            if (!profiler) return;

            if (!Utils$3.Valid.isDebugger()) {
              profiler.hideStats();
              return;
            }

            profiler.showStats();
            this.schedule(this.waitForStats, 0.5, 20);
          }
        }, {
          key: "hideCocosStats",
          value: // ? Only hide the cocos stats UI
          function hideCocosStats() {
            if (!profiler) return; // @ts-expect-error - private property

            profiler._showFPS = false; // @ts-expect-error - private property

            var _rootNode = profiler._rootNode;

            if (_rootNode) {
              _rootNode.active = false;

              if (_rootNode.isValid) {
                _rootNode.destroyAllChildren();

                _rootNode.removeAllChildren();

                _rootNode.destroy();
              }
            }
          }
        }, {
          key: "startUpdateStats",
          value: function startUpdateStats() {
            this.schedule(this.updateStats, this.refreshInterval);
          }
        }, {
          key: "updateFps",
          value: function updateFps() {
            var fps = this.getFps();
            this.updateFpsColor(fps);
            this.fpsLabel.string = "FPS: ".concat(fps);
          } // ? Good fps is 60, so 1 frame is 16.6ms, that mean renderTime + logicTime + physicTime
          // ? If renderTime, logicTime or physicTime is bigger than 5ms, it's not good

        }, {
          key: "updateFpsColor",
          value: function updateFpsColor(fps) {
            if (fps < 30) {
              this.fpsLabel.color = DANGER_COLOR;
            } else if (fps < 48) {
              this.fpsLabel.color = WARNING_COLOR;
            } else {
              this.fpsLabel.color = NORMAL_COLOR;
            }
          } // ? The draw calls is the number of draw calls in the scene
          // ? If draw calls is bigger than 15, it's not good

        }, {
          key: "updateDrawCalls",
          value: function updateDrawCalls() {
            var drawCount = this.getDrawCalls();
            this.updateDrawCallsColor(drawCount);
            this.drawCountLabel.string = "Draw Calls: ".concat(drawCount);
          }
        }, {
          key: "updateDrawCallsColor",
          value: function updateDrawCallsColor(drawCount) {
            // * Special case: on iOS, drawCount higher will be ok.
            // ! But! only good to use with AutoAtlas and disable DynamicAtlas, if not, it's not good
            // ? Double check: setupDynamicAtlas in SystemManager.ts
            var isIOS = sys.os === sys.OS.IOS;
            var dangerDrawCount = isIOS ? 80 : 25;
            var warningDrawCount = isIOS ? 60 : 15;

            if (drawCount > dangerDrawCount) {
              this.drawCountLabel.color = DANGER_COLOR;
            } else if (drawCount > warningDrawCount) {
              this.drawCountLabel.color = WARNING_COLOR;
            } else {
              this.drawCountLabel.color = NORMAL_COLOR;
            }
          }
        }, {
          key: "updateLogicTime",
          value: function updateLogicTime() {
            var logicTime = this.getLogicTime();
            this.updateLogicTimeColor(logicTime);
            this.logicTimeLabel.string = "Logic Time: ".concat(logicTime.toFixed(2), "ms");
          }
        }, {
          key: "updateLogicTimeColor",
          value: function updateLogicTimeColor(logicTime) {
            if (logicTime > 10) {
              this.logicTimeLabel.color = DANGER_COLOR;
            } else if (logicTime > 5) {
              this.logicTimeLabel.color = WARNING_COLOR;
            } else {
              this.logicTimeLabel.color = NORMAL_COLOR;
            }
          }
        }, {
          key: "updatePhysicTime",
          value: function updatePhysicTime() {
            var physicTime = this.getPhysicTime();
            this.updatePhysicTimeColor(physicTime);
            this.physicTimeLabel.string = "Physic Time: ".concat(physicTime.toFixed(2), "ms");
          }
        }, {
          key: "updatePhysicTimeColor",
          value: function updatePhysicTimeColor(physicTime) {
            if (physicTime > 10) {
              this.physicTimeLabel.color = DANGER_COLOR;
            } else if (physicTime > 5) {
              this.physicTimeLabel.color = WARNING_COLOR;
            } else {
              this.physicTimeLabel.color = NORMAL_COLOR;
            }
          }
        }, {
          key: "updateRenderTime",
          value: function updateRenderTime() {
            var renderTime = this.getRenderTime();
            this.updateRenderTimeColor(renderTime);
            this.renderTimeLabel.string = "Render Time: ".concat(renderTime.toFixed(2), "ms");
          }
        }, {
          key: "updateRenderTimeColor",
          value: function updateRenderTimeColor(renderTime) {
            if (renderTime > 10) {
              this.renderTimeLabel.color = DANGER_COLOR;
            } else if (renderTime > 5) {
              this.renderTimeLabel.color = WARNING_COLOR;
            } else {
              this.renderTimeLabel.color = NORMAL_COLOR;
            }
          } // ? The object memory usage is the memory used by the objects in the scene
          // ? If it's bigger than 40MB, it's not good

        }, {
          key: "updateObjectMemoryUsage",
          value: function updateObjectMemoryUsage() {
            var objectMemoryUsage = this.getObjectMemoryUsage();
            this.updateObjectMemoryUsageColor(objectMemoryUsage);
            this.objectMemoryUsageLabel.string = "Object Mem: ".concat(objectMemoryUsage.toFixed(2), "MB");
          }
        }, {
          key: "updateObjectMemoryUsageColor",
          value: function updateObjectMemoryUsageColor(objectMemoryUsage) {
            if (objectMemoryUsage > 40) {
              this.objectMemoryUsageLabel.color = DANGER_COLOR;
            } else if (objectMemoryUsage > 25) {
              this.objectMemoryUsageLabel.color = WARNING_COLOR;
            } else {
              this.objectMemoryUsageLabel.color = NORMAL_COLOR;
            }
          } // ? The texture memory usage is the memory used by the textures in the scene
          // ? If it's bigger than 50MB, it's not good

        }, {
          key: "updateTextureMemoryUsage",
          value: function updateTextureMemoryUsage() {
            var textureMemoryUsage = this.getTextureMemoryUsage();
            this.updateTextureMemoryUsageColor(textureMemoryUsage);
            this.textureMemoryUsageLabel.string = "Texture Mem: ".concat(textureMemoryUsage.toFixed(2), "MB");
          }
        }, {
          key: "updateTextureMemoryUsageColor",
          value: function updateTextureMemoryUsageColor(textureMemoryUsage) {
            if (textureMemoryUsage > 50) {
              this.textureMemoryUsageLabel.color = DANGER_COLOR;
            } else if (textureMemoryUsage > 35) {
              this.textureMemoryUsageLabel.color = WARNING_COLOR;
            } else {
              this.textureMemoryUsageLabel.color = NORMAL_COLOR;
            }
          } // Frames per second

        }, {
          key: "getFps",
          value: function getFps() {
            var counter = this.stats.fps.counter;
            return Math.floor(counter.value) || 0;
          }
        }, {
          key: "getDrawCalls",
          value: function getDrawCalls() {
            // Draw calls per frame
            // * Maybe minus a draw call by GameStats
            var counter = this.stats.draws.counter;
            return counter.value || 0;
          }
        }, {
          key: "getLogicTime",
          value: function getLogicTime() {
            // Time spent in logic in ms
            var counter = this.stats.logic.counter;
            return Math.floor(counter.value * 1000) / 1000 || 0;
          }
        }, {
          key: "getPhysicTime",
          value: function getPhysicTime() {
            // Time spent in physics in ms
            var counter = this.stats.physics.counter;
            return Math.floor(counter.value * 1000) / 1000 || 0;
          }
        }, {
          key: "getRenderTime",
          value: function getRenderTime() {
            // Time spent in rendering in ms
            var counter = this.stats.render.counter;
            return Math.floor(counter.value * 1000) / 1000 || 0;
          }
        }, {
          key: "getObjectMemoryUsage",
          value: function getObjectMemoryUsage() {
            // Memory used by objects in MB
            var counter = this.stats.bufferMemory.counter;
            return Math.floor(counter.value * 1000) / 1000 || 0;
          }
        }, {
          key: "getTextureMemoryUsage",
          value: function getTextureMemoryUsage() {
            // Memory used by textures in MB
            var counter = this.stats.textureMemory.counter;
            return Math.floor(counter.value * 1000) / 1000 || 0;
          }
        }]);

        return GameStats;
      }(Component), (_descriptor$8 = _applyDecoratedDescriptor(_class2$a.prototype, "fpsLabel", [_dec3$b], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$5 = _applyDecoratedDescriptor(_class2$a.prototype, "drawCountLabel", [_dec4$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$4 = _applyDecoratedDescriptor(_class2$a.prototype, "logicTimeLabel", [_dec5$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$1 = _applyDecoratedDescriptor(_class2$a.prototype, "physicTimeLabel", [_dec6$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$1 = _applyDecoratedDescriptor(_class2$a.prototype, "renderTimeLabel", [_dec7$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$1 = _applyDecoratedDescriptor(_class2$a.prototype, "objectMemoryUsageLabel", [_dec8$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7$1 = _applyDecoratedDescriptor(_class2$a.prototype, "textureMemoryUsageLabel", [_dec9$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$a)) || _class$j) || _class$j);

      cclegacy._RF.pop();

      var _dec$k, _dec2$f, _dec3$c, _dec4$5, _dec5$3, _dec6$2, _dec7$2, _dec8$2, _dec9$2, _dec10$1, _class$k, _class2$b, _descriptor$9, _descriptor2$6, _descriptor3$5, _descriptor4$2, _descriptor5$2, _descriptor6$2, _descriptor7$2, _descriptor8$1;

      cclegacy._RF.push({}, "aa4b0d0u0hLeqd3+/PQZ/QD", "SwitchButton", undefined);

      var ccclass$k = _decorator.ccclass,
          property$b = _decorator.property,
          requireComponent$8 = _decorator.requireComponent;
      var analytics = globalThis.game.analytics;
      var SwitchButton = (_dec$k = ccclass$k('SwitchButton'), _dec2$f = requireComponent$8([Button, Animation]), _dec3$c = property$b(CCBoolean), _dec4$5 = property$b(Node$1), _dec5$3 = property$b(Node$1), _dec6$2 = property$b(CCBoolean), _dec7$2 = property$b({
        visible: function visible() {
          return this.useSound;
        },
        type: SoundKeys
      }), _dec8$2 = property$b(CCBoolean), _dec9$2 = property$b({
        visible: function visible() {
          return this.useDesktopHover;
        },
        type: AnimationClip
      }), _dec10$1 = property$b({
        visible: function visible() {
          return this.useDesktopHover;
        },
        type: AnimationClip
      }), _dec$k(_class$k = _dec2$f(_class$k = (_class2$b = /*#__PURE__*/function (_Component) {
        _inherits(SwitchButton, _Component);

        var _super = _createSuper(SwitchButton);

        function SwitchButton() {
          var _this;

          _classCallCheck(this, SwitchButton);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "enable", _descriptor$9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeOn", _descriptor2$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeOff", _descriptor3$5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useSound", _descriptor4$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundKey", _descriptor5$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useDesktopHover", _descriptor6$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mouseEnterClip", _descriptor7$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mouseLeaveClip", _descriptor8$1, _assertThisInitialized(_this));

          _this.isMouseLeaved = false;

          _this.onMouseEnter = function (_event) {
            if (!_this.useDesktopHover) return;
            if (!_this.buttonComponent.interactable) return;
            _this.isMouseLeaved = false;

            _this.animationComponent.play(_this.mouseEnterClip.name);
          };

          _this.onMouseLeave = function (_event) {
            if (!_this.useDesktopHover) return;
            if (!_this.buttonComponent.interactable) return;
            if (_this.isMouseLeaved) return;
            _this.isMouseLeaved = true;

            _this.animationComponent.play(_this.mouseLeaveClip.name);
          };

          return _this;
        }

        _createClass(SwitchButton, [{
          key: "onLoad",
          value: function onLoad() {
            this.buttonComponent = this.getComponent(Button);
            this.animationComponent = this.getComponent(Animation);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.nodeOn) {
              throw new Error('SwitchButton: nodeOn not found');
            }

            if (!this.nodeOff) {
              throw new Error('SwitchButton: nodeOff not found');
            }

            var clips = this.animationComponent.clips.map(function (clip) {
              return clip === null || clip === void 0 ? void 0 : clip.name;
            }).filter(function (clip) {
              return clip !== null && clip !== undefined && typeof clip === 'string';
            });

            if (this.useDesktopHover) {
              if (!clips.includes(this.mouseEnterClip.name)) {
                this.animationComponent.addClip(this.mouseEnterClip);
              }

              if (!clips.includes(this.mouseLeaveClip.name)) {
                this.animationComponent.addClip(this.mouseLeaveClip);
              }
            }
          }
        }, {
          key: "onEnable",
          value: function onEnable() {
            //? Support for window
            this.node.on(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.on(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
          }
        }, {
          key: "onDisable",
          value: function onDisable() {
            //? Support for window
            this.node.off(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.off(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
          }
        }, {
          key: "switch",
          value: function _switch() {
            if (!this.node.active) return false; // TODO: handle event from component button

            analytics.event(GameCore.Plugins.Analytics.Events.BUTTON_CLICK, {
              switch_name: this.node.name,
              enable: !this.enable
            });

            if (this.useSound) {
              GeneralUtils.playSound(SoundKeysMapping[this.soundKey]);
            }

            return this.updateStatus(!this.enable);
          }
        }, {
          key: "setEnabled",
          value: function setEnabled(enable) {
            if (!this.node.active) return;
            this.updateStatus(enable);
          }
        }, {
          key: "updateStatus",
          value: function updateStatus(enable) {
            if (this.enable === enable) return enable;
            this.onMouseLeave(null);
            this.enable = enable;
            this.nodeOn.active = enable;
            this.nodeOff.active = !enable;
            return enable;
          }
        }]);

        return SwitchButton;
      }(Component), (_descriptor$9 = _applyDecoratedDescriptor(_class2$b.prototype, "enable", [_dec3$c], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2$6 = _applyDecoratedDescriptor(_class2$b.prototype, "nodeOn", [_dec4$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$5 = _applyDecoratedDescriptor(_class2$b.prototype, "nodeOff", [_dec5$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$2 = _applyDecoratedDescriptor(_class2$b.prototype, "useSound", [_dec6$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5$2 = _applyDecoratedDescriptor(_class2$b.prototype, "soundKey", [_dec7$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SoundKeys[CodeSoundKeys.BUTTON_CLICK];
        }
      }), _descriptor6$2 = _applyDecoratedDescriptor(_class2$b.prototype, "useDesktopHover", [_dec8$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor7$2 = _applyDecoratedDescriptor(_class2$b.prototype, "mouseEnterClip", [_dec9$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8$1 = _applyDecoratedDescriptor(_class2$b.prototype, "mouseLeaveClip", [_dec10$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$b)) || _class$k) || _class$k);

      cclegacy._RF.pop();

      var _dec$l, _dec2$g, _dec3$d, _dec4$6, _class$l, _class2$c, _descriptor$a, _descriptor2$7;

      cclegacy._RF.push({}, "3d28fQaHU5Lm4/Zyq/Jd2b6", "TapperedProgressBar", undefined);

      var ccclass$l = _decorator.ccclass,
          property$c = _decorator.property,
          executeInEditMode$2 = _decorator.executeInEditMode;
      var TapperedProgressBar = (_dec$l = ccclass$l('TapperedProgressBar'), _dec2$g = property$c({
        type: Sprite,
        displayName: 'Left Cap',
        tooltip: 'If assigned, will be displayed when progress is larger than 0%'
      }), _dec3$d = property$c({
        type: Sprite,
        displayName: 'Right Cap',
        tooltip: 'If assigned, will be displayed when progress is at 100%'
      }), _dec4$6 = property$c({
        range: [0, 1, 0.01],
        slide: true,
        tooltip: 'i18n:progress.progress',
        override: true
      }), _dec$l(_class$l = executeInEditMode$2(_class$l = (_class2$c = /*#__PURE__*/function (_ProgressBar) {
        _inherits(TapperedProgressBar, _ProgressBar);

        var _super = _createSuper(TapperedProgressBar);

        function TapperedProgressBar() {
          var _this;

          _classCallCheck(this, TapperedProgressBar);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "leftCap", _descriptor$a, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rightCap", _descriptor2$7, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(TapperedProgressBar, [{
          key: "progress",
          get:
          /**
           * @en
           * The current progress of the bar sprite. The valid value is between 0-1.
           *
           * @zh
           * 当前进度值，该数值的区间是 0-1 之间。
           */
          function get() {
            return _get(_getPrototypeOf(TapperedProgressBar.prototype), "progress", this);
          },
          set: function set(value) {
            _set(_getPrototypeOf(TapperedProgressBar.prototype), "progress", value, this, true);

            this.updateCap();
          }
        }, {
          key: "updateCap",
          value: function updateCap() {
            if (this.leftCap) {
              this.leftCap.enabled = this.progress > 0;
            }

            if (this.rightCap) {
              this.rightCap.enabled = this.progress > 0;
            }
          }
        }, {
          key: "start",
          value: function start() {
            this.updateCap();
          }
        }]);

        return TapperedProgressBar;
      }(ProgressBar), (_descriptor$a = _applyDecoratedDescriptor(_class2$c.prototype, "leftCap", [_dec2$g], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2$7 = _applyDecoratedDescriptor(_class2$c.prototype, "rightCap", [_dec3$d], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2$c.prototype, "progress", [_dec4$6], Object.getOwnPropertyDescriptor(_class2$c.prototype, "progress"), _class2$c.prototype)), _class2$c)) || _class$l) || _class$l);

      cclegacy._RF.pop();

      var _dec$m, _dec2$h, _dec3$e, _dec4$7, _dec5$4, _dec6$3, _class$m, _class2$d, _descriptor$b, _descriptor2$8;

      cclegacy._RF.push({}, "bce15LcVrxOfYMa9rbXN/qi", "Localize", undefined);

      var ccclass$m = _decorator.ccclass,
          property$d = _decorator.property,
          requireComponent$9 = _decorator.requireComponent,
          executeInEditMode$3 = _decorator.executeInEditMode,
          disallowMultiple$b = _decorator.disallowMultiple;
      var language$2 = globalThis.game.language;
      var Localize = (_dec$m = ccclass$m('Localize'), _dec2$h = requireComponent$9(Label), _dec3$e = executeInEditMode$3(true), _dec4$7 = property$d({
        visible: true
      }), _dec5$4 = property$d({
        group: {
          name: 'Fonts',
          id: 'fonts',
          displayOrder: 1
        },
        type: Font
      }), _dec6$3 = property$d({
        group: {
          name: 'Fonts',
          id: 'fonts',
          displayOrder: 2
        },
        type: Font
      }), _dec$m(_class$m = disallowMultiple$b(_class$m = _dec2$h(_class$m = _dec3$e(_class$m = (_class2$d = /*#__PURE__*/function (_Component) {
        _inherits(Localize, _Component);

        var _super = _createSuper(Localize);

        function Localize() {
          var _this;

          _classCallCheck(this, Localize);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "enFont", _descriptor$b, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ruFont", _descriptor2$8, _assertThisInitialized(_this));

          _this.handleLanguageChanged = function () {
            _this.updateTransToNode();
          };

          return _this;
        }

        _createClass(Localize, [{
          key: "key",
          get: function get() {
            return this._key;
          },
          set: function set(value) {
            if (!value) return;
            this._key = value;
            this.updateTransToNode();
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.label = this.getComponent(Label);
            this.validateRequiredComponents();
            this.updateTransToNode();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.label) {
              throw new Error('Label component is not found');
            }
          }
        }, {
          key: "start",
          value: function start() {
            this.listenEvent();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.node.scene.off('update-language', this.handleLanguageChanged);
          }
        }, {
          key: "listenEvent",
          value: function listenEvent() {
            this.node.scene.on('update-language', this.handleLanguageChanged);
          }
        }, {
          key: "updateTransToNode",
          value: function updateTransToNode() {
            if (!this.node.active) return;
            if (!this._key) return;

            try {
              var trans = language$2.getText(this._key); // ? Update font

              var font = this.getFontByLang();
              this.label.font = font;
              this.label.string = trans; // ? Emit event use for other components

              this.node.emit('update-trans', trans);
            } catch (error) {
              console.warn(error);
            }
          }
        }, {
          key: "getFontByLang",
          value: function getFontByLang() {
            if (!this.enFont || !this.ruFont) {
              throw new Error('Font is not found');
            }

            var locale = language$2.getCurrentLocale();

            switch (locale) {
              case 'en':
                return this.enFont;

              case 'ru':
                return this.ruFont;

              default:
                return this.enFont;
            }
          }
          /* public fontSize(size: number): number {
              // ? modSize is number modify for the font size, after update new font
              const modSize = this.getModSizeByLang()
               return size / modSize
          }
           private getModSizeByLang(): number {
              const locale = language.getCurrentLocale()
               switch (locale) {
                  case 'en':
                      return 1
                  case 'ru':
                      return 1.15
                  default:
                      return 1
              }
          } */

        }]);

        return Localize;
      }(Component), (_applyDecoratedDescriptor(_class2$d.prototype, "key", [_dec4$7], Object.getOwnPropertyDescriptor(_class2$d.prototype, "key"), _class2$d.prototype), _descriptor$b = _applyDecoratedDescriptor(_class2$d.prototype, "enFont", [_dec5$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2$8 = _applyDecoratedDescriptor(_class2$d.prototype, "ruFont", [_dec6$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2$d)) || _class$m) || _class$m) || _class$m) || _class$m);

      cclegacy._RF.pop();

      var _dec$n, _class$n;

      cclegacy._RF.push({}, "9b958Lf6PFClb/JuJfTLzxG", "Vibrate", undefined);

      var ccclass$n = _decorator.ccclass;
      var _GameCore$9 = GameCore,
          Utils$4 = _GameCore$9.Utils;
      var player$2 = globalThis.game.player;
      var Vibrate = (_dec$n = ccclass$n('Vibrate'), _dec$n(_class$n = /*#__PURE__*/function (_Component) {
        _inherits(Vibrate, _Component);

        var _super = _createSuper(Vibrate);

        function Vibrate() {
          _classCallCheck(this, Vibrate);

          return _super.apply(this, arguments);
        }

        _createClass(Vibrate, [{
          key: "vibrate",
          value: function vibrate(time) {
            if (!this.isVibrateEnable()) return;
            var isSuccess = Utils$4.Browser.vibrate(time);

            if (!isSuccess) {
              if ('performHapticFeedbackAsync' in GameSDK) {
                GameSDK.performHapticFeedbackAsync();
                return;
              }

              console.warn('Vibrate failed');
            }
          }
        }, {
          key: "isVibrateEnable",
          value: function isVibrateEnable() {
            return !!player$2.getPlayerSetting('vibrate');
          }
        }]);

        return Vibrate;
      }(Component)) || _class$n);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "68b8bf0Va5JT7NVPECDNC5l", "DashboardScreens", undefined);

      var DashboardScreens = /*#__PURE__*/function (DashboardScreens) {
        DashboardScreens[DashboardScreens["store"] = 0] = "store";
        DashboardScreens[DashboardScreens["collections"] = 1] = "collections";
        DashboardScreens[DashboardScreens["home"] = 2] = "home";
        DashboardScreens[DashboardScreens["lb"] = 3] = "lb";
        DashboardScreens[DashboardScreens["options"] = 4] = "options";
        return DashboardScreens;
      }(DashboardScreens || {});

      ccenum(DashboardScreens);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "ad867amogBFGJo9jp78EnQP", "DevTools", undefined);

      var Events$8 = /*#__PURE__*/function (Events) {
        Events["UNLOCK_DEV_TOOLS"] = "unlock-dev-tools";
        Events["TRIGGER_UNLOCK_KEY"] = "trigger-unlock-key";
        Events["TRIGGER_RESET_SEQUENCE"] = "trigger-reset-sequence";
        return Events;
      }(Events$8 || {});

      var DevTools = {
        Events: Events$8,
        UNLOCK_SEQUENCE: '101013012031'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "4b1196XW+RDyoXRLs7XEEoL", "LevelMissionKeys", undefined);

      var LevelMissionKeys = {
        CLEAR_ALL_TILES_3_MIN: 'Clear all tiles in 3 minutes'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "32598ObpVZK/pecmWIdcs+7", "SceneKeys", undefined); // ? Scene key mush match the scene name in the editor


      var SceneKeys = {
        LOAD_SCENE: 'LoadScene',
        GAME_SCENE: 'GameScene',
        DASHBOARD_SCENE: 'DashboardScene',
        COLLECTIONS_SCENE: 'CollectionsScene',
        TEST_SCENE: 'TestScene',
        DRAFT_SCENE: 'DraftScene',
        TEST_LAYOUT_SCENE: 'TestLayoutScene'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "ca922n1V0RLioEyUJg8hQXH", "GameEvents", undefined);

      var GameplayEvents = /*#__PURE__*/function (GameplayEvents) {
        GameplayEvents["NEXT_LEVEL"] = "next-level";
        GameplayEvents["START_OVER"] = "start-over";
        GameplayEvents["SELECT_LEVEL"] = "select-level";
        GameplayEvents["GAME_START"] = "game-start";
        GameplayEvents["GAME_PAUSE"] = "game-pause";
        GameplayEvents["GAME_RESUME"] = "game-resume";
        GameplayEvents["GAME_REPLAY"] = "game-replay";
        GameplayEvents["GAME_FINISH"] = "game-finish";
        GameplayEvents["USE_HINT_ITEM"] = "use-hint-item";
        GameplayEvents["USE_STORM_ITEM"] = "use-storm-item";
        GameplayEvents["USE_THUNDER_ITEM"] = "use-thunder-item";
        GameplayEvents["USE_PLIERS_ITEM"] = "use-pliers-item";
        GameplayEvents["SKIP_LEVEL"] = "skip-level";
        GameplayEvents["ADD_HINT_ITEMS"] = "add-hint-items";
        GameplayEvents["ADD_THUNDER_ITEMS"] = "add-thunder-items";
        GameplayEvents["ADD_STORM_ITEMS"] = "add-storm-items";
        GameplayEvents["ADD_PLIERS_ITEMS"] = "add-pliers-items";
        GameplayEvents["ADD_COINS"] = "add-coins";
        GameplayEvents["REMOVE_COINS"] = "remove-coins";
        GameplayEvents["REMOVE_COINS_SUCCESS"] = "remove-coins-success";
        GameplayEvents["REMOVE_COINS_FAILED"] = "remove-coins-failed";
        GameplayEvents["COIN_CHANGED"] = "coin-changed";
        GameplayEvents["TIME_OUT"] = "time-out";
        GameplayEvents["RESCUE_START"] = "rescue-time";
        GameplayEvents["RESCUE_FINISHED"] = "clock-animation-finished";
        GameplayEvents["LEVEL_THEME_LOADED"] = "level-theme-loaded";
        GameplayEvents["APPLY_GRAVITY"] = "apply-gravity";
        GameplayEvents["IDLE_ENTER"] = "idle-enter";
        GameplayEvents["IDLE_EXIT"] = "idle-exit";
        GameplayEvents["GRID_MATCH"] = "grid-match";
        GameplayEvents["TILE_CLICK"] = "tile-click";
        GameplayEvents["BOMB_EXPLODE"] = "bomb-explode";
        GameplayEvents["COMBO_UPDATED"] = "combo-updated";
        GameplayEvents["COMBO_ENDED"] = "combo-ended";
        return GameplayEvents;
      }(GameplayEvents || {});

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "6982dQ6p1FC4ZU9I+ctZKZv", "LevelData", undefined);

      var LevelData = [{
        level: 1,
        mode: 'normal',
        time: 900,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 1,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 6,
        theme: ['flower'],
        customFen: {
          code: '',
          portraitCode: ':t01t02t03t03t04:t05t06t05t07t08:t04t09i01t09t07:t10t02i01i01t06:t08t10i01i01t01',
          desktopCode: ':t01t02t03t03t04:t05t06t05t07t08:t04t09i01t09t07:t10t02i01i01t06:t08t10i01i01t01',
          rows: 5,
          columns: 5
        }
      }, {
        level: 2,
        mode: 'normal',
        time: 900,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cosmetic']
      }, {
        level: 3,
        mode: 'normal',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['ice-cream']
      }, {
        level: 4,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['sport']
      }, {
        level: 5,
        mode: 'normal',
        time: 90,
        colors: 9,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit']
      }, {
        level: 6,
        mode: 'push-left',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cakes']
      }, {
        level: 7,
        mode: 'normal',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['tool']
      }, {
        level: 8,
        mode: 'normal',
        time: 100,
        colors: 11,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 3,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['flower']
      }, {
        level: 9,
        mode: 'normal',
        time: 90,
        colors: 8,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 3,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['cosmetic']
      }, {
        level: 10,
        mode: 'push-right',
        time: 80,
        colors: 10,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 2,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cosmetic']
      }, {
        level: 11,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 3,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit']
      }, {
        level: 12,
        mode: 'normal',
        time: 90,
        colors: 8,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['ice-cream']
      }, {
        level: 13,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['flower']
      }, {
        level: 14,
        mode: 'normal',
        time: 80,
        colors: 7,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 3,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['sport']
      }, {
        level: 15,
        mode: 'fly-up-push-left',
        time: 80,
        colors: 10,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cosmetic']
      }, {
        level: 16,
        mode: 'normal',
        time: 90,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit']
      }, {
        level: 17,
        mode: 'normal',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cosmetic']
      }, {
        level: 18,
        mode: 'normal',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['cakes']
      }, {
        level: 19,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['ice-cream']
      }, {
        level: 20,
        mode: 'push-right',
        time: 90,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 4,
        rows: 8,
        theme: ['tool']
      }, {
        level: 21,
        mode: 'normal',
        time: 80,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 22,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 23,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 24,
        mode: 'normal',
        time: 80,
        colors: 9,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 25,
        mode: 'normal',
        time: 80,
        colors: 6,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 3
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 26,
        mode: 'fly-up-push-right',
        time: 90,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 27,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 28,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 29,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 30,
        mode: 'fly-up',
        time: 90,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 31,
        mode: 'normal',
        time: 80,
        colors: 9,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 32,
        mode: 'normal',
        time: 80,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 33,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 10,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 34,
        mode: 'fly-up-put-columns-middle',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 35,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 36,
        mode: 'fall-down',
        time: 90,
        colors: 10,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 37,
        mode: 'fall-down-push-right',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 38,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 39,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 9,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 40,
        mode: 'normal',
        time: 90,
        colors: 10,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 41,
        mode: 'normal',
        time: 80,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 42,
        mode: 'normal',
        time: 80,
        colors: 10,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 43,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 11,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 44,
        mode: 'fly-up-push-right',
        time: 80,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 45,
        mode: 'normal',
        time: 80,
        colors: 8,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 46,
        mode: 'normal',
        time: 90,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 3
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 47,
        mode: 'normal',
        time: 80,
        colors: 9,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 48,
        mode: 'normal',
        time: 80,
        colors: 10,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 4,
        rows: 6,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 49,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 9,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 50,
        mode: 'normal',
        time: 90,
        colors: 11,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 4,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'ice-cream']
      }, {
        level: 51,
        mode: 'push-right',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 52,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 53,
        mode: 'normal',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 54,
        mode: 'fly-up',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 55,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 56,
        mode: 'normal',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 57,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 58,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 59,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 60,
        mode: 'normal',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 61,
        mode: 'put-rows-middle',
        time: 160,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 62,
        mode: 'fly-up',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 63,
        mode: 'fall-down',
        time: 180,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 64,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 65,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 66,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 67,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 68,
        mode: 'fall-down',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 4
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 69,
        mode: 'fly-up',
        time: 160,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 70,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 71,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 72,
        mode: 'push-right',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 73,
        mode: 'normal',
        time: 160,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 74,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 75,
        mode: 'fall-down',
        time: 160,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 4
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 76,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 77,
        mode: 'normal',
        time: 160,
        colors: 26,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 78,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 79,
        mode: 'put-rows-middle',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 80,
        mode: 'fly-up-push-right',
        time: 180,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 81,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 82,
        mode: 'fall-down',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 83,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 84,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 85,
        mode: 'normal',
        time: 160,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 86,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 87,
        mode: 'normal',
        time: 130,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 88,
        mode: 'normal',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 89,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 90,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 91,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 92,
        mode: 'fall-down',
        time: 160,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 93,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 94,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 95,
        mode: 'put-columns-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 96,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 97,
        mode: 'fly-up',
        time: 180,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 98,
        mode: 'normal',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 99,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 100,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 101,
        mode: 'put-columns-middle',
        time: 180,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 102,
        mode: 'fall-down-put-columns-middle',
        time: 180,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 103,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 104,
        mode: 'put-columns-middle',
        time: 180,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 105,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 106,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 107,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 108,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 109,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 110,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 111,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 112,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 113,
        mode: 'normal',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 114,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 115,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 116,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 117,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 118,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 119,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 120,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 121,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 122,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 123,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 124,
        mode: 'fly-up',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 125,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 126,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 127,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 128,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 129,
        mode: 'normal',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 130,
        mode: 'fall-down',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 131,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 132,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 133,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 134,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 135,
        mode: 'fly-up',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 136,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 137,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 138,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 139,
        mode: 'push-left',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 140,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 141,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 142,
        mode: 'push-right',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 143,
        mode: 'fly-up',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 144,
        mode: 'push-left',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 145,
        mode: 'normal',
        time: 180,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 146,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 147,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 148,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 149,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 150,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 151,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 152,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 153,
        mode: 'fly-up',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 154,
        mode: 'normal',
        time: 180,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 155,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 156,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 157,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 158,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 159,
        mode: 'normal',
        time: 160,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 160,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 161,
        mode: 'normal',
        time: 100,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 162,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 163,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 164,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 165,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 166,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 167,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 168,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 169,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 21,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 170,
        mode: 'push-right',
        time: 180,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 171,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 172,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 173,
        mode: 'push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 174,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 175,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 176,
        mode: 'normal',
        time: 160,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 177,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 178,
        mode: 'push-right',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 179,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 180,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 181,
        mode: 'normal',
        time: 180,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 182,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 183,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 184,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 185,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 186,
        mode: 'fly-up',
        time: 160,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 187,
        mode: 'push-right',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 188,
        mode: 'fly-up-push-right',
        time: 180,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 189,
        mode: 'push-left',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 190,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 191,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 192,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 193,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 194,
        mode: 'push-left',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 195,
        mode: 'fly-up',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 196,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 197,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 198,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 199,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 200,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 201,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 202,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 203,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 204,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 205,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 206,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 207,
        mode: 'put-rows-middle',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 208,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 209,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 210,
        mode: 'push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 211,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 212,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 213,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 214,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 215,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 216,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 217,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 218,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 219,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 220,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 221,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 222,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 223,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 224,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 225,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 226,
        mode: 'fly-up',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 227,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 228,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 229,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 230,
        mode: 'fall-down',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 231,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 232,
        mode: 'push-right',
        time: 130,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 233,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 234,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 235,
        mode: 'normal',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 236,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 237,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 238,
        mode: 'normal',
        time: 160,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 239,
        mode: 'push-right',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 240,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 241,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 242,
        mode: 'fall-down',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 243,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 244,
        mode: 'normal',
        time: 160,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 245,
        mode: 'fall-down',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 246,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 247,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 248,
        mode: 'normal',
        time: 160,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 249,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 250,
        mode: 'put-rows-middle',
        time: 100,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 251,
        mode: 'normal',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 252,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 253,
        mode: 'fly-up',
        time: 180,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 254,
        mode: 'push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 255,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 256,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 257,
        mode: 'put-rows-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 258,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 259,
        mode: 'put-rows-middle',
        time: 130,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 260,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 261,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 262,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 263,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 264,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 265,
        mode: 'normal',
        time: 180,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 266,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 267,
        mode: 'normal',
        time: 180,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 268,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 269,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 270,
        mode: 'normal',
        time: 180,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 271,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 272,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 273,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 274,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 275,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 276,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 277,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 278,
        mode: 'fall-down-put-columns-middle',
        time: 180,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 279,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 280,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 281,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 282,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 283,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 284,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 285,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 286,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 287,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 288,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 289,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 290,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 291,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 292,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 293,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 294,
        mode: 'put-rows-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 295,
        mode: 'fly-up',
        time: 160,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 296,
        mode: 'put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 297,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 298,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 299,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 300,
        mode: 'put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 301,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 302,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 303,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 304,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 305,
        mode: 'fall-down',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 306,
        mode: 'push-right',
        time: 160,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 307,
        mode: 'fall-down',
        time: 130,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 308,
        mode: 'normal',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 309,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 310,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 311,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 312,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 313,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 314,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 315,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 316,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 317,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 318,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 319,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 320,
        mode: 'fly-up-push-left',
        time: 160,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 321,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 322,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 323,
        mode: 'push-left',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 324,
        mode: 'push-right',
        time: 130,
        colors: 21,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 325,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 326,
        mode: 'put-rows-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 327,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 328,
        mode: 'push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 329,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 330,
        mode: 'push-right',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 331,
        mode: 'push-right',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 332,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 333,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 334,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 335,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 336,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 337,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 338,
        mode: 'fall-down',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 339,
        mode: 'push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 340,
        mode: 'normal',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 341,
        mode: 'push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 342,
        mode: 'normal',
        time: 180,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 343,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 344,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 345,
        mode: 'put-columns-middle',
        time: 160,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 346,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 347,
        mode: 'normal',
        time: 160,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 348,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 349,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 350,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 351,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 352,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 353,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 354,
        mode: 'put-rows-middle',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 355,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 356,
        mode: 'fly-up',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 357,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 358,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 359,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 360,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 361,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 362,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 363,
        mode: 'fall-down',
        time: 180,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 364,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 365,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 366,
        mode: 'normal',
        time: 130,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 367,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 368,
        mode: 'push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 369,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 370,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 371,
        mode: 'normal',
        time: 160,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 372,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 373,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 374,
        mode: 'push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 375,
        mode: 'push-right',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 376,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 377,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 378,
        mode: 'put-columns-middle',
        time: 160,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 379,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 380,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 381,
        mode: 'fly-up-push-left',
        time: 180,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 382,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 383,
        mode: 'fly-up',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 384,
        mode: 'fall-down',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 385,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 386,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 387,
        mode: 'fall-down',
        time: 180,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 388,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 389,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 390,
        mode: 'fly-up-put-columns-middle',
        time: 180,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 391,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 392,
        mode: 'normal',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 393,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 394,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 395,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 396,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 397,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 398,
        mode: 'push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 399,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 400,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 401,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 402,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 403,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 404,
        mode: 'normal',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 405,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 406,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 407,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 408,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 409,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 410,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 411,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 412,
        mode: 'fall-down',
        time: 160,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 413,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 414,
        mode: 'fly-up',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 415,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 416,
        mode: 'push-right',
        time: 160,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 417,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 418,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 419,
        mode: 'push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 420,
        mode: 'put-columns-middle',
        time: 130,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 421,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 422,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 423,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 424,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 425,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 426,
        mode: 'fall-down',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 427,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 428,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 429,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 430,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 431,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 432,
        mode: 'put-rows-middle',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 433,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 434,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 435,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 436,
        mode: 'push-right',
        time: 160,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 437,
        mode: 'fall-down-push-right',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 438,
        mode: 'put-columns-middle',
        time: 130,
        colors: 27,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 439,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 440,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 441,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 442,
        mode: 'push-right',
        time: 160,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 443,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 444,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 445,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 446,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 447,
        mode: 'fall-down-push-left',
        time: 180,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 448,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 449,
        mode: 'put-columns-middle',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 450,
        mode: 'push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 451,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 452,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 453,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 454,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 455,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 456,
        mode: 'push-right',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 457,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 458,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 459,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 460,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 461,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 462,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 463,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 464,
        mode: 'put-rows-middle',
        time: 100,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 465,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 466,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 467,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 468,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 469,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 470,
        mode: 'normal',
        time: 160,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 471,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 472,
        mode: 'fall-down',
        time: 160,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 473,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 474,
        mode: 'push-right',
        time: 130,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 475,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 476,
        mode: 'fall-down-push-left',
        time: 180,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 477,
        mode: 'fall-down',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 478,
        mode: 'push-right',
        time: 180,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 479,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 480,
        mode: 'normal',
        time: 160,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 481,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 482,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 483,
        mode: 'put-columns-middle',
        time: 130,
        colors: 24,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 484,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 485,
        mode: 'fall-down-put-columns-middle',
        time: 180,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 486,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 487,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 488,
        mode: 'fall-down-push-right',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 489,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 490,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 491,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 492,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 493,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 494,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 495,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 496,
        mode: 'normal',
        time: 180,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 497,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 498,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 499,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 500,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 501,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 502,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 503,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 504,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 505,
        mode: 'push-right',
        time: 160,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 506,
        mode: 'fly-up',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 507,
        mode: 'push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 508,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 509,
        mode: 'push-right',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 510,
        mode: 'put-rows-middle',
        time: 160,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 511,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 512,
        mode: 'push-right',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 513,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 514,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 515,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 516,
        mode: 'push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 517,
        mode: 'push-left',
        time: 180,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 518,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 519,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 520,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 521,
        mode: 'push-right',
        time: 130,
        colors: 22,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 522,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 523,
        mode: 'normal',
        time: 130,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 524,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 525,
        mode: 'fall-down',
        time: 160,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 526,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 527,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 528,
        mode: 'normal',
        time: 160,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 529,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 530,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 531,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 532,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 533,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 534,
        mode: 'normal',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 535,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 536,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 537,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 538,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 539,
        mode: 'normal',
        time: 130,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 540,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 541,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 542,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 543,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 544,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 545,
        mode: 'put-rows-middle',
        time: 100,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 546,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 547,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 548,
        mode: 'fly-up',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 549,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 550,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 551,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 552,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 553,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 554,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 555,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 556,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 557,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 558,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 559,
        mode: 'put-rows-middle',
        time: 160,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 560,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 561,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 562,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 563,
        mode: 'put-columns-middle',
        time: 130,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 564,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 565,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 566,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 567,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 568,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 569,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 570,
        mode: 'fall-down-push-right',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 571,
        mode: 'normal',
        time: 180,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 572,
        mode: 'normal',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 573,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 574,
        mode: 'put-columns-middle',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 575,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 576,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 577,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 578,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 579,
        mode: 'push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 580,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 581,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 582,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 583,
        mode: 'put-columns-middle',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 584,
        mode: 'fly-up',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 585,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 586,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 587,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 588,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 589,
        mode: 'put-rows-middle',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 590,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 591,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 592,
        mode: 'fly-up',
        time: 160,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 593,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 594,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 595,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 596,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 597,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 598,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 599,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 600,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 601,
        mode: 'fall-down',
        time: 160,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 602,
        mode: 'put-columns-middle',
        time: 160,
        colors: 27,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 603,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 604,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 605,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 606,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 607,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 608,
        mode: 'fall-down-push-left',
        time: 180,
        colors: 24,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 609,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 610,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 611,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 612,
        mode: 'put-rows-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 613,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 614,
        mode: 'normal',
        time: 180,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 615,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 616,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 617,
        mode: 'put-rows-middle',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 618,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 619,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 620,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 621,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 622,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 623,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 624,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 625,
        mode: 'fly-up-push-left',
        time: 180,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 626,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 627,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 628,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 629,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 630,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 631,
        mode: 'push-left',
        time: 100,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 632,
        mode: 'normal',
        time: 180,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 633,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 634,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 635,
        mode: 'fall-down',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 636,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 637,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 638,
        mode: 'put-columns-middle',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 639,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 640,
        mode: 'put-columns-middle',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 641,
        mode: 'put-columns-middle',
        time: 100,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 642,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 643,
        mode: 'fly-up',
        time: 130,
        colors: 21,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 644,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 645,
        mode: 'fall-down',
        time: 100,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 646,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 647,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 648,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 649,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 650,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 651,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 652,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 653,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 654,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 655,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 656,
        mode: 'fall-down',
        time: 180,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 657,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 658,
        mode: 'push-right',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 659,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 660,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 661,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 662,
        mode: 'push-left',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 663,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 664,
        mode: 'fly-up',
        time: 160,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 665,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 666,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 667,
        mode: 'put-columns-middle',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 668,
        mode: 'normal',
        time: 160,
        colors: 24,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 669,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 670,
        mode: 'put-rows-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 671,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 672,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 673,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 674,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 675,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 676,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 677,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 678,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 679,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 680,
        mode: 'fly-up-push-left',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 681,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 682,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 683,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 684,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 685,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 686,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 687,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 688,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 689,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 690,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 691,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 692,
        mode: 'normal',
        time: 160,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 693,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 694,
        mode: 'push-left',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 695,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 696,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 697,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 698,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 699,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 700,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 701,
        mode: 'normal',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 702,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 703,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 704,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 705,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 706,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 707,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 708,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 709,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 710,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 711,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 712,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 713,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 714,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 715,
        mode: 'push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 716,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 717,
        mode: 'fly-up',
        time: 160,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 718,
        mode: 'put-columns-middle',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 719,
        mode: 'push-right',
        time: 100,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 720,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 721,
        mode: 'push-right',
        time: 180,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 722,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 723,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 724,
        mode: 'push-left',
        time: 160,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 725,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 726,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 727,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 728,
        mode: 'normal',
        time: 130,
        colors: 26,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 729,
        mode: 'fall-down',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 730,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 731,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 732,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 733,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 734,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 735,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 736,
        mode: 'normal',
        time: 180,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 737,
        mode: 'fly-up',
        time: 160,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 738,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 739,
        mode: 'normal',
        time: 160,
        colors: 13,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 740,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 741,
        mode: 'normal',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 742,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 743,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 744,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 745,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 746,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 747,
        mode: 'fall-down-put-columns-middle',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 748,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 749,
        mode: 'normal',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 750,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 751,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 752,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 753,
        mode: 'normal',
        time: 130,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 754,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 755,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 756,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 757,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 758,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 759,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 760,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 761,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 762,
        mode: 'normal',
        time: 160,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 763,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 764,
        mode: 'fly-up',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 765,
        mode: 'fly-up-push-left',
        time: 180,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 766,
        mode: 'push-right',
        time: 180,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 767,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 768,
        mode: 'put-rows-middle',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 769,
        mode: 'normal',
        time: 180,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 770,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 771,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 772,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 773,
        mode: 'put-rows-middle',
        time: 160,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 774,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 775,
        mode: 'put-columns-middle',
        time: 160,
        colors: 24,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 776,
        mode: 'normal',
        time: 160,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 777,
        mode: 'push-right',
        time: 160,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 778,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 779,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 18,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 780,
        mode: 'normal',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 781,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 782,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 783,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 784,
        mode: 'normal',
        time: 100,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 785,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 786,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 787,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 788,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 789,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 790,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 791,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 792,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 793,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 794,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 795,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 796,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 797,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 798,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 799,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 800,
        mode: 'push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 801,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 802,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 803,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 804,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 805,
        mode: 'fly-up-push-left',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 806,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 807,
        mode: 'normal',
        time: 160,
        colors: 24,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 808,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 809,
        mode: 'push-right',
        time: 130,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 810,
        mode: 'fly-up-push-left',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 811,
        mode: 'fly-up',
        time: 130,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 812,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 813,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 814,
        mode: 'normal',
        time: 160,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 815,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 816,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 817,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 818,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 819,
        mode: 'normal',
        time: 160,
        colors: 26,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 820,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 821,
        mode: 'put-columns-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 822,
        mode: 'push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 823,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 824,
        mode: 'fly-up',
        time: 100,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 825,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 826,
        mode: 'push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 827,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 828,
        mode: 'normal',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 829,
        mode: 'fly-up',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 830,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 831,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 832,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 833,
        mode: 'normal',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 834,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 835,
        mode: 'push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 836,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 837,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 838,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 839,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 840,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 841,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 842,
        mode: 'put-rows-middle',
        time: 100,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 843,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 844,
        mode: 'fly-up-push-right',
        time: 130,
        colors: 23,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 845,
        mode: 'normal',
        time: 130,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 846,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 847,
        mode: 'normal',
        time: 100,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 848,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 849,
        mode: 'push-right',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 850,
        mode: 'normal',
        time: 160,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 851,
        mode: 'put-rows-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 852,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 853,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 854,
        mode: 'put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 855,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 856,
        mode: 'normal',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 857,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 858,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 859,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 860,
        mode: 'normal',
        time: 180,
        colors: 19,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 861,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 862,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 863,
        mode: 'fall-down',
        time: 160,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 864,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 865,
        mode: 'fall-down',
        time: 160,
        colors: 21,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 866,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 867,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 868,
        mode: 'normal',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 869,
        mode: 'normal',
        time: 180,
        colors: 25,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 870,
        mode: 'normal',
        time: 100,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 871,
        mode: 'normal',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 872,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 873,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 874,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 875,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 876,
        mode: 'normal',
        time: 180,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 877,
        mode: 'normal',
        time: 160,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 878,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 879,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 880,
        mode: 'fly-up',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 881,
        mode: 'normal',
        time: 160,
        colors: 25,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 882,
        mode: 'normal',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 883,
        mode: 'normal',
        time: 180,
        colors: 24,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 884,
        mode: 'normal',
        time: 180,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 885,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 886,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 887,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 888,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 889,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 890,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 891,
        mode: 'fly-up-push-right',
        time: 160,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 892,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 893,
        mode: 'normal',
        time: 160,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 894,
        mode: 'fall-down',
        time: 180,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 895,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 896,
        mode: 'normal',
        time: 160,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 897,
        mode: 'put-rows-middle',
        time: 160,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 898,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 899,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 900,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 901,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 902,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 903,
        mode: 'normal',
        time: 160,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 904,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 905,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 906,
        mode: 'normal',
        time: 130,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 907,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 908,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 909,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 910,
        mode: 'push-left',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 911,
        mode: 'put-columns-middle',
        time: 130,
        colors: 16,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 912,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 913,
        mode: 'normal',
        time: 100,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 914,
        mode: 'fall-down',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 915,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 916,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 917,
        mode: 'fall-down-push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 918,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 919,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 25,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 920,
        mode: 'put-rows-middle',
        time: 100,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 921,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 922,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 923,
        mode: 'normal',
        time: 160,
        colors: 16,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 924,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 925,
        mode: 'normal',
        time: 130,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 926,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 927,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 928,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 929,
        mode: 'fall-down-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 930,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 931,
        mode: 'fly-up',
        time: 130,
        colors: 24,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 932,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 933,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 934,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 935,
        mode: 'fall-down-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 936,
        mode: 'put-rows-middle',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 937,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 938,
        mode: 'normal',
        time: 130,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 939,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 940,
        mode: 'normal',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 941,
        mode: 'normal',
        time: 180,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 942,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 8
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 943,
        mode: 'normal',
        time: 160,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 944,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 945,
        mode: 'put-rows-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 946,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 947,
        mode: 'normal',
        time: 130,
        colors: 24,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 948,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 949,
        mode: 'put-rows-middle',
        time: 130,
        colors: 28,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 950,
        mode: 'normal',
        time: 130,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 951,
        mode: 'normal',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 952,
        mode: 'fall-down',
        time: 130,
        colors: 14,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 953,
        mode: 'fly-up-put-columns-middle',
        time: 130,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 954,
        mode: 'put-columns-middle',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 955,
        mode: 'fly-up',
        time: 160,
        colors: 24,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 8
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 956,
        mode: 'normal',
        time: 130,
        colors: 19,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 957,
        mode: 'fall-down',
        time: 160,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 958,
        mode: 'fly-up-push-left',
        time: 160,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 959,
        mode: 'put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 960,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 961,
        mode: 'fly-up-push-right',
        time: 180,
        colors: 23,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 962,
        mode: 'normal',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 963,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 4,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 964,
        mode: 'normal',
        time: 100,
        colors: 16,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 965,
        mode: 'fall-down-push-left',
        time: 130,
        colors: 21,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 966,
        mode: 'normal',
        time: 180,
        colors: 23,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 12,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 967,
        mode: 'normal',
        time: 160,
        colors: 26,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 968,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 969,
        mode: 'normal',
        time: 130,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 970,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 971,
        mode: 'normal',
        time: 130,
        colors: 17,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 972,
        mode: 'fall-down',
        time: 130,
        colors: 17,
        specials: {
          bomb: 1,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 973,
        mode: 'put-columns-middle',
        time: 130,
        colors: 27,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 974,
        mode: 'fall-down',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 975,
        mode: 'fly-up',
        time: 100,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 976,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 12,
        specials: {
          bomb: 1,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 977,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 978,
        mode: 'fly-up-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 979,
        mode: 'fall-down-push-right',
        time: 160,
        colors: 12,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 980,
        mode: 'push-left',
        time: 160,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 981,
        mode: 'normal',
        time: 160,
        colors: 15,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 982,
        mode: 'normal',
        time: 130,
        colors: 14,
        specials: {
          bomb: 1,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 983,
        mode: 'fly-up-push-right',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 984,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 28,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 985,
        mode: 'fly-up',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 986,
        mode: 'normal',
        time: 130,
        colors: 18,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 987,
        mode: 'fall-down-put-columns-middle',
        time: 160,
        colors: 22,
        specials: {
          bomb: 0,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 988,
        mode: 'fly-up-push-left',
        time: 130,
        colors: 13,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 989,
        mode: 'normal',
        time: 130,
        colors: 13,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 990,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 991,
        mode: 'fly-up',
        time: 100,
        colors: 12,
        specials: {
          bomb: 2,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 992,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 993,
        mode: 'put-columns-middle',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 6,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 994,
        mode: 'fly-up-push-left',
        time: 100,
        colors: 20,
        specials: {
          bomb: 1,
          rocket: 0
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 995,
        mode: 'normal',
        time: 100,
        colors: 18,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 0
        },
        columns: 6,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 996,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 5,
          addRandomTilesPerMove: 8
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 997,
        mode: 'normal',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 998,
        mode: 'fly-up-put-columns-middle',
        time: 160,
        colors: 15,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 4
        },
        columns: 5,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 999,
        mode: 'fall-down-put-columns-middle',
        time: 100,
        colors: 20,
        specials: {
          bomb: 0,
          rocket: 3
        },
        rules: {
          maxSpaceOfPair: 7,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 1000,
        mode: 'normal',
        time: 160,
        colors: 23,
        specials: {
          bomb: 2,
          rocket: 1
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 7,
        rows: 10,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }, {
        level: 1001,
        mode: 'normal',
        time: 100,
        colors: 19,
        specials: {
          bomb: 0,
          rocket: 2
        },
        rules: {
          maxSpaceOfPair: 8,
          addRandomTilesPerMove: 0
        },
        columns: 5,
        rows: 8,
        theme: ['fruit', 'flower', 'tool', 'sport', 'cakes', 'cosmetic', 'cosmetic']
      }];

      cclegacy._RF.pop();

      var _dec$o, _class$o;

      cclegacy._RF.push({}, "44b50YkamZDD5fO9vdZKeG7", "InputController", undefined);

      var ccclass$o = _decorator.ccclass;
      var InputController = (_dec$o = ccclass$o('InputController'), _dec$o(_class$o = /*#__PURE__*/function (_Component) {
        _inherits(InputController, _Component);

        var _super = _createSuper(InputController);

        function InputController() {
          var _this;

          _classCallCheck(this, InputController);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.pointerDownOutSideCanvas = false;

          _this.handleElementPointerDown = function () {
            _this.pointerDownOutSideCanvas = true;
          };

          _this.handleElementPointerUp = function (_ev) {
            console.log(_this.pointerDownOutSideCanvas);
            _this.pointerDownOutSideCanvas = false;
          };

          return _this;
        }

        _createClass(InputController, [{
          key: "onLoad",
          value: function onLoad() {
            this.listenInputEvents();
          }
        }, {
          key: "listenInputEvents",
          value: function listenInputEvents() {
            if (sys.os === sys.OS.WINDOWS || sys.os === sys.OS.OSX) {
              document.addEventListener('pointerup', this.handleElementPointerUp);
              document.addEventListener('pointerdown', this.handleElementPointerDown);
            }
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            if (sys.os === sys.OS.WINDOWS || sys.os === sys.OS.OSX) {
              document.removeEventListener('pointerup', this.handleElementPointerUp);
              document.removeEventListener('pointerdown', this.handleElementPointerDown);
            }
          }
        }]);

        return InputController;
      }(Component)) || _class$o);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "7f144HjLfBLWbFvbRFCCt8e", "Directions", undefined);

      var Direction = {
        Up: {
          x: 0,
          y: 1
        },
        Down: {
          x: 0,
          y: -1
        },
        Left: {
          x: -1,
          y: 0
        },
        Right: {
          x: 1,
          y: 0
        }
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "bca1aX0Zd1KdonFgO+DBfzw", "GridEvents", undefined);

      var GridEvents = {
        IDLE_ENTER: 'idle-enter',
        IDLE_EXIT: 'idle-exit',
        TILE_SELECT: 'tile-select',
        MATCH: 'match',
        MATCH_FAIL: 'match-fail',
        MATCH_SUCCESS: 'match-success',
        CREATE: 'create',
        CLEAR: 'clear',
        CLEAR_ALL: 'clear-all',
        SHUFFLE: 'shuffle',
        SHUFFLE_COMPLETE: 'shuffle-complete',
        GRAVITY: 'gravity',
        GRAVITY_COMPLETE: 'gravity-complete'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "805dbJxaCpKBpzq9ejSgrc8", "TileType", undefined);

      var TileTypes = {
        NORMAL: 'normal',
        BOMB: 'bomb',
        ROCKET: 'rocket'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "361eckT3VBO5ZFyetePNmNY", "LevelGravity", undefined);

      var LevelGravity = {
        FallDown: 'fall-down',
        FlyUp: 'fly-up',
        PushLeft: 'push-left',
        PushRight: 'push-right',
        PutColumnMiddle: 'put-column-middle',
        PutRowMiddle: 'put-row-middle'
      };

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "d2a57+mB4NG9rcdh+dy1VPe", "traverse4", undefined);
      /**
       * Iterates over a 2D grid in a straight line.
       * @param from The coordinate to start from. Inclusive.
       * @param direction The direction to increment by.
       * @param steps The number of steps to take. If <= 0, will iterate once yielding the starting coordinate.
       */


      function traverse4(from, direction) {
        var steps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return function* () {
          if (steps < 0) {
            yield from;
            return;
          }

          var x = from.x;
          var y = from.y;

          while (steps >= 0) {
            yield {
              x: x,
              y: y
            };
            x += direction.x;
            y += direction.y;
            steps -= 1;
          }
        }();
      }

      cclegacy._RF.pop();

      var _SimpleGravityMap;

      cclegacy._RF.push({}, "1cacdLV/fpLaopw0WJdeBD4", "applyGravity", undefined);

      var SimpleGravityMap = (_SimpleGravityMap = {}, _defineProperty(_SimpleGravityMap, LevelGravity.FallDown, Direction.Down), _defineProperty(_SimpleGravityMap, LevelGravity.FlyUp, Direction.Up), _defineProperty(_SimpleGravityMap, LevelGravity.PushLeft, Direction.Left), _defineProperty(_SimpleGravityMap, LevelGravity.PushRight, Direction.Right), _SimpleGravityMap);
      /**
       * Applies gravity to the grid by moving all the tiles in the given direction
       * @param grid The grid that will be affected by gravity
       * @param direction The direction of gravity
       * @returns A promise that resolves when the tiles have finished syncing. The promise resolves to true if gravity was applied, false otherwise
       */

      function applyGravity(grid, direction) {
        if (direction in SimpleGravityMap) {
          return applyDirectionalGravity({
            grid: grid,
            minRow: 0,
            maxRow: grid.gridH - 1,
            minCol: 0,
            maxCol: grid.gridW - 1,
            direction: SimpleGravityMap[direction]
          });
        }

        if (direction === LevelGravity.PutColumnMiddle) {
          return new Promise(function (resolve) {
            Promise.all([applyDirectionalGravity({
              grid: grid,
              minRow: 0,
              maxRow: grid.gridH - 1,
              minCol: 0,
              maxCol: Math.floor(grid.gridW / 2) - 1,
              direction: Direction.Right
            }), applyDirectionalGravity({
              grid: grid,
              minRow: 0,
              maxRow: grid.gridH - 1,
              minCol: Math.floor(grid.gridW / 2),
              maxCol: grid.gridW - 1,
              direction: Direction.Left
            })]).then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  left = _ref2[0],
                  right = _ref2[1];

              resolve([].concat(_toConsumableArray(left), _toConsumableArray(right)));
            });
          });
        }

        if (direction === LevelGravity.PutRowMiddle) {
          return new Promise(function (resolve) {
            Promise.all([applyDirectionalGravity({
              grid: grid,
              minRow: 0,
              maxRow: Math.floor(grid.gridH / 2) - 1,
              minCol: 0,
              maxCol: grid.gridW - 1,
              direction: Direction.Up
            }), applyDirectionalGravity({
              grid: grid,
              minRow: Math.floor(grid.gridH / 2),
              maxRow: grid.gridH - 1,
              minCol: 0,
              maxCol: grid.gridW - 1,
              direction: Direction.Down
            })]).then(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                  up = _ref4[0],
                  down = _ref4[1];

              resolve([].concat(_toConsumableArray(up), _toConsumableArray(down)));
            });
          });
        }

        throw new Error("Invalid level gravity: ".concat(direction));
      }
      /**
       * Parse a string into level modes by extracting the words and matching them to the LevelMode enum. Using string's search()
       * @param text
       */


      function parseLevelGravity(text) {
        // ex 'fall-down-put-columns-middle' gets converted into ['fall-down', 'put-columns-middle']
        var words = text.split('-');
        var levelModes = [];
        var i = 0;

        while (i < words.length) {
          var word = words[i];

          switch (word) {
            case 'normal':
              i += 1;
              break;

            case 'fall':
              levelModes.push(LevelGravity.FallDown);
              i += 2;
              break;

            case 'fly':
              levelModes.push(LevelGravity.FlyUp);
              i += 2;
              break;

            case 'push':
              if (words[i + 1] === 'left') {
                levelModes.push(LevelGravity.PushLeft);
                i += 2;
              } else {
                levelModes.push(LevelGravity.PushRight);
                i += 2;
              }

              break;

            case 'put':
              if (words[i + 1] === 'columns') {
                levelModes.push(LevelGravity.PutColumnMiddle);
                i += 3;
              } else {
                levelModes.push(LevelGravity.PutRowMiddle);
                i += 3;
              }

              break;
          }
        }

        return levelModes;
      }

      function applyDirectionalGravity(_x) {
        return _applyDirectionalGravity.apply(this, arguments);
      }

      function _applyDirectionalGravity() {
        _applyDirectionalGravity = _asyncToGenerator(function* (config) {
          var affectedTiles = [];
          var grid = config.grid,
              minRow = config.minRow,
              maxRow = config.maxRow,
              minCol = config.minCol,
              maxCol = config.maxCol,
              direction = config.direction;
          var width = maxCol - minCol + 1;
          var height = maxRow - minRow + 1;
          var incrementX = Direction.Left === direction ? Direction.Right : Direction.Left;
          var incrementY = Direction.Down === direction ? Direction.Up : Direction.Down;
          var startingCol = Direction.Left === direction ? minCol : maxCol;
          var startingRow = Direction.Down === direction ? minRow : maxRow;
          var rowIt = traverse4({
            x: startingCol,
            y: startingRow
          }, incrementY, height - 1);
          var rowGen = rowIt.next();

          while (!rowGen.done) {
            var row = rowGen.value.y;
            var colIt = traverse4({
              x: startingCol,
              y: row
            }, incrementX, width - 1);
            var colGen = colIt.next();

            while (!colGen.done) {
              var col = colGen.value.x; // Move the tile in the specified direction

              var newRow = row + direction.y;
              var newCol = col + direction.x; // Keep moving the tile until it reaches an empty space or the edge of the grid

              while (newRow >= minRow && newRow <= maxRow && newCol >= minCol && newCol <= maxCol) {
                var currTile = grid.getTileAt(newCol, newRow);
                var emptyTile = grid.getTileAt(newCol - direction.x, newRow - direction.y);

                if (!currTile || !emptyTile) {
                  throw new Error('Tile or empty tile is undefined');
                }

                if (!currTile.isTraversable() || emptyTile.isTraversable()) {
                  break;
                } // Swap the tile with the empty space


                grid.swapTilesImmediate(currTile, emptyTile);
                affectedTiles.push(currTile);
                newRow += direction.y;
                newCol += direction.x;
              }

              colGen = colIt.next();
            }

            rowGen = rowIt.next();
          }

          yield grid.syncTiles();
          return affectedTiles;
        });
        return _applyDirectionalGravity.apply(this, arguments);
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "ca614iJ+X5LrL1rX/wDQDTD", "shuffle", undefined); // Create a shallow copy of the original array to avoid modifying the original.


      function shuffleArray(array) {
        var shuffledArray = _toConsumableArray(array);

        for (var i = shuffledArray.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var _ref = [shuffledArray[j], shuffledArray[i]];
          shuffledArray[i] = _ref[0];
          shuffledArray[j] = _ref[1];
        }

        return shuffledArray;
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "1faa9NgJrBE7p8Zs/HBWrZn", "pad", undefined);
      /**
       * Place a string inside a string of padding characters.
       * @param pad The placeholder for the string to sit in.
       * @param str The string to pad. This string will be truncated if it is longer than the padding string.
       * @param padLeft Whether to pad the left side of the string or the right side.
       * @returns
       */


      function pad(pad, str, padLeft) {
        if (typeof str === 'undefined') return pad;

        if (padLeft) {
          return (pad + str).slice(-pad.length);
        } else {
          return (str + pad).substring(0, pad.length);
        }
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "4691cOjpHtA3Llma/CP7RPx", "Base", undefined);

      var BaseState = /*#__PURE__*/_createClass(function BaseState() {
        _classCallCheck(this, BaseState);
      });

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "9fa9eOx9ihAuLfce8/ySuaN", "SpecialState", undefined);

      var SpecialState = /*#__PURE__*/function (_BaseState) {
        _inherits(SpecialState, _BaseState);

        var _super = _createSuper(SpecialState);

        function SpecialState(tile) {
          var _this;

          _classCallCheck(this, SpecialState);

          _this = _super.call(this);
          _this.tile = tile;
          return _this;
        }

        _createClass(SpecialState, [{
          key: "accept",
          value: function accept(other) {
            return this.tile.id === other.id;
          }
        }, {
          key: "update",
          value: function update(_dt) {// do nothing
          }
        }]);

        return SpecialState;
      }(BaseState);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "9ce897pH/RLRpMUc34BEe0u", "BasicState", undefined);

      var BasicState = /*#__PURE__*/function (_SpecialState) {
        _inherits(BasicState, _SpecialState);

        var _super = _createSuper(BasicState);

        function BasicState() {
          _classCallCheck(this, BasicState);

          return _super.apply(this, arguments);
        }

        _createClass(BasicState, [{
          key: "getType",
          value: function getType() {
            return TileTypes.NORMAL;
          }
        }, {
          key: "onEnter",
          value: function onEnter() {// do nothing
          }
        }, {
          key: "update",
          value: function update(_dt) {// do nothing
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }, {
          key: "clear",
          value: function clear(_self) {
            // do nothing
            return Promise.resolve([]);
          }
        }]);

        return BasicState;
      }(SpecialState);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "c008bw+Iw5EeIGWxEt8MlLw", "BombState", undefined);

      var BombState = /*#__PURE__*/function (_SpecialState) {
        _inherits(BombState, _SpecialState);

        var _super = _createSuper(BombState);

        function BombState(tile, duration) {
          var _this;

          _classCallCheck(this, BombState);

          _this = _super.call(this, tile);
          _this.duration = duration;
          _this.remaining = duration;
          _this.isCountingDown = false;
          return _this;
        }

        _createClass(BombState, [{
          key: "getType",
          value: function getType() {
            return TileTypes.BOMB;
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            this.tile.bombComponent.node.active = true;
            this.tile.node.scene.on(GameplayEvents.TILE_CLICK, this.startCountDown, this);
            this.tile.node.scene.on(GameplayEvents.USE_HINT_ITEM, this.startCountDown, this);
            this.tile.node.scene.on(GameplayEvents.USE_STORM_ITEM, this.startCountDown, this);
            this.tile.node.scene.on(GameplayEvents.USE_THUNDER_ITEM, this.startCountDown, this);
            this.tile.node.scene.on(GameplayEvents.USE_PLIERS_ITEM, this.startCountDown, this);
            this.tile.node.scene.on(GameplayEvents.GAME_RESUME, this.resumeCountDown, this);
            this.tile.node.scene.on(GameplayEvents.GAME_PAUSE, this.pauseCountDown, this);
            this.tile.node.scene.on(GameplayEvents.TIME_OUT, this.pauseCountDown, this);
          }
        }, {
          key: "update",
          value: function update(dt) {
            if (this.isCountingDown) {
              this.remaining = this.remaining - dt;
              this.tile.bombComponent.fillRange = -this.remaining / this.duration;

              if (this.remaining <= 0) {
                this.detonate();
              }
            }
          }
        }, {
          key: "onExit",
          value: function onExit() {
            this.tile.bombComponent.node.active = false;
            this.isCountingDown = false;
            this.remaining = this.duration;
          }
        }, {
          key: "clear",
          value: function clear(_self) {
            this.tile.bombComponent.node.active = false;
            return Promise.resolve([]);
          }
        }, {
          key: "startCountDown",
          value: function startCountDown() {
            this.isCountingDown = true;
          }
        }, {
          key: "resumeCountDown",
          value: function resumeCountDown() {
            if (this.remaining == this.duration) return;
            this.isCountingDown = true;
          }
        }, {
          key: "pauseCountDown",
          value: function pauseCountDown() {
            this.isCountingDown = false;
          }
        }, {
          key: "detonate",
          value: function detonate() {
            var _this2 = this;

            GeneralUtils.playSound(CodeSoundKeys.BOMB_EXPLODE_1);
            this.isCountingDown = false;
            this.tile.bombComponent.node.active = false;
            return new Promise(function (resolve) {
              Promise.all([_this2.tile.node.scene.emit(GameplayEvents.BOMB_EXPLODE, _this2.tile), _this2.tile.setEmpty()]).then(function () {
                resolve();
              });
            });
          }
        }]);

        return BombState;
      }(SpecialState);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "40dcaayD/VGuaFA3DGUxOCF", "StateMachine", undefined);

      var StateMachine = /*#__PURE__*/function () {
        function StateMachine() {
          _classCallCheck(this, StateMachine);
        }

        _createClass(StateMachine, [{
          key: "updateState",
          value: function updateState(newState) {
            if (!this.currentState) return;
            this.currentState.onExit();
            this.previousState = this.currentState;
            this.currentState = newState;
            this.currentState.onEnter();
          }
        }, {
          key: "getCurrentState",
          value: function getCurrentState() {
            return this.currentState;
          }
        }, {
          key: "getPreviousState",
          value: function getPreviousState() {
            return this.previousState;
          }
        }]);

        return StateMachine;
      }();

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "4a32bQ2oDBJZ42hbMCtolXt", "SpecialStateMachine", undefined);

      var SpecialStateMachine = /*#__PURE__*/function (_StateMachine) {
        _inherits(SpecialStateMachine, _StateMachine);

        var _super = _createSuper(SpecialStateMachine);

        function SpecialStateMachine(tile) {
          var _this;

          _classCallCheck(this, SpecialStateMachine);

          _this = _super.call(this);
          _this.currentState = new BasicState(tile);
          return _this;
        }

        _createClass(SpecialStateMachine, [{
          key: "accept",
          value: function accept(other) {
            return this.currentState.accept(other);
          }
        }, {
          key: "tile",
          get: function get() {
            return this.currentState.tile;
          },
          set: function set(value) {
            this.currentState.tile = value;
          }
        }, {
          key: "clear",
          value: function clear(other) {
            return this.currentState.clear(other);
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            return this.currentState.onEnter();
          }
        }, {
          key: "update",
          value: function update(dt) {
            return this.currentState.update(dt);
          }
        }, {
          key: "onExit",
          value: function onExit() {
            return this.currentState.onExit();
          }
        }, {
          key: "getType",
          value: function getType() {
            return this.currentState.getType();
          }
        }]);

        return SpecialStateMachine;
      }(StateMachine);

      cclegacy._RF.pop();

      var _dec$p, _dec2$i, _dec3$f, _dec4$8, _dec5$5, _dec6$4, _dec7$3, _dec8$3, _dec9$3, _dec10$2, _dec11$1, _dec12$1, _class$p, _class2$e, _descriptor$c, _descriptor2$9, _descriptor3$6, _descriptor4$3, _descriptor5$3, _descriptor6$3, _descriptor7$3, _descriptor8$2, _descriptor9$1;

      cclegacy._RF.push({}, "b61b7HjrDJJeLlCUnpfKYB1", "Tile", undefined);

      var ccclass$p = _decorator.ccclass,
          property$e = _decorator.property,
          requireComponent$a = _decorator.requireComponent;
      var Tile = (_dec$p = ccclass$p('Tile'), _dec2$i = requireComponent$a([UITransform]), _dec3$f = requireComponent$a([UIOpacity]), _dec4$8 = property$e(Sprite), _dec5$5 = property$e(Sprite), _dec6$4 = property$e(Node$1), _dec7$3 = property$e({
        type: UITransform,
        displayName: "Background's UI Transform"
      }), _dec8$3 = property$e({
        type: UIOpacity,
        displayName: 'This UI Opacity'
      }), _dec9$3 = property$e(UIOpacity), _dec10$2 = property$e(Button), _dec11$1 = property$e({
        type: AnimationClip,
        group: 'Break FX',
        displayName: 'Break clip'
      }), _dec12$1 = property$e({
        type: AnimationClip,
        group: 'Clear FX',
        displayName: 'Clear clip'
      }), _dec$p(_class$p = _dec2$i(_class$p = _dec3$f(_class$p = (_class2$e = /*#__PURE__*/function (_Component) {
        _inherits(Tile, _Component);

        var _super = _createSuper(Tile);

        function Tile() {
          var _this;

          _classCallCheck(this, Tile);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "icon", _descriptor$c, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bombComponent", _descriptor2$9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background", _descriptor3$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgUITransform", _descriptor4$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiOpacity", _descriptor5$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shineOpacity", _descriptor6$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "button", _descriptor7$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "breakClip", _descriptor8$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clearClip", _descriptor9$1, _assertThisInitialized(_this));

          _this.id = null;
          _this.special = new SpecialStateMachine(_assertThisInitialized(_this));
          _this.isEmpty = false;
          _this.isSynced = true;
          _this.coord = new Vec2();
          return _this;
        }

        _createClass(Tile, [{
          key: "buttonComponent",
          get: function get() {
            return this.button;
          }
        }, {
          key: "isDirty",
          value: function isDirty() {
            return !this.isSynced;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.animationComponent = this.getComponent(Animation);
          }
        }, {
          key: "start",
          value: function start() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.icon) {
              throw new Error('An icon component must be assigned to the tile');
            }

            if (!this.bombComponent) {
              throw new Error('A bomb component must be assigned to the tile');
            }

            if (!this.background) {
              throw new Error('A background component must be assigned to the tile');
            }

            if (!this.bgUITransform) {
              throw new Error('A background UI transform component must be assigned to the tile');
            }

            if (!this.uiOpacity) {
              throw new Error('A UI opacity component must be assigned to the tile');
            }

            if (!this.shineOpacity) {
              throw new Error('A shine opacity component must be assigned to the tile');
            }

            if (!this.animationComponent) {
              throw new Error('An animation component must be assigned to the tile');
            }

            if (!this.button) {
              throw new Error('A button component must be assigned to the tile');
            }

            var clips = this.animationComponent.clips.map(function (clip) {
              return clip === null || clip === void 0 ? void 0 : clip.name;
            }).filter(function (clip) {
              return clip !== null && clip !== undefined && typeof clip === 'string';
            });

            if (!clips.includes(this.breakClip.name)) {
              this.animationComponent.addClip(this.breakClip);
            }
          }
        }, {
          key: "update",
          value: function update(dt) {
            this.special.update(dt);
          }
        }, {
          key: "getCoord",
          value: function getCoord() {
            return this.coord;
          }
        }, {
          key: "setCoord",
          value: function setCoord(x, y) {
            var isSynced = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            this.coord.set(x, y);

            if (!isSynced) {
              this.isSynced = false;
            }
          }
        }, {
          key: "isSame",
          value: function isSame(tile) {
            return this.special.accept(tile) && tile.special.accept(this);
          }
        }, {
          key: "isTraversable",
          value: function isTraversable() {
            return this.isEmpty;
          }
        }, {
          key: "getSize",
          value: function getSize() {
            return [this.bgUITransform.width, this.bgUITransform.height];
          }
        }, {
          key: "onClick",
          value: function onClick() {
            this.node.scene.emit(GameplayEvents.TILE_CLICK, this); // GameManager.Instance.stateMachine.playing()
            // GameManager.Instance.grid.emitTileDown(this)
          }
        }, {
          key: "setIdentity",
          value: function setIdentity(frame) {
            this.id = frame;
            this.icon.spriteFrame = frame; //? fit icon into 60% Tile

            var fillRatio = 0.7;

            var _this$getSize = this.getSize(),
                _this$getSize2 = _slicedToArray(_this$getSize, 2),
                tileWidth = _this$getSize2[0],
                tileHeight = _this$getSize2[1];

            var _frame$originalSize = frame.originalSize,
                iconW = _frame$originalSize.width,
                iconH = _frame$originalSize.height;
            var scale = Math.max(iconW / (tileWidth * fillRatio), iconH / (tileHeight * fillRatio));

            if (scale > 1) {
              this.icon.node.setScale(new Vec3(1 / scale, 1 / scale, 1));
            }
          }
        }, {
          key: "setSpecialType",
          value: function setSpecialType() {
            var specialType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TileTypes.NORMAL;

            switch (specialType) {
              case TileTypes.NORMAL:
                this.special.updateState(new BasicState(this));
                break;

              case TileTypes.BOMB:
                this.special.updateState(new BombState(this, 90));
                break;

              case TileTypes.ROCKET:
                this.special.updateState(new BasicState(this));
                break;

              default:
                throw new Error('Invalid special type');
            }
          }
        }, {
          key: "setFocused",
          value: function setFocused(focused) {
            tween(this.shineOpacity).to(0.2, {
              opacity: focused ? 255 : 0
            }, {
              easing: 'quadIn'
            }).start();
            this.shineOpacity.node.scale = focused ? Vec3.ZERO : Vec3.ONE;
            tween(this.shineOpacity.node).to(0.2, {
              scale: focused ? Vec3.ONE : Vec3.ZERO
            }, {
              easing: 'quadOut'
            }).start();
          }
        }, {
          key: "setHint",
          value: function setHint(_hinting) {// this.animController.setValue('isHinting', hinting)
          }
        }, {
          key: "setEmpty",
          value: function () {
            var _setEmpty = _asyncToGenerator(function* (other) {
              var quietly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              var clearFx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'clear';

              if (this.isEmpty) {
                return [];
              }

              if (quietly) {
                this.isEmpty = true;
                this.uiOpacity.opacity = 0;
                this.special.updateState(new BasicState(this));
                return [];
              }

              this.isEmpty = true;

              if (clearFx === 'clear') {
                yield this.runAnimation(this.clearClip.name);
              } else {
                yield this.runAnimation(this.breakClip.name);
              }

              var pairs = yield this.special.clear(other);
              this.special.updateState(new BasicState(this));
              return pairs;
            });

            function setEmpty(_x) {
              return _setEmpty.apply(this, arguments);
            }

            return setEmpty;
          }()
        }, {
          key: "restore",
          value: function restore(id) {
            var _this2 = this;

            this.isEmpty = false;

            if (id) {
              this.setIdentity(id);
            }

            this.uiOpacity.opacity = 255;
            this.node.setScale(new Vec3(0, 0, 0));
            return new Promise(function (resolve) {
              tween(_this2.node).to(0.3, {
                scale: new Vec3(1, 1, 1)
              }, {
                easing: 'backOut',
                onComplete: function onComplete() {
                  resolve();
                }
              }).start();
            });
          }
        }, {
          key: "sync",
          value: function sync(config) {
            var _config$stagger,
                _config$duration,
                _config$easing,
                _this3 = this;

            if (this.isSynced && !config.ignoreDirtyStatus) {
              return Promise.resolve();
            }

            var newPosition = this.getTilePosition(config);
            var delay = (_config$stagger = config.stagger) !== null && _config$stagger !== void 0 ? _config$stagger : 0;
            var duration = (_config$duration = config.duration) !== null && _config$duration !== void 0 ? _config$duration : 0.3;
            var easing = (_config$easing = config.easing) !== null && _config$easing !== void 0 ? _config$easing : 'cubicOut';
            return new Promise(function (resolve) {
              // tween to new position
              tween(_this3.node).delay(delay).to(duration, {
                position: newPosition
              }, {
                easing: easing
              }).call(function () {
                resolve();
                _this3.isSynced = true;
              }).start();
            });
          }
        }, {
          key: "pad",
          value: function pad(config) {
            var _config$stagger2,
                _config$duration2,
                _config$easing2,
                _this4 = this;

            var newPosition = this.getTilePosition(config);
            var delay = (_config$stagger2 = config.stagger) !== null && _config$stagger2 !== void 0 ? _config$stagger2 : 0;
            var duration = (_config$duration2 = config.duration) !== null && _config$duration2 !== void 0 ? _config$duration2 : 0.3;
            var easing = (_config$easing2 = config.easing) !== null && _config$easing2 !== void 0 ? _config$easing2 : 'cubicOut';
            return new Promise(function (resolve) {
              // tween to new position
              tween(_this4.node).call(function () {
                _this4.isSynced = false;
              }).delay(delay).to(duration, {
                position: newPosition
              }, {
                easing: easing
              }).call(function () {
                resolve();
              }).start();
            });
          }
        }, {
          key: "serialize",
          value: function serialize() {
            return {
              coord: {
                x: this.coord.x,
                y: this.coord.y
              },
              specialType: this.special.getType()
            };
          }
        }, {
          key: "deserialize",
          value: function deserialize(json) {
            this.setCoord(json.coord.x, json.coord.y);
            this.setSpecialType(json.specialType);
          }
        }, {
          key: "runAnimation",
          value: function runAnimation(name) {
            var _this5 = this;

            this.animationComponent.play(name);
            return new Promise(function (resolve) {
              _this5.animationComponent.once(Animation.EventType.FINISHED, function () {
                resolve();
              });
            });
          }
        }, {
          key: "fly",
          value: function () {
            var _fly = _asyncToGenerator(function* (config) {
              var _this6 = this;

              var MAX_HEIGHT = 300;
              var distanceToCenter = Math.sqrt(Math.pow(this.node.position.x, 2) + Math.pow(this.node.position.y, 2));
              var height = Math.max(MAX_HEIGHT - distanceToCenter * 0.7, 0);
              var delay = distanceToCenter / 1000;
              var curPosition = this.node.position.clone();
              var newPosition = this.getTilePosition(config);
              var spriteNode = this.background; // const shadowNode = this.node.getChildByName('Shadow')!

              var shakeAmount = 2;
              var duration = height * 0.0025;
              var initOrbitSpeed = 1; //? PI/s

              var initSelfOrbitSpeed = 360; //? degree/s

              var phase1Duration = duration;
              var phase2StartAngle = 0;
              var phase2CenterPos = new Vec3(0, 0, 0);
              var phase2Duration = 0.75 - phase1Duration;
              var tweenObject = {
                value: 0,
                prevElapsed: 0
              };
              var t = tween(tweenObject);
              t.call(function () {
                _this6.isSynced = false;
              });
              t.delay(delay);
              t.to(0.5, {
                value: 0
              }, {
                progress: function progress(_start, _end, current, ratio) {
                  shakeAmount *= -1;
                  var deltaShake = shakeAmount * ratio;
                  var newPos = curPosition.clone();
                  newPos.x += deltaShake;

                  _this6.node.setPosition(newPos);

                  return current;
                }
              });
              t.to(phase1Duration, {
                value: 1
              }, {
                progress: function progress(_start, _end, current, ratio) {
                  var expoRatio = AnimUtils.easeOutExpo(ratio);
                  var deltaTime = phase1Duration * ratio - tweenObject.prevElapsed;
                  var elapsedTime = phase1Duration * ratio; //? tween height

                  var newH = height * expoRatio;

                  _this6.setHeight(newH, MAX_HEIGHT); //? tween position


                  var currentPos = _this6.node.position.clone();

                  initOrbitSpeed += 0.1;
                  Vec3.rotateZ(currentPos, currentPos, new Vec3(0, 0, 0), initOrbitSpeed * Math.PI * deltaTime);

                  _this6.node.setPosition(new Vec3(currentPos.x, currentPos.y, currentPos.z)); //? tween angle


                  initSelfOrbitSpeed += 10;
                  var addAngle = initSelfOrbitSpeed * deltaTime;
                  spriteNode.angle += addAngle; // shadowNode.angle += addAngle

                  tweenObject.prevElapsed = elapsedTime;
                  return current;
                }
              });
              t.call(function () {
                phase2CenterPos.set((_this6.node.position.x + newPosition.x) / 2, (_this6.node.position.y + newPosition.y) / 2, 0);
                tweenObject.prevElapsed = 0; //? transform angle to negative value for easy tween

                spriteNode.angle %= 360;
                spriteNode.angle -= 360; // shadowNode.angle %= 360
                // shadowNode.angle -= 360

                phase2StartAngle = spriteNode.angle;
              });
              t.to(phase2Duration, {
                value: 0
              }, {
                progress: function progress(_start, _end, current, ratio) {
                  var deltaTime = phase2Duration * ratio - tweenObject.prevElapsed;
                  var elapsedTime = phase2Duration * ratio; //? tween height

                  var newH = height * (1 - ratio);

                  _this6.setHeight(newH, MAX_HEIGHT); //? tween position


                  var currentPos = _this6.node.position.clone();

                  Vec3.rotateZ(currentPos, currentPos, phase2CenterPos, Math.PI / phase2Duration * deltaTime);

                  _this6.node.setPosition(new Vec3(currentPos.x, currentPos.y, currentPos.z)); //? tween angle


                  spriteNode.angle += -phase2StartAngle / phase2Duration * deltaTime; // shadowNode.angle += (-phase2StartAngle / phase2Duration) * deltaTime

                  tweenObject.prevElapsed = elapsedTime;
                  return current;
                }
              });
              t.call(function () {
                _this6.node.setPosition(newPosition);

                _this6.setHeight(0, MAX_HEIGHT);

                spriteNode.angle = 0; // shadowNode.angle = 0
              });
              return AnimUtils.runTweenAsync(t);
            });

            function fly(_x2) {
              return _fly.apply(this, arguments);
            }

            return fly;
          }()
        }, {
          key: "setHeight",
          value: function setHeight(height, maxHeight) {
            var spriteNode = this.background; // const shadowNode = this.node.getChildByName('Shadow')!

            spriteNode.setPosition(new Vec3(spriteNode.position.x, height, 0)); // shadowNode.setPosition(new Vec3(shadowNode.position.x, -4 - height / 10, 0))
            //? max: 0.3 (height), min: 0 (height 0)

            spriteNode.setScale(new Vec3(1 + height / maxHeight * 0.3, 1 + height / maxHeight * 0.3, 1));
          }
        }, {
          key: "getTilePosition",
          value: function getTilePosition(config) {
            var tileSize = config.tileSize,
                gridW = config.gridW,
                gridH = config.gridH,
                _config$padding = config.padding,
                padding = _config$padding === void 0 ? 0 : _config$padding;

            var _this$getCoord = this.getCoord(),
                x = _this$getCoord.x,
                y = _this$getCoord.y;

            return new Vec3(tileSize[0] * (x - (gridW - 1) / 2) + padding * (x - gridW / 2), tileSize[1] * (y - (gridH - 1) / 2) + padding * (y - gridH / 2), this.node.position.z);
          }
        }, {
          key: "getSpecialType",
          value: function getSpecialType() {
            return this.special.getType();
          }
        }]);

        return Tile;
      }(Component), (_descriptor$c = _applyDecoratedDescriptor(_class2$e.prototype, "icon", [_dec4$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$9 = _applyDecoratedDescriptor(_class2$e.prototype, "bombComponent", [_dec5$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$6 = _applyDecoratedDescriptor(_class2$e.prototype, "background", [_dec6$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$3 = _applyDecoratedDescriptor(_class2$e.prototype, "bgUITransform", [_dec7$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$3 = _applyDecoratedDescriptor(_class2$e.prototype, "uiOpacity", [_dec8$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$3 = _applyDecoratedDescriptor(_class2$e.prototype, "shineOpacity", [_dec9$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7$3 = _applyDecoratedDescriptor(_class2$e.prototype, "button", [_dec10$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8$2 = _applyDecoratedDescriptor(_class2$e.prototype, "breakClip", [_dec11$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9$1 = _applyDecoratedDescriptor(_class2$e.prototype, "clearClip", [_dec12$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$e)) || _class$p) || _class$p) || _class$p);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "5d9fazkXFhPVplYhElq8sN0", "GridMachine", undefined);

      var GridMachineEvent = {
        STATE_CHANGE: 'CHANGE_STATE',
        STATE_ENTER: 'ENTER_STATE',
        STATE_EXIT: 'EXIT_STATE'
      };

      var GridMachine = /*#__PURE__*/function (_StateMachine) {
        _inherits(GridMachine, _StateMachine);

        var _super = _createSuper(GridMachine);

        function GridMachine(initial) {
          var _this;

          _classCallCheck(this, GridMachine);

          _this = _super.call(this);
          _this.currentState = initial;
          _this.previousState = initial;
          initial.setMachine(_assertThisInitialized(_this));
          return _this;
        }

        _createClass(GridMachine, [{
          key: "updateState",
          value: function updateState(newState) {
            var curr = this.currentState;
            this.currentState.grid.node.emit(GridMachineEvent.STATE_EXIT, this.currentState);
            newState.setMachine(this);

            _get(_getPrototypeOf(GridMachine.prototype), "updateState", this).call(this, newState);

            this.currentState.grid.node.emit(GridMachineEvent.STATE_CHANGE, curr, newState);
            this.currentState.grid.node.emit(GridMachineEvent.STATE_ENTER, newState);
          }
        }, {
          key: "emitTileDown",
          value: function emitTileDown(tile) {
            this.currentState.emitTileDown(tile);
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return this.currentState.awaitingInput();
          }
        }]);

        return GridMachine;
      }(StateMachine);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "4a6efWW2kZPkLjcjsWt3bsd", "State", undefined);

      var State = /*#__PURE__*/function (_BaseState) {
        _inherits(State, _BaseState);

        var _super = _createSuper(State);

        function State(grid) {
          var _this;

          _classCallCheck(this, State);

          _this = _super.call(this);
          _this.grid = grid;
          _this.machine = null;
          return _this;
        }

        _createClass(State, [{
          key: "setMachine",
          value: function setMachine(machine) {
            this.machine = machine;
          }
        }]);

        return State;
      }(BaseState);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "cd0d548/WxD7KCyW2hwySVO", "traverseSpiralIn", undefined);
      /**
       * Iterator to iterate through a grid in a spiral from the outside in
       * @param width the width of the grid
       * @param height the height of the grid
       * @yields [x, y] coordinates of the grid, row first
       */


      function* spiralTraversal(width, height) {
        var startRow = 0;
        var endRow = width - 1;
        var startCol = 0;
        var endCol = height - 1;

        while (startRow <= endRow && startCol <= endCol) {
          // top row
          for (var i = startRow; i <= endRow; i++) {
            yield {
              x: i,
              y: startCol
            };
          }

          startCol++; // right col

          for (var _i = startCol; _i <= endCol; _i++) {
            yield {
              x: endRow,
              y: _i
            };
          }

          endRow--; // bottom row

          for (var _i2 = endRow; _i2 >= startRow; _i2--) {
            yield {
              x: _i2,
              y: endCol
            };
          }

          endCol--; // left col

          for (var _i3 = endCol; _i3 >= startCol; _i3--) {
            yield {
              x: startRow,
              y: _i3
            };
          }

          startRow++;
        }
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "81ab6xt4P1LhoOmVyfJEM/I", "getValidPath", undefined);

      var PaddingTile = /*#__PURE__*/function () {
        function PaddingTile(x, y) {
          _classCallCheck(this, PaddingTile);

          this.coord = new Vec2(x, y);
        }

        _createClass(PaddingTile, [{
          key: "getCoord",
          value: function getCoord() {
            return this.coord;
          }
        }, {
          key: "setCoord",
          value: function setCoord(x, y) {
            this.coord.set(x, y);
          }
        }, {
          key: "isTraversable",
          value: function isTraversable() {
            return true;
          }
        }]);

        return PaddingTile;
      }();

      function getValidPath(grid, tile1, tile2) {
        var startCoord = tile1.getCoord().clone().add2f(1, 1);
        var endCoord = tile2.getCoord().clone().add2f(1, 1);
        var nodeGrid = grid.getTileGrid().map(function (row) {
          return row.map(function (tile) {
            return tile;
          });
        });
        var matrix = pad2DArray(nodeGrid);
        var exceptionTiles = [tile1, tile2];

        if (startCoord.x === endCoord.x && checkLineX(matrix, exceptionTiles, startCoord.y, endCoord.y, startCoord.x) || startCoord.y === endCoord.y && checkLineY(matrix, exceptionTiles, startCoord.x, endCoord.x, startCoord.y)) {
          return pathOffset([{
            a: startCoord,
            b: endCoord
          }], {
            x: -1,
            y: -1
          });
        } // Check in a rectangle with x-axis or y-axis


        var t;
        var pMinY = startCoord.y <= endCoord.y ? startCoord : endCoord;
        var pMaxY = startCoord.y <= endCoord.y ? endCoord : startCoord;
        var pMinX = startCoord.x <= endCoord.x ? startCoord : endCoord;
        var pMaxX = startCoord.x <= endCoord.x ? endCoord : startCoord;
        var moreLinePath = [];
        var rectPath = []; // Check more right or more left

        if ((t = checkMoreLineX(matrix, exceptionTiles, 1, pMinY, pMaxY)) !== -1 || (t = checkMoreLineX(matrix, exceptionTiles, -1, pMinY, pMaxY)) !== -1) {
          moreLinePath = [{
            a: startCoord,
            b: {
              x: startCoord.x,
              y: t
            }
          }, {
            a: {
              x: startCoord.x,
              y: t
            },
            b: {
              x: endCoord.x,
              y: t
            }
          }, {
            a: {
              x: endCoord.x,
              y: t
            },
            b: endCoord
          }];
        } // Check more down or more up


        if ((t = checkMoreLineY(matrix, exceptionTiles, 1, pMinX, pMaxX)) !== -1 || (t = checkMoreLineY(matrix, exceptionTiles, -1, pMinX, pMaxX)) !== -1) {
          moreLinePath = [{
            a: startCoord,
            b: {
              x: t,
              y: startCoord.y
            }
          }, {
            a: {
              x: t,
              y: startCoord.y
            },
            b: {
              x: t,
              y: endCoord.y
            }
          }, {
            a: {
              x: t,
              y: endCoord.y
            },
            b: endCoord
          }];
        } // Check in a rectangle with x-axis and y-axis


        if ((t = checkRectX(matrix, exceptionTiles, pMinY, pMaxY)) !== -1) {
          rectPath = [{
            a: startCoord,
            b: {
              x: startCoord.x,
              y: t
            }
          }, {
            a: {
              x: startCoord.x,
              y: t
            },
            b: {
              x: endCoord.x,
              y: t
            }
          }, {
            a: {
              x: endCoord.x,
              y: t
            },
            b: endCoord
          }];
        } else if ((t = checkRectY(matrix, exceptionTiles, pMinX, pMaxX)) !== -1) {
          rectPath = [{
            a: startCoord,
            b: {
              x: t,
              y: startCoord.y
            }
          }, {
            a: {
              x: t,
              y: startCoord.y
            },
            b: {
              x: t,
              y: endCoord.y
            }
          }, {
            a: {
              x: t,
              y: endCoord.y
            },
            b: endCoord
          }];
        }

        if (moreLinePath.length > 0 && rectPath.length > 0) {
          return pathOffset(getPathLength(moreLinePath) <= getPathLength(rectPath) ? moreLinePath : rectPath, {
            x: -1,
            y: -1
          });
        } else if (moreLinePath.length > 0) {
          return pathOffset(moreLinePath, {
            x: -1,
            y: -1
          });
        } else if (rectPath.length > 0) {
          return pathOffset(rectPath, {
            x: -1,
            y: -1
          });
        }

        return [];
      }

      function getPathLength(path) {
        var length = 0;

        var _iterator = _createForOfIteratorHelper(path),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var line = _step.value;
            length += getLineLength(line);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return length;
      }

      function getLineLength(line) {
        if (line.a.x === line.b.x) {
          return Math.abs(line.a.y - line.b.y);
        } else if (line.a.y === line.b.y) {
          return Math.abs(line.a.x - line.b.x);
        }

        return 0;
      }

      function isTraversable(tile) {
        var exceptionTiles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return tile.isTraversable() || exceptionTiles.some(function (exceptionTile) {
          return exceptionTile === tile;
        });
      }

      function checkLineX(matrix, exceptionTiles, y1, y2, x) {
        var min = Math.min(y1, y2);
        var max = Math.max(y1, y2); // run column

        for (var y = min; y <= max; y++) {
          var tile = matrix[y][x];

          if (!isTraversable(tile, exceptionTiles)) {
            return false;
          }
        }

        return true;
      }

      function checkLineY(matrix, exceptionTiles, x1, x2, y) {
        var min = Math.min(x1, x2);
        var max = Math.max(x1, x2);

        for (var x = min; x <= max; x++) {
          var tile = matrix[y][x];

          if (!isTraversable(tile, exceptionTiles)) {
            return false;
          }
        }

        return true;
      }

      function checkRectX(matrix, exceptionTiles, pMinY, pMaxY) {
        for (var y = pMinY.y + 1; y < pMaxY.y; y++) {
          // check three line
          if (checkLineX(matrix, exceptionTiles, pMinY.y, y, pMinY.x) && checkLineY(matrix, exceptionTiles, pMinY.x, pMaxY.x, y) && checkLineX(matrix, exceptionTiles, y, pMaxY.y, pMaxY.x)) {
            return y;
          }
        } // have a line in three line not true then return -1


        return -1;
      }

      function checkRectY(matrix, exceptionTiles, pMinX, pMaxX) {
        // find line and y begin
        for (var x = pMinX.x + 1; x < pMaxX.x; x++) {
          if (checkLineY(matrix, exceptionTiles, pMinX.x, x, pMinX.y) && checkLineX(matrix, exceptionTiles, pMinX.y, pMaxX.y, x) && checkLineY(matrix, exceptionTiles, x, pMaxX.x, pMaxX.y)) {
            return x;
          }
        }

        return -1;
      }

      function checkMoreLineX(matrix, exceptionTiles, type, pMinY, pMaxY) {
        // find line and y begin
        var y = type === 1 ? pMaxY.y : pMinY.y;
        var row = type === 1 ? pMinY.x : pMaxY.x; // check more

        if (checkLineX(matrix, exceptionTiles, pMinY.y, pMaxY.y, row)) {
          while (y >= 0 && y < matrix.length && isTraversable(matrix[y][pMinY.x], exceptionTiles) && isTraversable(matrix[y][pMaxY.x], exceptionTiles)) {
            if (checkLineY(matrix, exceptionTiles, pMinY.x, pMaxY.x, y)) {
              return y;
            }

            y += type;
          }
        }

        return -1;
      }

      function checkMoreLineY(matrix, exceptionTiles, type, pMinX, pMaxX) {
        var x = type === 1 ? pMaxX.x : pMinX.x;
        var col = type === 1 ? pMinX.y : pMaxX.y;

        if (checkLineY(matrix, exceptionTiles, pMinX.x, pMaxX.x, col)) {
          while (x >= 0 && x < matrix[0].length && isTraversable(matrix[pMinX.y][x], exceptionTiles) && isTraversable(matrix[pMaxX.y][x], exceptionTiles)) {
            if (checkLineX(matrix, exceptionTiles, pMinX.y, pMaxX.y, x)) {
              return x;
            }

            x += type;
          }
        }

        return -1;
      }

      function pathOffset(path, by) {
        return path.map(function (line) {
          return {
            a: {
              x: line.a.x + by.x,
              y: line.a.y + by.y
            },
            b: {
              x: line.b.x + by.x,
              y: line.b.y + by.y
            }
          };
        });
      }

      function pad2DArray(array) {
        var paddedArray = []; // Calculate the new dimensions after padding

        var numRows = array.length + 2;
        var numCols = array[0].length + 2; // Fill the new array with padding elements

        for (var i = 0; i < numRows; i++) {
          paddedArray[i] = [];

          for (var j = 0; j < numCols; j++) {
            paddedArray[i][j] = new PaddingTile(j - 1, i - 1);
          }
        } // Copy the original array into the center of the padded array


        for (var _i = 0; _i < array.length; _i++) {
          for (var _j = 0; _j < array[_i].length; _j++) {
            paddedArray[_i + 1][_j + 1] = array[_i][_j];
          }
        }

        return paddedArray;
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e2508bdMjdJ86TtOdANou2E", "findFirstMatch", undefined); // function to traverse through the grid to find the first pair of matching tiles that getValidPath() returns true


      function findFirstMatch(grid) {
        // get coords in spiral order to optimize the search
        // NOTE: this search is skewed towards the top left corner of the grid (row first)
        var spiraledCoords = Array.from(spiralTraversal(grid.gridW, grid.gridH)); // convert coords to tiles and filter out empty tiles
        // NOTE: this assumes that spiralTraversal() returns valid coords
        // WARNING: this will throw an error if the tile is null

        var tiles = spiraledCoords.map(function (_ref) {
          var x = _ref.x,
              y = _ref.y;
          var tile = grid.getTileAt(x, y);
          if (!tile) throw new Error('Tile is null');
          return tile;
        }).filter(function (tile) {
          return !tile.isTraversable();
        });
        var discovered = []; // while version

        var _loop = function _loop() {
          var tile = tiles.shift();
          if (discovered.find(function (dis) {
            return dis === tile;
          })) return "continue";
          discovered.push(tile); // find other tile that is the same and has a valid path

          var _iterator = _createForOfIteratorHelper(tiles),
              _step;

          try {
            var _loop2 = function _loop2() {
              var other = _step.value;
              if (!other.isSame(tile) || discovered.find(function (dis) {
                return dis === other;
              })) return "continue";
              var path = getValidPath(grid, tile, other);

              if (path.length > 0) {
                return {
                  v: {
                    v: path
                  }
                };
              }
            };

            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _ret2 = _loop2();

              if (_ret2 === "continue") continue;
              if (_typeof(_ret2) === "object") return _ret2.v;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        };

        while (tiles.length > 0) {
          var _ret = _loop();

          if (_ret === "continue") continue;
          if (_typeof(_ret) === "object") return _ret.v;
        }

        return null;
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "91695swWmFKdJa3Otf/g7xl", "shuffleTiles", undefined);
      /**
       * Configuration for the shuffle animation
       * @param grid The grid to shuffle. The content of the grid will be modified.
       * @param config The configuration for the sync animation
       * @param includeTraversable Whether to include traversable tiles in the shuffle
       */


      var animateBasicShuffle = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (config) {
          var grid = config.grid,
              syncConfig = config.config;
          yield grid.syncTiles(syncConfig);
        });

        return function animateBasicShuffle(_x) {
          return _ref.apply(this, arguments);
        };
      }();
      /**
       * Shuffles the tiles in the grid
       * @param config The configuration for the shuffle
       * @returns A promise that resolves when the tiles have finished syncing
       */


      function shuffleTiles(_x2) {
        return _shuffleTiles.apply(this, arguments);
      }

      function _shuffleTiles() {
        _shuffleTiles = _asyncToGenerator(function* (config) {
          var grid = config.grid,
              padBeforeShuffle = config.padBeforeShuffle,
              includeTraversable = config.includeTraversable,
              _config$animate = config.animate,
              animate = _config$animate === void 0 ? animateBasicShuffle : _config$animate;
          var ogArray = includeTraversable ? grid.getTiles() : grid.getTiles().filter(function (tile) {
            return !tile.isTraversable();
          });

          if (ogArray.length === 2) {
            var isAdjacent = ogArray[0].getCoord().x === ogArray[1].getCoord().x || ogArray[0].getCoord().y === ogArray[1].getCoord().y;

            if (isAdjacent && padBeforeShuffle !== undefined && padBeforeShuffle !== null) {
              yield grid.padTiles(_objectSpread2(_objectSpread2({}, padBeforeShuffle), {}, {
                duration: 0.2,
                stagger: 0
              }));
            }

            grid.swapTilesImmediate(ogArray[0], ogArray[1]);
            return yield animate(config);
          }

          yield grid.padTiles(padBeforeShuffle);
          var shuffledArray = shuffleArray(ogArray);
          var newPositions = ogArray.map(function (tile, index) {
            return {
              tile: tile,
              other: shuffledArray[index]
            };
          }); //? half the array to guarantee that our pairs don't swap twice

          if (newPositions.length <= 6) {
            newPositions.splice(newPositions.length / 2);
          }

          newPositions.forEach(function (pair) {
            grid.swapTilesImmediate(pair.tile, pair.other);
          });
          return yield animate(config);
        });
        return _shuffleTiles.apply(this, arguments);
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "037d4evHwdMq4mBRTR1ea10", "getBestPath", undefined);

      var MAX_SEARCHABLE_TURNS = 8;
      var DIRECTIONS4 = [Direction.Up, Direction.Down, Direction.Left, Direction.Right];

      var PaddingTile$1 = /*#__PURE__*/function () {
        function PaddingTile(config) {
          _classCallCheck(this, PaddingTile);

          var width = config.width,
              height = config.height,
              x = config.x,
              y = config.y,
              padding = config.padding;
          this.padding = padding;
          this.coord = new Vec2(x, y);
          this.width = width;
          this.height = height;
        }

        _createClass(PaddingTile, [{
          key: "getCoord",
          value: function getCoord() {
            return this.coord;
          }
        }, {
          key: "setCoord",
          value: function setCoord(x, y) {
            this.coord.set(x, y);
          }
        }, {
          key: "isTraversable",
          value: function isTraversable() {
            return PaddingTile.isTraversable({
              width: this.width,
              height: this.height,
              x: this.coord.x,
              y: this.coord.y,
              padding: this.padding
            });
          }
        }], [{
          key: "isTraversable",
          value: function isTraversable(config) {
            var width = config.width,
                height = config.height,
                x = config.x,
                y = config.y,
                padding = config.padding; // traversable if it's withing the grid's padding

            return x >= -padding && x < width + padding && y >= -padding && y < height + padding;
          }
        }]);

        return PaddingTile;
      }();

      var Node = /*#__PURE__*/function () {
        function Node(tile, parent) {
          var _parent$cache$turns;

          _classCallCheck(this, Node);

          this.f = 0;
          this.g = 0;
          this.h = 0;

          if (tile === (parent === null || parent === void 0 ? void 0 : parent.tile)) {
            throw new Error('Tile cannot be its own parent');
          }

          this.tile = tile;
          this.parent = parent;
          var direction = Node.calcDirection(this);
          var hasTurned = parent && direction && parent.cache.direction && !direction.equals(parent.cache.direction);
          var turns = hasTurned ? 1 : 0;
          this.cache = {
            direction: direction,
            turns: turns + ((_parent$cache$turns = parent === null || parent === void 0 ? void 0 : parent.cache.turns) !== null && _parent$cache$turns !== void 0 ? _parent$cache$turns : 0)
          };
        }

        _createClass(Node, [{
          key: "getKey",
          value: function getKey() {
            var _this$cache$direction;
            /**
             * NOTE: Using either Direction or Parent is enough to make sure node in overlapping paths are unique,
             * Here we only use Direction to avoid having to find the key of the parent node
             */


            return "x:".concat(this.tile.getCoord().x // coord x
            , ",y:").concat(this.tile.getCoord().y // coord y
            , ",d:").concat((_this$cache$direction = this.cache.direction) === null || _this$cache$direction === void 0 ? void 0 : _this$cache$direction.toString() // direction
            );
          }
        }, {
          key: "equals",
          value: function equals(node) {
            return this.getKey() === node.getKey();
          }
        }], [{
          key: "calcDirection",
          value: function calcDirection(node) {
            if (node.parent) {
              var parentCoord = node.parent.tile.getCoord();
              var currentCoord = node.tile.getCoord();
              return new Vec2(currentCoord.x - parentCoord.x, currentCoord.y - parentCoord.y);
            }

            return null;
          }
        }]);

        return Node;
      }();
      /**
       * Get a path from startTile to endTile.
       *
       * The path only contains traversable tiles,
       * only allows horizontal and vertical movement
       * and only allows two turns.
       *
       * @param grid The grid game component
       * @param startTile The starting tile
       * @param endTile The target tile
       * @returns Returns an array of tiles, including the start and end tiles or null if there is no valid path
       */


      function getBestPath(grid, startTile, endTile) {
        // A* algorithm
        var openList = [];
        var closedList = [];
        var startNode = new Node(startTile, null);
        var endNode = new Node(endTile, null); // optimization

        var exceptionTiles = [endNode.tile];
        openList.push(startNode);

        while (openList.length > 0) {
          // Get the node with the lowest f score
          var currentNode = openList.shift(); // Add the current node to the closed list

          closedList.push(currentNode); // If the current node is the end node, return the path

          if (currentNode.tile === endNode.tile) {
            var path = [];
            var _endNode = currentNode;
            var previousNode = currentNode;
            var node = currentNode.parent;

            while (node) {
              if (node.cache.turns !== previousNode.cache.turns) {
                path.unshift({
                  a: node.tile.getCoord().clone(),
                  b: _endNode.tile.getCoord().clone()
                });
                _endNode = node;
              }

              previousNode = node;
              node = node.parent;
            }

            path.unshift({
              a: previousNode.tile.getCoord().clone(),
              b: _endNode.tile.getCoord().clone()
            });
            return path;
          } // Get traversable adjacent tiles of the current node


          var adjacentTiles = getAdjacentTiles(grid, currentNode, getTraversableDirections(grid, currentNode.tile, exceptionTiles));

          var _loop = function _loop() {
            var adjacentTile = _adjacentTiles[_i]; // Create a new node for the adjacent tile

            var adjacentNode = new Node(adjacentTile, currentNode); // skip if the adjacent node have turned more than the specified amount for optimization

            if (adjacentNode.cache.turns > MAX_SEARCHABLE_TURNS) {
              return "continue";
            }

            var isEndNode = adjacentNode.tile.getCoord().equals(endNode.tile.getCoord());
            var isDiscovered = closedList.some(function (node) {
              return node.equals(adjacentNode);
            });
            var isQueued = openList.some(function (node) {
              return node.equals(adjacentNode);
            });
            /**
             * Skip if the adjacent node is either:
             * * Queued
             * * Discovered (with the exception of the end node)
             */

            if (isQueued || isDiscovered && !isEndNode) {
              return "continue";
            } // Calculate the f score


            adjacentNode.g = currentNode.g + 1 + adjacentNode.cache.turns;
            adjacentNode.h = getHeuristic(adjacentNode, endNode);
            adjacentNode.f = adjacentNode.g + adjacentNode.h; // Add the adjacent node to the open list

            openList.push(adjacentNode);
          };

          for (var _i = 0, _adjacentTiles = adjacentTiles; _i < _adjacentTiles.length; _i++) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          } // Sort the open list by f score


          openList.sort(function (a, b) {
            return a.f - b.f;
          });
        }

        var startCoord = startNode.tile.getCoord();
        var endCoord = endNode.tile.getCoord();

        if (startCoord.x === endCoord.x || startCoord.y === endCoord.y) {
          return [{
            a: startCoord,
            b: endCoord
          }];
        } else {
          return [{
            a: startCoord,
            b: {
              x: startCoord.x,
              y: endCoord.y
            }
          }, {
            a: {
              x: startCoord.x,
              y: endCoord.y
            },
            b: endCoord
          }];
        }
      }

      function getHeuristic(node, endNode) {
        var currentCoord = node.tile.getCoord();
        var endCoord = endNode.tile.getCoord();
        return Math.abs(currentCoord.x - endCoord.x) + Math.abs(currentCoord.y - endCoord.y);
      }

      function getAdjacentTiles(grid, node) {
        var directions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DIRECTIONS4;
        var tiles = [];

        var _iterator = _createForOfIteratorHelper(directions),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var direction = _step.value;
            var coord = {
              x: node.tile.getCoord().x + direction.x,
              y: node.tile.getCoord().y + direction.y
            };
            var tile = grid.getTileAt(coord.x, coord.y);

            if (tile) {
              tiles.push(tile);
            } else {
              tiles.push(new PaddingTile$1({
                width: grid.gridW,
                height: grid.gridH,
                x: coord.x,
                y: coord.y,
                padding: 1
              }));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return tiles;
      }

      function getTraversableDirections(grid, tile) {
        var exceptionTiles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var directions = [];

        var _iterator2 = _createForOfIteratorHelper(DIRECTIONS4),
            _step2;

        try {
          var _loop2 = function _loop2() {
            var direction = _step2.value;
            var coord = {
              x: tile.getCoord().x + direction.x,
              y: tile.getCoord().y + direction.y
            };
            var adjacentTile = grid.getTileAt(coord.x, coord.y);

            if (adjacentTile) {
              if (adjacentTile !== null && adjacentTile !== void 0 && adjacentTile.isTraversable() || exceptionTiles.find(function (t) {
                return t.getCoord().equals(adjacentTile.getCoord());
              })) {
                directions.push(direction);
              }

              return "continue";
            }

            if (PaddingTile$1.isTraversable({
              width: grid.gridW,
              height: grid.gridH,
              x: coord.x,
              y: coord.y,
              padding: 1
            })) {
              directions.push(direction);
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _ret2 = _loop2();

            if (_ret2 === "continue") continue;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return directions;
      }

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e374beWT3BGAYcIAL1SbTiu", "Match", undefined);

      var Match = /*#__PURE__*/function (_State) {
        _inherits(Match, _State);

        var _super = _createSuper(Match);

        function Match(grid, tileDown, otherTile) {
          var _this;

          _classCallCheck(this, Match);

          _this = _super.call(this, grid);
          _this.path = getValidPath(grid, tileDown, otherTile);
          _this.match = [tileDown, otherTile];
          return _this;
        }

        _createClass(Match, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            if (this.path.length === 0) {
              this.machine.updateState(new Idle(this.grid));
              return;
            }

            this.machine.updateState(new Clear(this.grid, [{
              tile1: this.match[0],
              tile2: this.match[1]
            }]));
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            this.grid.node.emit(GridEvents.MATCH, this.match);

            if (this.path.length !== 0) {
              this.grid.setNormalMatches(this.grid.getNormalMatches() + 1);
            }

            if (this.path.length !== 0) {
              // GameManager.Instance.pathDrawManager.drawMatchPath(this.path)
              // GameManager.Instance.comboManager.addCombo()
              this.grid.node.scene.emit(GameplayEvents.GRID_MATCH, this.path, this.match);
              this.grid.node.scene.emit(GridEvents.MATCH_SUCCESS, this.match);
            } else {
              GeneralUtils.playSound(CodeSoundKeys.INVALID_MATCH);
              var path = getBestPath(this.grid, this.match[0], this.match[1]);
              if (path.length > 0) ;
              this.shakeGrid();
              this.grid.node.emit(GridEvents.MATCH_FAIL, this.match);
            }

            this.transition();
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }, {
          key: "shakeGrid",
          value: function shakeGrid() {
            var _this2 = this; // if (GameManager.Instance.playerDataManager.getSettings()[2] && navigator.vibrate)
            //     navigator.vibrate(100)


            var defaultPos = this.grid.node.position.clone();
            var shakeTween = tween(this.grid.node).to(0.05, {
              position: defaultPos.clone().add3f(randomRange(5, 10), randomRange(5, 10), 0)
            }).to(0.05, {
              position: defaultPos.clone().subtract3f(randomRange(5, 10), randomRange(5, 10), 0)
            });
            return new Promise(function (resolve) {
              tween(_this2.grid.node).repeat(2, shakeTween).to(0.05, {
                position: defaultPos
              }, {
                onComplete: function onComplete() {
                  resolve();
                }
              }).start();
            });
          }
        }]);

        return Match;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "6e10738g59MNZy5y6Syg4Gx", "Idle", undefined);

      var Idle = /*#__PURE__*/function (_State) {
        _inherits(Idle, _State);

        var _super = _createSuper(Idle);

        function Idle() {
          var _this;

          _classCallCheck(this, Idle);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.tileDown = null;
          _this.otherTile = null;
          return _this;
        }

        _createClass(Idle, [{
          key: "emitTileDown",
          value: function emitTileDown(tile) {
            if (tile.isTraversable()) return;

            if (this.tileDown === tile) {
              this.tileDown = null;
              tile.setFocused(false);
              return;
            }

            this.grid.node.emit(GridEvents.TILE_SELECT, tile);

            if (!this.tileDown) {
              tile.setFocused(true);
              this.tileDown = tile;
              return;
            }

            if (this.tileDown.isSame(tile)) {
              this.otherTile = tile;
              this.transition();
              return;
            }

            this.tileDown.setFocused(false);
            tile.setFocused(true);
            this.tileDown = tile;
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return true;
          }
        }, {
          key: "transition",
          value: function transition() {
            if (!this.tileDown || !this.otherTile) return;
            this.tileDown.setFocused(false);
            this.machine.updateState(new Match(this.grid, this.tileDown, this.otherTile));
          }
        }, {
          key: "deselectCurrentTile",
          value: function deselectCurrentTile() {
            if (!this.tileDown) return;
            this.tileDown.setFocused(false);
            this.tileDown = null;
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this2 = this;

            this.grid.getTiles().forEach(function (tile) {
              _this2.grid.setTileIgnoreInput(tile, false);

              tile.setFocused(false);
            });
            this.grid.node.emit(GridEvents.IDLE_ENTER, this.grid);
            this.grid.node.scene.emit(GameplayEvents.IDLE_ENTER, this.grid);
          }
        }, {
          key: "onExit",
          value: function onExit() {
            this.grid.node.emit(GridEvents.IDLE_EXIT, this.grid);
            this.grid.node.scene.emit(GameplayEvents.IDLE_EXIT, this.grid);
            this.tileDown = null;
            this.otherTile = null;
            this.grid.setTileIgnoreInput(this.grid.getTiles());
          }
        }]);

        return Idle;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "789a1Vng+lH1qkluyxPPqGf", "Shuffle", undefined);

      var ShuffleEvent = {
        SHUFFLE_START: 'SHUFFLE_START',
        SHUFFLE: 'SHUFFLE',
        SHUFFLE_COMPLETE: 'SHUFFLE_COMPLETE'
      };

      var Shuffle = /*#__PURE__*/function (_State) {
        _inherits(Shuffle, _State);

        var _super = _createSuper(Shuffle);

        function Shuffle(grid, config) {
          var _this;

          var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          _classCallCheck(this, Shuffle);

          _this = _super.call(this, grid);
          _this.config = config;
          _this.eventEmitter = new EventTarget();
          _this.force = force;
          return _this;
        }

        _createClass(Shuffle, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            this.machine.updateState(new Idle(this.grid));
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this2 = this;

            this.eventEmitter.emit(ShuffleEvent.SHUFFLE_START);
            this.shuffleUntilPlayable().then(function () {
              _this2.eventEmitter.emit(ShuffleEvent.SHUFFLE_COMPLETE);

              _this2.grid.node.emit(GridEvents.SHUFFLE_COMPLETE, _this2.grid);

              _this2.transition();
            });
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }, {
          key: "shuffleUntilPlayable",
          value: function () {
            var _shuffleUntilPlayable = _asyncToGenerator(function* () {
              var uncleared = this.grid.getUncleared();
              var hasEmitted = false;

              if (uncleared.length === 0 && !this.force) {
                this.transition();
                return;
              }

              var path = findFirstMatch(this.grid);

              while (!path || this.force) {
                if (!hasEmitted) {
                  // only emit shuffle event if the grid is not playable
                  // only emit this once
                  hasEmitted = true;
                  this.grid.node.emit(GridEvents.SHUFFLE, this.grid);
                }

                this.force = false;
                yield shuffleTiles(_objectSpread2({
                  grid: this.grid,
                  config: {
                    duration: 0.6,
                    easing: 'smooth',
                    stagger: 0.4
                  },
                  padBeforeShuffle: {
                    easing: 'smooth',
                    padding: 10,
                    duration: 0.4,
                    stagger: 0
                  },
                  includeTraversable: false
                }, this.config));
                this.eventEmitter.emit(ShuffleEvent.SHUFFLE, this.grid);
                path = findFirstMatch(this.grid);
              }
            });

            function shuffleUntilPlayable() {
              return _shuffleUntilPlayable.apply(this, arguments);
            }

            return shuffleUntilPlayable;
          }()
        }]);

        return Shuffle;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "9555199v3NC9oLLOR7oWWcy", "Spawn", undefined);

      var Spawn = /*#__PURE__*/function (_State) {
        _inherits(Spawn, _State);

        var _super = _createSuper(Spawn);

        function Spawn(grid) {
          var _this;

          _classCallCheck(this, Spawn);

          _this = _super.call(this, grid);
          _this.spawned = false;
          return _this;
        }

        _createClass(Spawn, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            if (this.spawned) {
              this.machine.updateState(new Gravity(this.grid, this.grid.gravityList));
            } else {
              this.machine.updateState(new Shuffle(this.grid));
            }
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this2 = this;

            if (this.grid.getNormalMatches() < 5) {
              this.spawned = false;
              return this.transition();
            }

            var timesSpawnedAlready = Math.ceil((this.grid.getNormalMatches() - 5) / 2); // TODO: Hard code right here

            var addRandomTilesPerMove = 0; // const { addRandomTilesPerMove } = this.grid.levelManager.getLevelData().rules

            if (timesSpawnedAlready >= addRandomTilesPerMove) {
              this.spawned = false;
              return this.transition();
            }

            if (this.grid.getNormalMatches() % 2 === 0) {
              this.spawned = false;
              return this.transition();
            }

            var frame = this.grid.frames[Math.floor(Math.random() * this.grid.frames.length)];
            var randomPair = this.grid.getRandomInactivePair();

            if (!randomPair) {
              this.spawned = false;
              return this.transition();
            } // AudioSystem.Instance.playSound(AudioKeys.EXTRA_TILE_SPAWN)


            this.spawned = true;
            Promise.all([randomPair[0].restore(frame), randomPair[1].restore(frame)]).then(function () {
              _this2.transition();
            });
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }]);

        return Spawn;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "d60e9YZDXJJjZlkssCp19ys", "Gravity", undefined);

      var Gravity = /*#__PURE__*/function (_State) {
        _inherits(Gravity, _State);

        var _super = _createSuper(Gravity);

        function Gravity(grid, gravityList) {
          var _this;

          var minimumPairs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;

          _classCallCheck(this, Gravity);

          _this = _super.call(this, grid);
          _this.gravityList = [];
          _this.gravityList = gravityList;
          _this.minimumPairs = minimumPairs;
          return _this;
        }

        _createClass(Gravity, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            if (this.machine.getPreviousState() instanceof Spawn) {
              return this.machine.updateState(new Shuffle(this.grid));
            }

            this.machine.updateState(new Spawn(this.grid));
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this2 = this;

            var pairCount = this.grid.getUncleared().length / 2; // if there are less than 7 pairs, skip this state

            if (pairCount <= this.minimumPairs) {
              this.transition();
              return;
            }

            this.awaitAllGravity().then(function () {
              _this2.grid.node.emit(GridEvents.GRAVITY_COMPLETE, _this2.grid);

              _this2.transition();
            });
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }, {
          key: "awaitAllGravity",
          value: function () {
            var _awaitAllGravity = _asyncToGenerator(function* () {
              var hasEmitted = false;

              var _iterator = _createForOfIteratorHelper(this.gravityList),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var gravity = _step.value;
                  var affectedTiles = yield applyGravity(this.grid, gravity); // emit gravity event only if gravity is applied

                  if (affectedTiles.length > 0 && !hasEmitted) {
                    // only emit once
                    hasEmitted = true;
                    this.grid.node.emit(GridEvents.GRAVITY, this.grid);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            });

            function awaitAllGravity() {
              return _awaitAllGravity.apply(this, arguments);
            }

            return awaitAllGravity;
          }()
        }]);

        return Gravity;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "8865a7zPlNCYJ7AsOny+POJ", "Clear", undefined);

      var ClearEvent = {
        CLEAR_START: 'CLEAR_START',
        CLEAR_PAIR: 'CLEAR_PAIR',
        CLEAR_END: 'CLEAR_END'
      };

      var Clear = /*#__PURE__*/function (_State) {
        _inherits(Clear, _State);

        var _super = _createSuper(Clear);

        function Clear(grid, configs) {
          var _this;

          _classCallCheck(this, Clear);

          _this = _super.call(this, grid);
          _this.configs = configs;
          _this.eventEmitter = new EventTarget();
          return _this;
        }

        _createClass(Clear, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            this.machine.updateState(new Gravity(this.grid, this.grid.gravityList));
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this2 = this;

            this.grid.node.emit(GridEvents.CLEAR, this.configs);
            this.eventEmitter.emit(ClearEvent.CLEAR_START);
            this.clearQueue().then(function () {
              var uncleared = _this2.grid.getUncleared();

              if (uncleared.length === 0) {
                _this2.grid.node.emit(GridEvents.CLEAR_ALL, _this2.grid);

                _this2.grid.node.scene.emit(GameplayEvents.GAME_FINISH);
              }

              _this2.eventEmitter.emit(ClearEvent.CLEAR_END);

              _this2.transition();
            });
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }, {
          key: "clearQueue",
          value: function () {
            var _clearQueue = _asyncToGenerator(function* () {
              var _this3 = this;

              var _loop = function* _loop() {
                var _this3$configs, _this3$configs2;

                var _ref = _this3.configs.shift(),
                    tile1 = _ref.tile1,
                    tile2 = _ref.tile2,
                    _ref$fx = _ref.fx,
                    fx = _ref$fx === void 0 ? 'clear' : _ref$fx,
                    _ref$propogateFx = _ref.propogateFx,
                    propogateAnimation = _ref$propogateFx === void 0 ? false : _ref$propogateFx;

                var pairs = yield Promise.all([tile1.setEmpty(tile2, false, fx), tile2.setEmpty(tile1, false, fx)]);

                (_this3$configs = _this3.configs).push.apply(_this3$configs, _toConsumableArray(pairs[0].map(function (pair) {
                  return {
                    tile1: pair[0],
                    tile2: pair[1],
                    animation: propogateAnimation ? fx : 'clear',
                    propogateAnimation: propogateAnimation
                  };
                })));

                (_this3$configs2 = _this3.configs).push.apply(_this3$configs2, _toConsumableArray(pairs[1].map(function (pair) {
                  return {
                    tile1: pair[0],
                    tile2: pair[1],
                    animation: propogateAnimation ? fx : 'clear',
                    propogateAnimation: propogateAnimation
                  };
                })));

                _this3.grid.node.emit(GridEvents.CLEAR, tile1, tile2);

                _this3.eventEmitter.emit(ClearEvent.CLEAR_PAIR, tile1, tile2);
              };

              while (this.configs.length > 0) {
                yield* _loop();
              }
            });

            function clearQueue() {
              return _clearQueue.apply(this, arguments);
            }

            return clearQueue;
          }()
        }]);

        return Clear;
      }(State);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "fc1aeMb3a5ArqkWBKxZ/ejq", "Static", undefined);

      var Static = /*#__PURE__*/function (_State) {
        _inherits(Static, _State);

        var _super = _createSuper(Static);

        function Static() {
          _classCallCheck(this, Static);

          return _super.apply(this, arguments);
        }

        _createClass(Static, [{
          key: "emitTileDown",
          value: function emitTileDown(_tile) {// do nothing
          }
        }, {
          key: "awaitingInput",
          value: function awaitingInput() {
            return false;
          }
        }, {
          key: "transition",
          value: function transition() {
            this.machine.updateState(new Idle(this.grid));
          }
        }, {
          key: "onEnter",
          value: function onEnter() {
            var _this = this;

            this.grid.getTiles().forEach(function (tile) {
              _this.grid.setTileIgnoreInput(tile);

              tile.setFocused(false);
            });
          }
        }, {
          key: "onExit",
          value: function onExit() {// do nothing
          }
        }]);

        return Static;
      }(State);

      cclegacy._RF.pop();

      var _dec$q, _dec2$j, _dec3$g, _dec4$9, _dec5$6, _dec6$5, _dec7$4, _class$q, _class2$f, _descriptor$d, _descriptor2$a, _descriptor3$7, _descriptor4$4, _descriptor5$4;

      cclegacy._RF.push({}, "9efdfcfkcxL9JKsuKnkBYXM", "Grid", undefined);

      var ccclass$q = _decorator.ccclass,
          property$f = _decorator.property,
          requireComponent$b = _decorator.requireComponent;
      var Grid = (_dec$q = ccclass$q('Grid'), _dec2$j = requireComponent$b([UITransform]), _dec3$g = property$f({
        type: [Tile]
      }), _dec4$9 = property$f({
        group: {
          name: 'Grid Size'
        },
        type: CCInteger,
        displayName: 'Width',
        min: 1
      }), _dec5$6 = property$f({
        group: {
          name: 'Grid Size'
        },
        type: CCInteger,
        displayName: 'Height',
        min: 1
      }), _dec6$5 = property$f({
        group: {
          name: 'Grid Size'
        },
        type: CCFloat,
        displayName: 'Max tile scale',
        min: 0
      }), _dec7$4 = property$f(Node$1), _dec$q(_class$q = _dec2$j(_class$q = (_class2$f = /*#__PURE__*/function (_Component) {
        _inherits(Grid, _Component);

        var _super = _createSuper(Grid);

        function Grid() {
          var _this;

          _classCallCheck(this, Grid);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args)); // @property(GridFX)
          // private gridFx!: GridFX

          _initializerDefineProperty(_this, "tilePrefabs", _descriptor$d, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridW", _descriptor2$a, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridH", _descriptor3$7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxTileScale", _descriptor4$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tilesHolder", _descriptor5$4, _assertThisInitialized(_this));

          _this.tiles = [];
          _this.gravityList = [];
          return _this;
        }

        _createClass(Grid, [{
          key: "start",
          value: function start() {
            // throw error if grid size is not even
            if (this.gridW * this.gridH % 2 !== 0) {
              throw new Error('Grid size must be even');
            } // get ui transform


            this.uiTransform = this.node.getComponent(UITransform); // disable prefab

            this.tilePrefabs.node.active = false;
          }
        }, {
          key: "create",
          value: function create(frames, levelData) {
            var _this2 = this;

            this.setNormalMatches(0);
            this.gridW = levelData.columns;
            this.gridH = levelData.rows;
            this.frames = frames;
            this.tiles = this.attachTiles(this, this.tilePrefabs, {
              frames: frames,
              gridW: this.gridW,
              gridH: this.gridH,
              screenW: this.uiTransform.width,
              screenH: this.uiTransform.height,
              maxTileScale: this.maxTileScale
            });
            this.placeMatchableTiles(this.tiles); // NOTE: the number of bomb tiles must be less than the total number of tiles

            var specials = [];

            var _loop = function _loop() {
              var randomTile = _this2.getTileAt(Math.floor(Math.random() * _this2.gridW), Math.floor(Math.random() * _this2.gridH));

              while (randomTile === null || specials.find(function (tile) {
                return tile === randomTile;
              })) {
                randomTile = _this2.getTileAt(Math.floor(Math.random() * _this2.gridW), Math.floor(Math.random() * _this2.gridH));
              }

              randomTile.setSpecialType(TileTypes.BOMB);
              specials.push(randomTile);
            };

            for (var i = 0; i < levelData.specials.bomb; i++) {
              _loop();
            } // apply gravity


            this.gravityList = parseLevelGravity(levelData.mode); // emit create

            this.node.emit(GridEvents.CREATE); // reset grid machine

            if (!this.gridMachine) {
              this.gridMachine = new GridMachine(new Static(this));
            }

            this.gridMachine.updateState(new Static(this));
            return new Promise(function (resolve) {
              _this2.syncTiles({
                easing: 'backOut',
                duration: 0.8,
                stagger: 0.2
              }).then(function () {
                resolve(_this2);
              });
            });
          }
        }, {
          key: "play",
          value: function play() {
            this.gridMachine.updateState(new Idle(this));
          }
        }, {
          key: "placeMatchableTiles",
          value: function placeMatchableTiles(initiatedGrid) {
            var _this3 = this;

            var randomTile = initiatedGrid[randomRangeInt(0, initiatedGrid.length - 1)][randomRangeInt(0, initiatedGrid[0].length - 1)]; // pick a random tile next to the random tile, in a random direction

            var nearbyTiles = Object.values(Direction).map(function (_ref) {
              var x = _ref.x,
                  y = _ref.y;
              return _this3.getTileAt(randomTile.getCoord().y + x, randomTile.getCoord().x + y);
            }).filter(function (tile) {
              return tile !== null;
            });

            if (nearbyTiles.length === 0) {
              return;
            }

            var randomTile2 = nearbyTiles[randomRangeInt(0, nearbyTiles.length - 1)];

            if (randomTile.isSame(randomTile2)) {
              // already has a match
              return;
            } // find the first tile that is the same as the second tile, excluding the first tile


            var randomTile22 = this.findActiveTile(0, 0, randomTile2, randomTile2); // make 2-s the same as 1

            randomTile2.setIdentity(randomTile.id);
            randomTile22.setIdentity(randomTile.id);
          }
        }, {
          key: "attachTiles",
          value: function attachTiles(grid, tilePrefabs, config) {
            // get tile size
            var tileDefaultSize = tilePrefabs.getSize(); // calculate grid scale after fitting the grid to the screen

            var gridScale = Math.min(config.screenW / (tileDefaultSize[0] * config.gridW), config.screenH / (tileDefaultSize[1] * config.gridH)); // calculate tile size after scaling

            grid.tileSize = tileDefaultSize; // Spacing between tiles

            grid.tileSize = [grid.tileSize[0] * 0.975, grid.tileSize[1] * 0.9]; // set grid size

            grid.node.setScale(gridScale, gridScale); // generate frame to pair up, this array is half the size of the amount of tiles in the grid

            var framePairs = []; // assume that there are an even number of tiles

            for (var i = 0; i < config.gridW * config.gridH / 2; i++) {
              // push two of the same random frame
              var randomIndex = Math.floor(Math.random() * config.frames.length);
              framePairs.push(config.frames[randomIndex]);
              framePairs.push(config.frames[randomIndex]);
            } // shuffle frame pairs


            var randomlyPairedFrames = shuffleArray(framePairs); // clone tile prefabs into a grid

            var tiles = [];

            for (var y = config.gridH - 1; y >= 0; y--) {
              tiles[y] = [];

              for (var x = 0; x < config.gridW; x++) {
                var tile = instantiate(tilePrefabs.node).getComponent(Tile);

                if (!tile) {
                  throw new Error('Tile prefab must have Tile component');
                }

                this.tilesHolder.addChild(tile.node); // set tile's identity

                var frame = randomlyPairedFrames.pop();
                tile.setIdentity(frame); // add tile to grid

                tile.setCoord(x, y, false);
                tiles[y][x] = tile; // place the tiles next to each other

                tile.node.setPosition(grid.tileSize[0] * (x - (config.gridW - 1) / 2), grid.tileSize[1] * (y - (config.gridH - 1) / 2)); // place the tiles on top of each other at 0, 0, remember to sync the tiles

                tile.node.setPosition(0, 0); // enable the tile

                tile.node.active = true;
              }
            }

            return tiles;
          }
        }, {
          key: "getTiles",
          value: function getTiles() {
            return this.tiles.reduce(function (acc, val) {
              return acc.concat(val);
            }, []);
          }
        }, {
          key: "setTileIgnoreInput",
          value: function setTileIgnoreInput(tiles) {
            var ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (Array.isArray(tiles)) {
              tiles.forEach(function (tile) {
                tile.buttonComponent.interactable = !ignore;
              });
              return;
            }

            tiles.buttonComponent.interactable = !ignore;
          }
        }, {
          key: "getTileGrid",
          value: function getTileGrid() {
            return this.tiles;
          }
        }, {
          key: "emitTileDown",
          value: function emitTileDown(tile) {
            this.gridMachine.emitTileDown(tile);
          }
        }, {
          key: "getTileAt",
          value: function getTileAt(x, y) {
            var _this$tiles$y$x, _this$tiles$y;

            if (x < 0 || x >= this.gridW || y < 0 || y >= this.gridH) return null;
            return (_this$tiles$y$x = (_this$tiles$y = this.tiles[y]) === null || _this$tiles$y === void 0 ? void 0 : _this$tiles$y[x]) !== null && _this$tiles$y$x !== void 0 ? _this$tiles$y$x : null;
          }
        }, {
          key: "clearTilesAt",
          value: function clearTilesAt(pairs) {
            var _this4 = this;

            var animationType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'clear';

            if (!this.isReady()) {
              throw new Error('Cannot clear tiles when grid is not ready');
            }

            var clearState = new Clear(this, pairs.map(function (pair) {
              return {
                tile1: pair[0],
                tile2: pair[1],
                fx: animationType
              };
            }));
            return new Promise(function (resolve) {
              clearState.eventEmitter.on(ClearEvent.CLEAR_END, function () {
                resolve();
              });

              _this4.gridMachine.updateState(clearState);
            });
          }
        }, {
          key: "swapTilesImmediate",
          value: function swapTilesImmediate(tile1, tile2) {
            var coord1 = tile1.getCoord().clone();
            var coord2 = tile2.getCoord().clone();
            tile1.setCoord(coord2.x, coord2.y);
            tile2.setCoord(coord1.x, coord1.y);
            this.tiles[coord1.y][coord1.x] = tile2;
            this.tiles[coord2.y][coord2.x] = tile1; // also swap the sibling index

            var tempSiblingIndex = tile1.node.getSiblingIndex();
            tile1.node.setSiblingIndex(tile2.node.getSiblingIndex());
            tile2.node.setSiblingIndex(tempSiblingIndex);
          }
        }, {
          key: "syncTiles",
          value: function () {
            var _syncTiles = _asyncToGenerator(function* (config) {
              var _config$stagger,
                  _this5 = this;

              var stagger = (_config$stagger = config === null || config === void 0 ? void 0 : config.stagger) !== null && _config$stagger !== void 0 ? _config$stagger : 0;
              var promises = this.getTiles().map(function (tile) {
                return tile.sync(_objectSpread2(_objectSpread2({
                  tileSize: _this5.tileSize,
                  frames: _this5.frames,
                  gridW: _this5.gridW,
                  gridH: _this5.gridH,
                  screenW: _this5.uiTransform.width,
                  screenH: _this5.uiTransform.height,
                  maxTileScale: _this5.maxTileScale
                }, config), {}, {
                  stagger: randomRange(0, stagger)
                }));
              });
              yield Promise.all(promises);
            });

            function syncTiles(_x) {
              return _syncTiles.apply(this, arguments);
            }

            return syncTiles;
          }()
        }, {
          key: "padTiles",
          value: function () {
            var _padTiles = _asyncToGenerator(function* (config) {
              var _config$stagger2,
                  _this6 = this;

              var stagger = (_config$stagger2 = config === null || config === void 0 ? void 0 : config.stagger) !== null && _config$stagger2 !== void 0 ? _config$stagger2 : 0;
              var promises = this.getTiles().map(function (tile) {
                var _config$padding;

                return tile.pad(_objectSpread2(_objectSpread2({
                  tileSize: _this6.tileSize,
                  frames: _this6.frames,
                  gridW: _this6.gridW,
                  gridH: _this6.gridH,
                  screenW: _this6.uiTransform.width,
                  screenH: _this6.uiTransform.height,
                  maxTileScale: _this6.maxTileScale
                }, config), {}, {
                  stagger: randomRange(0, stagger),
                  padding: (_config$padding = config === null || config === void 0 ? void 0 : config.padding) !== null && _config$padding !== void 0 ? _config$padding : 0
                }));
              });
              return Promise.all(promises);
            });

            function padTiles(_x2) {
              return _padTiles.apply(this, arguments);
            }

            return padTiles;
          }()
        }, {
          key: "flyTiles",
          value: function () {
            var _flyTiles = _asyncToGenerator(function* (config) {
              var _this7 = this;

              var fly = this.getTiles().map(function (tile) {
                var _config$stagger3, _config$padding2;

                return tile.fly(_objectSpread2(_objectSpread2({
                  tileSize: _this7.tileSize,
                  frames: _this7.frames,
                  gridW: _this7.gridW,
                  gridH: _this7.gridH,
                  screenW: _this7.uiTransform.width,
                  screenH: _this7.uiTransform.height,
                  maxTileScale: _this7.maxTileScale
                }, config), {}, {
                  stagger: (_config$stagger3 = config === null || config === void 0 ? void 0 : config.stagger) !== null && _config$stagger3 !== void 0 ? _config$stagger3 : 0,
                  padding: (_config$padding2 = config === null || config === void 0 ? void 0 : config.padding) !== null && _config$padding2 !== void 0 ? _config$padding2 : 0
                }));
              });
              yield Promise.all(fly);
            });

            function flyTiles(_x3) {
              return _flyTiles.apply(this, arguments);
            }

            return flyTiles;
          }()
        }, {
          key: "sortTiles",
          value: function sortTiles() {
            var _this8 = this;

            var tiles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            if (tiles.length === 0) {
              tiles = this.getTiles();
            } // sort tiles objects by their y position


            tiles.sort(function (a, b) {
              return b.getCoord().y - a.getCoord().y + (b.getCoord().x - a.getCoord().x);
            }).forEach(function (tile) {
              tile.node.setSiblingIndex(_this8.tilesHolder.children.length - 1);
            });
          }
        }, {
          key: "sortTilesForTornadoAnim",
          value: function sortTilesForTornadoAnim() {
            var _this9 = this; //? more close to center, more higher


            var tiles = this.getTiles();
            tiles = tiles.sort(function (a, b) {
              var _a$node$position = a.node.position,
                  xa = _a$node$position.x,
                  ya = _a$node$position.y;
              var _b$node$position = b.node.position,
                  xb = _b$node$position.x,
                  yb = _b$node$position.y;
              return Math.pow(xb, 2) + Math.pow(yb, 2) - (Math.pow(xa, 2) + Math.pow(ya, 2));
            });
            tiles.forEach(function (tile) {
              tile.node.setSiblingIndex(_this9.tilesHolder.children.length - 1);
            });
          }
        }, {
          key: "clearAll",
          value: function clearAll() {
            var _this10 = this;

            return new Promise(function (resolve) {
              Promise.all(_this10.getTiles().map(function (tile) {
                return tile.setEmpty();
              })).then(function () {
                _this10.node.emit(GridEvents.CLEAR);

                _this10.node.emit(GridEvents.CLEAR_ALL);

                resolve();
              });
            });
          }
        }, {
          key: "destroyAll",
          value: function destroyAll() {
            this.getTiles().forEach(function (tile) {
              tile.node.destroy();
            });
          }
        }, {
          key: "getRandomActivePair",
          value: function getRandomActivePair() {
            // get random active tile
            var randomTile = this.findActiveTile(Math.floor(Math.random() * this.gridW), Math.floor(Math.random() * this.gridH));

            if (randomTile === null) {
              // try again from 0, 0
              randomTile = this.findActiveTile();
            }

            if (randomTile === null) {
              // no active tile left
              return null;
            } // find a random tile that is not the same as the first tile but has the same id


            var randomTile2 = this.findActiveTile(Math.floor(Math.random() * this.gridW), Math.floor(Math.random() * this.gridH), randomTile, randomTile);

            if (randomTile2 === null) {
              // try again from 0, 0
              randomTile2 = this.findActiveTile(0, 0, randomTile, randomTile);
            }

            if (randomTile2 === null) {
              // met exception
              throw new Error('Cannot find a pair for tile');
            }

            return [randomTile, randomTile2];
          }
        }, {
          key: "getRandomInactivePair",
          value: function getRandomInactivePair() {
            // get random inactive tile
            var randomTile = this.findInactiveTile(Math.floor(Math.random() * this.gridW), Math.floor(Math.random() * this.gridH));

            if (randomTile === null) {
              // try again from 0, 0
              randomTile = this.findInactiveTile();
            }

            if (randomTile === null) {
              // no inactive tile left
              return null;
            } // find a random tile that is not the same as the first tile but has the same id


            var randomTile2 = this.findInactiveTile(Math.floor(Math.random() * this.gridW), Math.floor(Math.random() * this.gridH), randomTile);

            if (randomTile2 === null) {
              // try again from 0, 0
              randomTile2 = this.findInactiveTile(0, 0, randomTile);
            }

            if (randomTile2 === null) {
              // met exception
              throw new Error('Cannot find a pair for tile');
            }

            return [randomTile, randomTile2];
          }
        }, {
          key: "findActiveTile",
          value: function findActiveTile() {
            var startX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var startY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var similar = arguments.length > 2 ? arguments[2] : undefined;
            var exceptionTile = arguments.length > 3 ? arguments[3] : undefined;
            var exceptionTiles = Array.isArray(exceptionTile) ? exceptionTile : [exceptionTile];

            var isSkipped = function isSkipped(tile) {
              return exceptionTiles.some(function (exception) {
                return exception === null || exception === void 0 ? void 0 : exception.getCoord().equals(tile.getCoord());
              });
            };

            for (var y = startY; y < this.gridH; y++) {
              for (var x = startX; x < this.gridW; x++) {
                // skips all empty tiles
                // skip exception tile
                if (this.tiles[y][x].isTraversable() || isSkipped(this.tiles[y][x])) {
                  continue;
                } // if id is not specified, return the first tile found


                if (similar === undefined) {
                  return this.tiles[y][x];
                } // if id is specified, only return tiles with the same id


                if (this.tiles[y][x].isSame(similar)) {
                  return this.tiles[y][x];
                }
              }
            }

            return null;
          }
        }, {
          key: "findInactiveTile",
          value: function findInactiveTile() {
            var startX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var startY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var exceptionTile = arguments.length > 2 ? arguments[2] : undefined;

            for (var y = startY; y < this.gridH; y++) {
              for (var x = startX; x < this.gridW; x++) {
                // skips all non-empty tiles
                if (!this.tiles[y][x].isTraversable()) continue; // skip exception tile

                if (exceptionTile !== null && exceptionTile !== void 0 && exceptionTile.getCoord().equals(this.tiles[y][x].getCoord())) continue;
                return this.tiles[y][x];
              }
            }

            return null;
          }
        }, {
          key: "toWorldPosition",
          value: function toWorldPosition(position) {
            var x = this.tileSize[0] * (position.x - (this.gridW - 1) / 2);
            var y = this.tileSize[1] * (position.y - (this.gridH - 1) / 2);

            if (position.x === -1) {
              x += this.tileSize[0] / 4;
            }

            if (position.x === this.gridW) {
              x -= this.tileSize[0] / 4;
            }

            if (position.y === -1) {
              y += this.tileSize[1] / 4;
            }

            if (position.y === this.gridH) {
              y -= this.tileSize[1] / 4;
            }

            return {
              x: x,
              y: y
            };
          }
        }, {
          key: "serialize",
          value: function serialize() {
            var _this11 = this;

            var serializedGrid = {
              columns: this.gridW,
              rows: this.gridH,
              code: ''
            };
            this.tiles.forEach(function (row) {
              row.forEach(function (tile) {
                if (tile.isTraversable()) {
                  var id = _this11.frames.indexOf(tile.id).toString();

                  serializedGrid.code += "t".concat(pad('00', id, true));
                } else {
                  serializedGrid.code += 'i01';
                }
              });
              serializedGrid.code += ':';
            });
            return serializedGrid;
          }
        }, {
          key: "deserialize",
          value: function deserialize(frames, json) {
            var _this12 = this;

            this.setNormalMatches(0);
            this.gridW = json.columns;
            this.gridH = json.rows;
            this.frames = frames;
            this.tiles = this.attachTiles(this, this.tilePrefabs, {
              frames: frames,
              gridW: this.gridW,
              gridH: this.gridH,
              screenW: this.uiTransform.width,
              screenH: this.uiTransform.height,
              maxTileScale: this.maxTileScale
            }); // ":t01t02t03t03t04:t05t06t05t07t08:t04t09i01t09t07:t10t02i01i01t06:t08t10i01i01t01"

            var parsedGrid = json.code.match(/([ti]\d{2})+/g);

            if (!parsedGrid || parsedGrid.length !== this.gridH) {
              throw new Error('Invalid grid code');
            } // flip the rows to match the grid's coordinate system


            parsedGrid.reverse();
            parsedGrid.forEach(function (row, y) {
              // ex: t01t02t03t03t04
              var parsedCol = row.match(/([ti]\d{2})/g);

              if (!parsedCol || parsedCol.length !== _this12.gridW) {
                throw new Error('Invalid grid code');
              } // if t, normal tile
              // if i, empty tile -> call setEmpty(undefined, true) on tile to set empty quietly


              parsedCol.forEach(function (tileCode, x) {
                var tile = _this12.getTileAt(x, y);

                if (!tile) {
                  throw new Error('Invalid grid code');
                }

                if (tileCode.startsWith('t')) {
                  var frameIndex = parseInt(tileCode.slice(1), 10);

                  if (frameIndex >= _this12.frames.length) {
                    throw new Error('Invalid grid code or insufficient theme. Not enough frames to satisfy grid.');
                  }

                  tile.setIdentity(_this12.frames[parseInt(tileCode.slice(1), 10)]);
                }

                if (tileCode.startsWith('i')) {
                  tile.setEmpty(undefined, true);
                }
              });
            }); // apply gravity
            // TODO: use event instead
            // this.gravityList = parseLevelGravity(this.levelManager.getLevelData().mode)

            this.node.scene.emit(GameplayEvents.APPLY_GRAVITY);
            this.node.emit(GridEvents.CREATE); // reset grid machine

            if (!this.gridMachine) {
              this.gridMachine = new GridMachine(new Idle(this));
            }

            this.gridMachine.updateState(new Idle(this));
            return new Promise(function (resolve) {
              _this12.syncTiles({
                easing: 'backOut',
                duration: 0.8,
                stagger: 0.2
              }).then(function () {
                resolve(_this12);
              });
            });
          }
        }, {
          key: "shuffleTiles",
          value: function shuffleTiles(config) {
            var _this13 = this;

            if (!this.gridMachine.awaitingInput()) {
              throw new Error('Cannot shuffle tiles when grid is not awaiting input');
            }

            var shuffleState = new Shuffle(this, _objectSpread2(_objectSpread2({}, config), {}, {
              grid: this
            }), true);
            return new Promise(function (resolve) {
              shuffleState.eventEmitter.on(ShuffleEvent.SHUFFLE_COMPLETE, function () {
                resolve();
              });

              _this13.gridMachine.updateState(shuffleState);
            });
          }
        }, {
          key: "isReady",
          value: function isReady() {
            return this.gridMachine.awaitingInput();
          }
        }, {
          key: "getNormalMatches",
          value: function getNormalMatches() {
            return this.normalMatches;
          }
        }, {
          key: "setNormalMatches",
          value: function setNormalMatches(value) {
            this.normalMatches = value;
          }
        }, {
          key: "getCleared",
          value: function getCleared() {
            return this.getTiles().filter(function (tile) {
              return tile.isTraversable();
            });
          }
        }, {
          key: "getUncleared",
          value: function getUncleared() {
            return this.getTiles().filter(function (tile) {
              return !tile.isTraversable();
            });
          }
        }, {
          key: "isHaveBombActive",
          value: function isHaveBombActive() {
            return this.getTiles().some(function (tile) {
              return !tile.isTraversable() && tile.getSpecialType() === 'bomb';
            });
          }
        }]);

        return Grid;
      }(Component), (_descriptor$d = _applyDecoratedDescriptor(_class2$f.prototype, "tilePrefabs", [_dec3$g], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$a = _applyDecoratedDescriptor(_class2$f.prototype, "gridW", [_dec4$9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3$7 = _applyDecoratedDescriptor(_class2$f.prototype, "gridH", [_dec5$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4$4 = _applyDecoratedDescriptor(_class2$f.prototype, "maxTileScale", [_dec6$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor5$4 = _applyDecoratedDescriptor(_class2$f.prototype, "tilesHolder", [_dec7$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$f)) || _class$q) || _class$q);

      cclegacy._RF.pop();

      var _dec$r, _class$r;

      cclegacy._RF.push({}, "c92ec8pmUJGbrL9PLjum+i5", "Line", undefined);

      var ccclass$r = _decorator.ccclass;
      var Line = (_dec$r = ccclass$r('Line'), _dec$r(_class$r = /*#__PURE__*/function (_Component) {
        _inherits(Line, _Component);

        var _super = _createSuper(Line);

        function Line() {
          _classCallCheck(this, Line);

          return _super.apply(this, arguments);
        }

        _createClass(Line, [{
          key: "onLoad",
          value: function onLoad() {
            this.uiTransform = this.getComponent(UITransform);
          }
        }, {
          key: "setPoints",
          value: function setPoints(a, b) {
            this.node.position = new Vec3((a.x + b.x) / 2, (a.y + b.y) / 2, 0);
            this.uiTransform.width = Vec2.distance(a, b) + 10;
            var angleRadians = Math.atan2(b.y - a.y, b.x - a.x);
            var angleDegree = angleRadians * 180 / Math.PI;
            this.node.eulerAngles = new Vec3(0, 0, angleDegree);
          }
        }]);

        return Line;
      }(Component)) || _class$r);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "1e7cch8i/5DkYHOwJowrjeg", "AFPool", undefined);

      var AFPool = /*#__PURE__*/function (_Pool) {
        _inherits(AFPool, _Pool);

        var _super = _createSuper(AFPool);
        /**
         * @en Constructor with the allocator of elements and initial pool size.
         * @zh 使用元素的构造器和初始大小的构造函数。
         * @param ctor @en The allocator of elements in pool, it's invoked directly without `new` in Pool.
         * @zh 元素的构造器，Pool 内部使用该构造器直接创建实例。
         * @param elementsPerBatch @en Initial pool size, this size will also be the incremental size when
         * the pool is overloaded.
         * @zh 对象池的初始大小。当对象池扩容时，也会使用该值。
         * @param dtor @en The finalizer of element, it's invoked when this Pool is destroyed or shrunk if
         * it is valid.
         * @zh 元素的析构器。如果存在的话，当对象池销毁或者缩容时，会使用该析构器。
         * @param ator The allocator of elements in pool, it's invoked when alloc object from the bool.
         * @param ftor The free of element, it's invoked when free the object
         */


        function AFPool(ctor, elementsPerBatch, ator, ftor, dtor) {
          var _this;

          _classCallCheck(this, AFPool);

          _this = _super.call(this, ctor, elementsPerBatch, dtor);
          _this.ator = ator;
          _this.ftor = ftor;
          return _this;
        }

        _createClass(AFPool, [{
          key: "alloc",
          value: function alloc() {
            var obj = _get(_getPrototypeOf(AFPool.prototype), "alloc", this).call(this);

            if (this.ator) this.ator(obj);
            return obj;
          }
        }, {
          key: "free",
          value: function free(obj) {
            if (this.ftor) this.ftor(obj);

            _get(_getPrototypeOf(AFPool.prototype), "free", this).call(this, obj);
          }
        }]);

        return AFPool;
      }(Pool);

      cclegacy._RF.pop();

      var _dec$s, _dec2$k, _dec3$h, _dec4$a, _dec5$7, _class$s, _class2$g, _descriptor$e, _descriptor2$b, _descriptor3$8, _descriptor4$5;

      cclegacy._RF.push({}, "6f7a1msxIxIbYLx5PpbL/BZ", "PathDrawer", undefined);

      var ccclass$s = _decorator.ccclass,
          property$g = _decorator.property;
      var PathDrawer = (_dec$s = ccclass$s('PathDrawer'), _dec2$k = property$g({
        group: 'Line',
        displayName: 'Prefab',
        type: Prefab
      }), _dec3$h = property$g({
        group: 'Line',
        displayName: 'Holder',
        type: Node$1,
        tooltip: 'Line Prefab'
      }), _dec4$a = property$g({
        group: 'Point',
        displayName: 'Prefab',
        type: Prefab
      }), _dec5$7 = property$g({
        group: 'Point',
        displayName: 'Holder',
        type: Node$1
      }), _dec$s(_class$s = (_class2$g = /*#__PURE__*/function (_Component) {
        _inherits(PathDrawer, _Component);

        var _super = _createSuper(PathDrawer);

        function PathDrawer() {
          var _this;

          _classCallCheck(this, PathDrawer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "linePrefab", _descriptor$e, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineHolder", _descriptor2$b, _assertThisInitialized(_this));

          _this.lineNodes = [];

          _initializerDefineProperty(_this, "pointPrefab", _descriptor3$8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pointHolder", _descriptor4$5, _assertThisInitialized(_this));

          _this.pointNodes = [];
          return _this;
        }

        _createClass(PathDrawer, [{
          key: "start",
          value: function start() {
            var _this2 = this;

            this.linePool = new AFPool(function () {
              var lineNode = instantiate(_this2.linePrefab);

              _this2.lineHolder.addChild(lineNode);

              lineNode.parent = _this2.lineHolder;
              lineNode.active = false;
              return lineNode;
            }, 0, function (lineNode) {
              _this2.lineNodes.push(lineNode);

              lineNode.active = true;
            }, function (lineNode) {
              lineNode.active = false;
            }, function (lineNode) {
              lineNode.destroy();
            });
            this.pointPool = new AFPool(function () {
              var pointNode = instantiate(_this2.pointPrefab);

              _this2.pointHolder.addChild(pointNode);

              pointNode.active = false;
              return pointNode;
            }, 0, function (pointNode) {
              _this2.pointNodes.push(pointNode);

              pointNode.active = true;
            }, function (pointNode) {
              pointNode.active = false;
            }, function (pointNode) {
              pointNode.destroy();
            });
          }
        }, {
          key: "drawPath",
          value: function drawPath(path) {
            this.clearPath();

            var _iterator = _createForOfIteratorHelper(path),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _lineNode$getComponen;

                var line = _step.value;
                var lineNode = this.linePool.alloc();
                (_lineNode$getComponen = lineNode.getComponent(Line)) === null || _lineNode$getComponen === void 0 ? void 0 : _lineNode$getComponen.setPoints(line.a, line.b);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }, {
          key: "clearPath",
          value: function clearPath() {
            var _iterator2 = _createForOfIteratorHelper(this.lineNodes),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var lineNode = _step2.value;
                this.linePool.free(lineNode);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            this.lineNodes = [];

            var _iterator3 = _createForOfIteratorHelper(this.pointNodes),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var pointNodes = _step3.value;
                this.pointPool.free(pointNodes);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            this.pointNodes = [];
          }
        }]);

        return PathDrawer;
      }(Component), (_descriptor$e = _applyDecoratedDescriptor(_class2$g.prototype, "linePrefab", [_dec2$k], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$b = _applyDecoratedDescriptor(_class2$g.prototype, "lineHolder", [_dec3$h], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$8 = _applyDecoratedDescriptor(_class2$g.prototype, "pointPrefab", [_dec4$a], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$5 = _applyDecoratedDescriptor(_class2$g.prototype, "pointHolder", [_dec5$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$g)) || _class$s);

      cclegacy._RF.pop();

      var _dec$t, _class$t;

      cclegacy._RF.push({}, "880e8aL9NFPj68zH2xVRIFR", "HintDrawer", undefined);

      var ccclass$t = _decorator.ccclass;
      var HintDrawer = (_dec$t = ccclass$t('HintDrawer'), _dec$t(_class$t = /*#__PURE__*/function (_PathDrawer) {
        _inherits(HintDrawer, _PathDrawer);

        var _super = _createSuper(HintDrawer);

        function HintDrawer() {
          _classCallCheck(this, HintDrawer);

          return _super.apply(this, arguments);
        }

        _createClass(HintDrawer, [{
          key: "drawPath",
          value: function drawPath(path) {
            this.clearPath();
            this.createPath(path);
            this.showPath();
          }
        }, {
          key: "createPath",
          value: function createPath(path) {
            var _this = this;

            path.forEach(function (line) {
              var _lineNode$getComponen;

              var lineNode = _this.linePool.alloc();

              (_lineNode$getComponen = lineNode.getComponent(Line)) === null || _lineNode$getComponen === void 0 ? void 0 : _lineNode$getComponen.setPoints(line.a, line.b);

              var pointNode = _this.pointPool.alloc();

              pointNode.setPosition(new Vec3(line.a.x, line.a.y, 0));
            });
            var pointNode = this.pointPool.alloc();
            pointNode.setPosition(new Vec3(path[path.length - 1].b.x, path[path.length - 1].b.y, 0));
          }
        }, {
          key: "showPath",
          value: function showPath() {
            var _iterator = _createForOfIteratorHelper(this.lineNodes),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var lineNode = _step.value;
                var lineOpacity = lineNode.getComponent(UIOpacity);
                lineOpacity.opacity = 0;
                tween(lineOpacity).to(0.2, {
                  opacity: 255
                }, {
                  easing: 'quadOut'
                }).start();
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            var _iterator2 = _createForOfIteratorHelper(this.pointNodes),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var pointNode = _step2.value;
                var pointOpacity = pointNode.getComponent(UIOpacity);
                pointOpacity.opacity = 0;
                tween(pointOpacity).to(0.2, {
                  opacity: 255
                }, {
                  easing: 'quadOut'
                }).start();
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }, {
          key: "clearPath",
          value: function clearPath() {
            var _this2 = this;

            var _iterator3 = _createForOfIteratorHelper(this.lineNodes),
                _step3;

            try {
              var _loop = function _loop() {
                var lineNode = _step3.value;
                var lineOpacity = lineNode.getComponent(UIOpacity);
                tween(lineOpacity).to(0.15, {
                  opacity: 0
                }, {
                  onComplete: function onComplete() {
                    lineOpacity.opacity = 255;

                    _this2.linePool.free(lineNode);
                  }
                }).start();
              };

              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            var _iterator4 = _createForOfIteratorHelper(this.pointNodes),
                _step4;

            try {
              var _loop2 = function _loop2() {
                var point = _step4.value;
                var pointOpacity = point.getComponent(UIOpacity);
                tween(pointOpacity).to(0.15, {
                  opacity: 0
                }, {
                  onComplete: function onComplete() {
                    pointOpacity.opacity = 255;

                    _this2.pointPool.free(point);
                  }
                }).start();
              };

              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                _loop2();
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            this.lineNodes = [];
            this.pointNodes = [];
          }
        }]);

        return HintDrawer;
      }(PathDrawer)) || _class$t);

      cclegacy._RF.pop();

      var _dec$u, _class$u;

      cclegacy._RF.push({}, "25f67BW5/5Jzox4v+yBBbyS", "MatchDrawer", undefined);

      var ccclass$u = _decorator.ccclass;
      var MatchDrawer = (_dec$u = ccclass$u('MatchDrawer'), _dec$u(_class$u = /*#__PURE__*/function (_PathDrawer) {
        _inherits(MatchDrawer, _PathDrawer);

        var _super = _createSuper(MatchDrawer);

        function MatchDrawer() {
          _classCallCheck(this, MatchDrawer);

          return _super.apply(this, arguments);
        }

        _createClass(MatchDrawer, [{
          key: "drawPath",
          value: function drawPath(path) {
            var _this = this;

            this.clearPath();
            path.forEach(function (line) {
              var _lineNode$getComponen;

              var lineNode = _this.linePool.alloc();

              (_lineNode$getComponen = lineNode.getComponent(Line)) === null || _lineNode$getComponen === void 0 ? void 0 : _lineNode$getComponen.setPoints(line.a, line.b);

              var pointNode = _this.pointPool.alloc();

              pointNode.setPosition(new Vec3(line.a.x, line.a.y, 0));
            });
            var pointNode = this.pointPool.alloc();
            pointNode.setPosition(new Vec3(path[path.length - 1].b.x, path[path.length - 1].b.y, 0));
            this.showPath().then(function () {
              _this.scheduleOnce(function () {
                _this.clearPath();
              }, 0.1);
            });
          }
        }, {
          key: "showPath",
          value: function showPath() {
            var _this2 = this;

            return new Promise(function (resolve) {
              var _iterator = _createForOfIteratorHelper(_this2.lineNodes),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var lineNode = _step.value;
                  var lineOpacity = lineNode.getComponent(UIOpacity);
                  lineOpacity.opacity = 0;
                  tween(lineOpacity).to(0.25, {
                    opacity: 255
                  }, {
                    easing: 'quadOut'
                  }).start();
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              var pointPromises = [];

              _this2.pointNodes.forEach(function (pointNode, index) {
                pointPromises.push(_this2.animatePointNode(pointNode, index));
              });

              Promise.all(pointPromises).then(function () {
                resolve();
              });
            });
          }
        }, {
          key: "animatePointNode",
          value: function animatePointNode(pointNode, index) {
            return new Promise(function (resolve) {
              pointNode.scale = Vec3.ZERO;
              tween(pointNode).delay(0.03 * index).to(0.2, {
                scale: Vec3.ONE
              }, {
                easing: 'quadOut',
                onComplete: function onComplete() {
                  return resolve();
                }
              }).start();
            });
          }
        }, {
          key: "clearPath",
          value: function clearPath() {
            var _this3 = this;

            var _iterator2 = _createForOfIteratorHelper(this.lineNodes),
                _step2;

            try {
              var _loop = function _loop() {
                var lineNode = _step2.value;
                var lineOpacity = lineNode.getComponent(UIOpacity);
                tween(lineOpacity).to(0.2, {
                  opacity: 0
                }, {
                  onComplete: function onComplete() {
                    lineOpacity.opacity = 255;

                    _this3.linePool.free(lineNode);
                  }
                }).start();
              };

              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            var _iterator3 = _createForOfIteratorHelper(this.pointNodes),
                _step3;

            try {
              var _loop2 = function _loop2() {
                var point = _step3.value;
                tween(point).to(0.2, {
                  scale: Vec3.ZERO
                }, {
                  easing: 'backIn',
                  onComplete: function onComplete() {
                    _this3.pointPool.free(point);
                  }
                }).start();
              };

              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                _loop2();
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            this.lineNodes = [];
            this.pointNodes = [];
          }
        }]);

        return MatchDrawer;
      }(PathDrawer)) || _class$u);

      cclegacy._RF.pop();

      var _dec$v, _dec2$l, _dec3$i, _dec4$b, _class$v, _class2$h, _descriptor$f, _descriptor2$c, _descriptor3$9;

      cclegacy._RF.push({}, "bfdf2THr9lPJ4TOVDN8VgE4", "PathDraw", undefined);

      var ccclass$v = _decorator.ccclass,
          property$h = _decorator.property;
      var PathDraw = (_dec$v = ccclass$v('PathDraw'), _dec2$l = property$h(Grid), _dec3$i = property$h({
        group: {
          name: 'Path Drawer'
        },
        type: MatchDrawer
      }), _dec4$b = property$h({
        group: {
          name: 'Path Drawer'
        },
        type: HintDrawer
      }), _dec$v(_class$v = (_class2$h = /*#__PURE__*/function (_Component) {
        _inherits(PathDraw, _Component);

        var _super = _createSuper(PathDraw);

        function PathDraw() {
          var _this;

          _classCallCheck(this, PathDraw);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "grid", _descriptor$f, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "matchPath", _descriptor2$c, _assertThisInitialized(_this)); // ! this is not working
          // @property({ group: { name: 'Path Drawer' }, type: ErrorDrawer })
          // private errorPath!: ErrorDrawer


          _initializerDefineProperty(_this, "hintPath", _descriptor3$9, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(PathDraw, [{
          key: "drawMatchPath",
          value: function drawMatchPath(path) {
            // clone path to avoid modifying the original path
            path = path.map(function (line) {
              return _objectSpread2({}, line);
            });

            var _iterator = _createForOfIteratorHelper(path),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var line = _step.value;
                line.a = this.grid.toWorldPosition(line.a);
                line.b = this.grid.toWorldPosition(line.b);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            this.matchPath.drawPath(path);
          }
        }, {
          key: "clearMatchPath",
          value: function clearMatchPath() {
            this.matchPath.clearPath();
          }
        }, {
          key: "drawHintPath",
          value: function drawHintPath(path) {
            // clone path to avoid modifying the original path
            path = path.map(function (line) {
              return _objectSpread2({}, line);
            });

            var _iterator2 = _createForOfIteratorHelper(path),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var line = _step2.value;
                line.a = this.grid.toWorldPosition(line.a);
                line.b = this.grid.toWorldPosition(line.b);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            this.hintPath.drawPath(path);
          }
        }, {
          key: "drawErrorPath",
          value: function drawErrorPath(path) {
            // clone path to avoid modifying the original path
            path = path.map(function (line) {
              return _objectSpread2({}, line);
            });

            var _iterator3 = _createForOfIteratorHelper(path),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var line = _step3.value;
                line.a = this.grid.toWorldPosition(line.a);
                line.b = this.grid.toWorldPosition(line.b);
              } // ! this is not working
              // this.errorPath.drawPath(path)

            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }, {
          key: "clearHintPath",
          value: function clearHintPath() {
            this.hintPath.clearPath();
          }
        }, {
          key: "getDirection",
          value: function getDirection(line) {
            if (line.a === line.b) return null;

            if (line.a.x === line.b.x) {
              return line.a.y < line.b.y ? Direction.Up : Direction.Down;
            }

            if (line.a.y === line.b.y) {
              return line.a.x < line.b.x ? Direction.Right : Direction.Left;
            }

            return null;
          }
        }]);

        return PathDraw;
      }(Component), (_descriptor$f = _applyDecoratedDescriptor(_class2$h.prototype, "grid", [_dec2$l], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$c = _applyDecoratedDescriptor(_class2$h.prototype, "matchPath", [_dec3$i], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$9 = _applyDecoratedDescriptor(_class2$h.prototype, "hintPath", [_dec4$b], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$h)) || _class$v);

      cclegacy._RF.pop();

      var _dec$w, _class$w;

      cclegacy._RF.push({}, "8a5c3m7o41LNqGBKPo0oqf1", "CoinManager", undefined);

      var ccclass$w = _decorator.ccclass;
      var player$3 = globalThis.game.player;
      var MAX_COINS = 999999999;
      var CoinManager = (_dec$w = ccclass$w('CoinManager'), _dec$w(_class$w = /*#__PURE__*/function (_Component) {
        _inherits(CoinManager, _Component);

        var _super = _createSuper(CoinManager);

        function CoinManager() {
          var _this;

          _classCallCheck(this, CoinManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.coins = 0;
          return _this;
        }

        _createClass(CoinManager, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
            this.getCoinsFromPlayerData();
            this.listenToCoinEvents();
          }
        }, {
          key: "init",
          value: function init() {
            this.updateCoins();
          }
        }, {
          key: "listenToCoinEvents",
          value: function listenToCoinEvents() {
            this.node.scene.on(GameplayEvents.ADD_COINS, this.addCoins, this);
            this.node.scene.on(GameplayEvents.REMOVE_COINS, this.removeCoins, this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {//
          }
        }, {
          key: "getCoinsFromPlayerData",
          value: function getCoinsFromPlayerData() {
            var gameData = player$3.getGameData();

            if (!gameData) {
              this.coins = 0;
              return;
            }

            this.coins = gameData.coins;
          }
        }, {
          key: "getCoins",
          value: function getCoins() {
            return this.coins;
          }
        }, {
          key: "updateCoins",
          value: function updateCoins() {
            if (this.coins > MAX_COINS) {
              this.coins = MAX_COINS;
            }

            player$3.setGameData({
              coins: this.coins
            });
            this.node.scene.emit(GameplayEvents.COIN_CHANGED, {
              coins: this.coins,
              displayString: CoinManager.getCoinDisplayString(this.coins)
            });
          }
        }, {
          key: "addCoins",
          value: function addCoins(coins) {
            this.coins += coins;
            this.updateCoins();
          }
        }, {
          key: "removeCoins",
          value: function removeCoins(coins) {
            if (this.coins < coins) {
              this.node.scene.emit(GameplayEvents.REMOVE_COINS_FAILED);
              return;
            }

            this.coins -= coins;
            this.updateCoins();
            this.node.scene.emit(GameplayEvents.REMOVE_COINS_SUCCESS);
          }
        }], [{
          key: "getCoinDisplayString",
          value: function getCoinDisplayString(coins) {
            if (coins < 1000) {
              return coins.toString();
            }

            var shortened = coins;
            var coinSuffixCount = 0;

            while (shortened >= 1000) {
              shortened = Math.floor(shortened / 1000);
              coinSuffixCount++;
            }

            var coinPrefix = shortened.toString();

            switch (coinSuffixCount) {
              case 1:
                return "".concat(coinPrefix, "K");

              default:
                return "".concat(coinPrefix, "M");
              // case 3:
              //     return `${coinPrefix}B`
              // case 4:
              //     return `${coinPrefix}T`
              // case 5:
              //     return `${coinPrefix}Q`
            }
          }
        }]);

        return CoinManager;
      }(Component)) || _class$w);

      cclegacy._RF.pop();

      var _dec$x, _class$x;

      cclegacy._RF.push({}, "3afb9sM0KZKyod8UtofqZYu", "ComboManager", undefined);

      var ccclass$x = _decorator.ccclass,
          property$i = _decorator.property;
      var ComboManager = (_dec$x = ccclass$x('ComboManager'), _dec$x(_class$x = /*#__PURE__*/function (_Component) {
        _inherits(ComboManager, _Component);

        var _super = _createSuper(ComboManager);

        function ComboManager() {
          _classCallCheck(this, ComboManager);

          return _super.apply(this, arguments);
        }

        _createClass(ComboManager, [{
          key: "start",
          value: function start() {
            this.setCombo(0);
            this.node.scene.on(GameplayEvents.COMBO_ENDED, this.resetCombo, this);
            this.node.scene.on(GameplayEvents.GAME_FINISH, this.resetCombo, this);
            this.node.scene.on(GameplayEvents.GAME_REPLAY, this.resetCombo, this);
          }
        }, {
          key: "addCombo",
          value: function addCombo() {
            this.setCombo(this.currentCombo + 1);
          }
        }, {
          key: "resetCombo",
          value: function resetCombo() {
            this.setCombo(0);
          }
        }, {
          key: "getCombo",
          value: function getCombo() {
            return this.currentCombo;
          }
        }, {
          key: "setCombo",
          value: function setCombo(combo) {
            this.currentCombo = combo;

            if (combo > 0 && combo < 5) {
              var sounds = [CodeSoundKeys.COMBO_1, CodeSoundKeys.COMBO_2, CodeSoundKeys.COMBO_3, CodeSoundKeys.COMBO_4, CodeSoundKeys.COMBO_5];
              GeneralUtils.playSound(sounds[combo]);
            } else if (combo >= 5) {
              GeneralUtils.playSound(CodeSoundKeys.COMBO_5);
            }

            if (combo > 0) {
              this.vibrate(combo);
            }

            this.node.scene.emit(GameplayEvents.COMBO_UPDATED, combo);
          }
        }, {
          key: "vibrate",
          value: function vibrate(combo) {
            var _find, _find$getComponent;

            (_find = find('Vibrate')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Vibrate)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.vibrate(Math.min(20 + combo * 20, 11 * 20));
          }
        }]);

        return ComboManager;
      }(Component)) || _class$x);

      cclegacy._RF.pop();

      var _dec$y, _dec2$m, _class$y;

      cclegacy._RF.push({}, "f3521L4Mn5I3bhxr0QZJ9y9", "BackgroundMask", undefined);

      var ccclass$y = _decorator.ccclass,
          requireComponent$c = _decorator.requireComponent;

      var changeElementMaskAlpha = function changeElementMaskAlpha(alpha) {
        var appMask = document.getElementById('app-mask');
        if (!appMask) return;
        appMask.style.background = "rgb(0 0 0 / ".concat(alpha, ")");
      };
      /**
       * Yandex only
       */


      var BackgroundMask = (_dec$y = ccclass$y('BackgroundMask'), _dec2$m = requireComponent$c([UIOpacity]), _dec$y(_class$y = _dec2$m(_class$y = /*#__PURE__*/function (_Component) {
        _inherits(BackgroundMask, _Component);

        var _super = _createSuper(BackgroundMask);

        function BackgroundMask() {
          _classCallCheck(this, BackgroundMask);

          return _super.apply(this, arguments);
        }

        _createClass(BackgroundMask, [{
          key: "onLoad",
          value: function onLoad() {
            var opacity = this.getComponent(UIOpacity);

            if (!opacity) {
              console.warn('BackgroundMask: UIOpacity not found');
              return;
            }

            this.opacity = opacity;
            this.updateMaskAlpha();
          }
        }, {
          key: "updateMaskAlpha",
          value: function updateMaskAlpha() {
            var nodeAlpha = this.opacity.opacity / 255;
            changeElementMaskAlpha(nodeAlpha);
          }
        }]);

        return BackgroundMask;
      }(Component)) || _class$y) || _class$y);

      cclegacy._RF.pop();

      var _dec$z, _dec2$n, _dec3$j, _dec4$c, _dec5$8, _dec6$6, _dec7$5, _dec8$4, _dec9$4, _dec10$3, _dec11$2, _class$z, _class2$i, _descriptor$g, _descriptor2$d, _descriptor3$a, _descriptor4$6, _descriptor5$5, _descriptor6$4, _descriptor7$4, _descriptor8$3, _descriptor9$2, _descriptor10$1;

      cclegacy._RF.push({}, "2913d3KShhIEaPfSLUhFqvA", "EffectManager", undefined);

      var ccclass$z = _decorator.ccclass,
          property$j = _decorator.property;
      var EffectManager = (_dec$z = ccclass$z('EffectManager'), _dec2$n = property$j({
        group: 'Thunder Effect',
        type: Node$1
      }), _dec3$j = property$j({
        group: 'Thunder Effect',
        type: Node$1
      }), _dec4$c = property$j({
        group: 'Mask Effect',
        type: BackgroundMask
      }), _dec5$8 = property$j({
        group: 'Mask Effect',
        type: Node$1
      }), _dec6$6 = property$j({
        group: 'Tornado Effect',
        type: Node$1
      }), _dec7$5 = property$j({
        group: 'Bomb Effect',
        type: Prefab
      }), _dec8$4 = property$j({
        group: 'Bomb Effect',
        type: Prefab
      }), _dec9$4 = property$j({
        group: 'Bomb Effect',
        type: Node$1
      }), _dec10$3 = property$j({
        group: 'Clear Particle Effect',
        type: ParticleSystem2D,
        displayName: 'Tile 1'
      }), _dec11$2 = property$j({
        group: 'Clear Particle Effect',
        type: ParticleSystem2D,
        displayName: 'Tile 2'
      }), _dec$z(_class$z = (_class2$i = /*#__PURE__*/function (_Component) {
        _inherits(EffectManager, _Component);

        var _super = _createSuper(EffectManager);

        function EffectManager() {
          var _this;

          _classCallCheck(this, EffectManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "cloud", _descriptor$g, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lightnings", _descriptor2$d, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backgroundMask", _descriptor3$a, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "masks", _descriptor4$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tornado", _descriptor5$5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bombExplosion", _descriptor6$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defuseExplosion", _descriptor7$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gridNode", _descriptor8$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clearParticle1", _descriptor9$2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clearParticle2", _descriptor10$1, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(EffectManager, [{
          key: "__preload",
          value: function __preload() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.cloud) {
              throw new Error('EffectManager: cloud is not assigned!');
            }

            if (!this.lightnings || this.lightnings.length === 0) {
              throw new Error('EffectManager: lightning is not assigned!');
            }

            if (!this.backgroundMask) {
              throw new Error('EffectManager: backgroundMask is not assigned!');
            }

            if (!this.masks || this.masks.length === 0) {
              throw new Error('EffectManager: masks is not assigned!');
            }

            if (!this.tornado) {
              throw new Error('EffectManager: tornado is not assigned!');
            }

            if (!this.bombExplosion) {
              throw new Error('EffectManager: bombExplosion is not assigned!');
            }

            if (!this.defuseExplosion) {
              throw new Error('EffectManager: defuseExplosion is not assigned!');
            }
          }
        }, {
          key: "start",
          value: function start() {
            this.bombExplosionPool = new AFPool(this.createBombExplosion.bind(this), 1, BombExplosion.getBombExplosion, BombExplosion.returnBombExplosion, BombExplosion.destroyBombExplosion);
            this.defuseExplosionPool = new AFPool(this.createDefuseExplosion.bind(this), 1, DefuseExplosion.getBombDefuseExplosion, DefuseExplosion.returnBombDefuseExplosion, DefuseExplosion.destroyBombDefuseExplosion);
          }
        }, {
          key: "playClearFXAt",
          value: function playClearFXAt(positions) {
            this.clearParticle1.node.setWorldPosition(new Vec3(positions[0].x, positions[0].y, 0));
            this.clearParticle2.node.setWorldPosition(new Vec3(positions[1].x, positions[1].y, 0));
            this.clearParticle1.resetSystem();
            this.clearParticle2.resetSystem();
          }
        }, {
          key: "playTornadoAnimation",
          value: function playTornadoAnimation() {
            this.tornado.active = true;
            var t = tween(this.tornado);
            t.set({
              scale: new Vec3(0, 0, 0)
            });
            t.delay(0.5);
            t.to(0.5, {
              scale: new Vec3(1, 1, 1)
            }, {
              easing: 'quadOut'
            });
            t.to(0.5, {
              scale: new Vec3(0, 0, 0)
            }, {
              easing: 'quadIn'
            });
            t.set({
              active: false
            });
            return AnimUtils.runTweenAsync(t);
          }
        }, {
          key: "shakeGame",
          value: function () {
            var _shakeGame = _asyncToGenerator(function* () {
              var defaultPos = this.node.position.clone();
              var shakeTween = tween(this.node).to(0.05, {
                position: defaultPos.clone().add3f(randomRange(5, 10), randomRange(5, 10), 0)
              }).to(0.05, {
                position: defaultPos.clone().subtract3f(randomRange(5, 10), randomRange(5, 10), 0)
              }).to(0.05, {
                position: defaultPos
              });
              yield AnimUtils.runTweenAsync(shakeTween);
            });

            function shakeGame() {
              return _shakeGame.apply(this, arguments);
            }

            return shakeGame;
          }()
        }, {
          key: "playThunderAnimation",
          value: function () {
            var _playThunderAnimation = _asyncToGenerator(function* (pairs, grid) {
              var _this2 = this;

              this.cloud.active = true;
              var screenWidth = CocosUtils.getScreenWidthCss();
              var screenHeight = CocosUtils.getScreenHeightCss();
              var direction = Math.floor(Math.random() * 4);
              var initialX, initialY;

              switch (direction) {
                case 0:
                  // Top
                  initialX = Math.random() * screenWidth - screenWidth / 2;
                  initialY = screenHeight / 2 + 300;
                  break;

                case 1:
                  // Bottom
                  initialX = Math.random() * screenWidth - screenWidth / 2;
                  initialY = -screenHeight / 2 - 300;
                  break;

                case 2:
                  // Left
                  initialX = -screenWidth / 2 - 300;
                  initialY = Math.random() * screenHeight - screenHeight / 2;
                  break;

                case 3:
                  // Right
                  initialX = screenWidth / 2 + 300;
                  initialY = Math.random() * screenHeight - screenHeight / 2;
                  break;

                default:
                  initialX = 0;
                  initialY = 0;
                  break;
              }

              this.cloud.position = new Vec3(initialX, initialY);
              this.resetMasks();
              this.setMaskProperties(0, pairs[0][0].node.worldPosition, pairs[0][0].node.worldScale);
              this.setMaskProperties(1, pairs[0][1].node.worldPosition, pairs[0][1].node.worldScale);
              this.setMaskProperties(2, pairs[1][0].node.worldPosition, pairs[1][0].node.worldScale);
              this.setMaskProperties(3, pairs[1][1].node.worldPosition, pairs[1][1].node.worldScale);
              this.backgroundMask.node.active = true;
              this.backgroundMask.getComponent(Widget).updateAlignment();
              yield this.setBackgroundMaskOpacity(130);
              var cloudTween = tween(this.cloud).to(0.8, {
                position: new Vec3(0, 300)
              }, {
                easing: 'quadOut'
              });
              yield AnimUtils.runTweenAsync(cloudTween);
              return new Promise(function (resolve) {
                var _find, _find$getComponent;

                (_find = find('Vibrate')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Vibrate)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.vibrate(500);
                var tile1Position = pairs[0][0].node.worldPosition.clone();
                var tile2Position = pairs[0][1].node.worldPosition.clone();
                var tile4Position = pairs[1][1].node.worldPosition.clone();
                var tile3Position = pairs[1][0].node.worldPosition.clone();

                _this2.shakeGame();

                GeneralUtils.playSound(CodeSoundKeys.THUNDERBOLT);

                _this2.playLightningAnimation(tile1Position, 0);

                _this2.playLightningAnimation(tile2Position, 1).then(function () {
                  var _find2, _find2$getComponent;

                  _this2.shakeGame();

                  GeneralUtils.playSound(CodeSoundKeys.THUNDERBOLT);
                  (_find2 = find('Vibrate')) === null || _find2 === void 0 ? void 0 : (_find2$getComponent = _find2.getComponent(Vibrate)) === null || _find2$getComponent === void 0 ? void 0 : _find2$getComponent.vibrate(500);

                  _this2.playLightningAnimation(tile3Position, 0);

                  _this2.playLightningAnimation(tile4Position, 1).then(function () {
                    _this2.cloud.active = false;

                    _this2.setBackgroundMaskOpacity(0).then(function () {
                      _this2.backgroundMask.node.active = false;
                      resolve();
                    });
                  });
                });

                grid.clearTilesAt(pairs, 'break');
              });
            });

            function playThunderAnimation(_x, _x2) {
              return _playThunderAnimation.apply(this, arguments);
            }

            return playThunderAnimation;
          }()
        }, {
          key: "playLightningAnimation",
          value: function playLightningAnimation(position, index) {
            var _this3 = this;

            var lightning = this.lightnings[index];
            var direction = position.subtract(lightning.worldPosition);
            var angle = Math.atan2(direction.y, direction.x) * (180 / Math.PI) + 180;
            var distance = direction.length();
            lightning.getComponent(UITransform).width = distance;
            lightning.angle = angle;
            return new Promise(function (resolve) {
              lightning.active = true;

              _this3.scheduleOnce(function () {
                lightning.active = false;
                resolve();
              }, 0.2);
            });
          }
        }, {
          key: "setBackgroundMaskOpacity",
          value: function setBackgroundMaskOpacity(opacity) {
            var _this4 = this;

            return new Promise(function (resolve) {
              tween(_this4.backgroundMask.getComponent(UIOpacity)).to(0.25, {
                opacity: opacity
              }, {
                onComplete: function onComplete() {
                  resolve();
                }
              }).start();
            });
          }
        }, {
          key: "resetMasks",
          value: function resetMasks() {
            this.masks.forEach(function (mask) {
              mask.worldPosition = new Vec3(-9999, -9999, 0);
            });
          }
        }, {
          key: "setMaskProperties",
          value: function setMaskProperties(index, position, scale) {
            if (scale) {
              this.masks[index].worldScale = scale;
            }

            this.masks[index].worldPosition = position;
          }
        }, {
          key: "createDefuseExplosionAt",
          value: function createDefuseExplosionAt(position) {
            var _this5 = this;

            var defuseExplosion = this.defuseExplosionPool.alloc();
            defuseExplosion.setPosition(position);
            var anim = defuseExplosion.getComponent(Animation);
            return new Promise(function (resolve) {
              anim.once(Animation.EventType.FINISHED, function () {
                _this5.defuseExplosionPool.free(defuseExplosion);

                resolve();
              });
              anim.play();
            });
          }
        }, {
          key: "createBombExplosionAt",
          value: function createBombExplosionAt(position) {
            var _this6 = this;

            var bombExplosion = this.bombExplosionPool.alloc();
            bombExplosion.setPosition(position);
            var anim = bombExplosion.getComponent(Animation);
            return new Promise(function (resolve) {
              anim.once(Animation.EventType.FINISHED, function () {
                _this6.bombExplosionPool.free(bombExplosion);

                resolve();
              });
              anim.play();
            });
          }
        }, {
          key: "createDefuseExplosion",
          value: function createDefuseExplosion() {
            return DefuseExplosion.createDefuseExplosion(this.defuseExplosion, this.gridNode);
          }
        }, {
          key: "createBombExplosion",
          value: function createBombExplosion() {
            return BombExplosion.createBombExplosion(this.bombExplosion, this.gridNode);
          }
        }]);

        return EffectManager;
      }(Component), (_descriptor$g = _applyDecoratedDescriptor(_class2$i.prototype, "cloud", [_dec2$n], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$d = _applyDecoratedDescriptor(_class2$i.prototype, "lightnings", [_dec3$j], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3$a = _applyDecoratedDescriptor(_class2$i.prototype, "backgroundMask", [_dec4$c], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$6 = _applyDecoratedDescriptor(_class2$i.prototype, "masks", [_dec5$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5$5 = _applyDecoratedDescriptor(_class2$i.prototype, "tornado", [_dec6$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$4 = _applyDecoratedDescriptor(_class2$i.prototype, "bombExplosion", [_dec7$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7$4 = _applyDecoratedDescriptor(_class2$i.prototype, "defuseExplosion", [_dec8$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8$3 = _applyDecoratedDescriptor(_class2$i.prototype, "gridNode", [_dec9$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9$2 = _applyDecoratedDescriptor(_class2$i.prototype, "clearParticle1", [_dec10$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10$1 = _applyDecoratedDescriptor(_class2$i.prototype, "clearParticle2", [_dec11$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$i)) || _class$z);

      var DefuseExplosion = /*#__PURE__*/function () {
        function DefuseExplosion() {
          _classCallCheck(this, DefuseExplosion);
        }

        _createClass(DefuseExplosion, null, [{
          key: "createDefuseExplosion",
          value: function createDefuseExplosion(bombDefuseExplosionPrefab, parent) {
            var bombDefuseExplosion = instantiate(bombDefuseExplosionPrefab);
            parent.addChild(bombDefuseExplosion);
            bombDefuseExplosion.active = false;
            return bombDefuseExplosion;
          }
        }, {
          key: "destroyBombDefuseExplosion",
          value: function destroyBombDefuseExplosion(node) {
            node.destroy();
          }
        }, {
          key: "getBombDefuseExplosion",
          value: function getBombDefuseExplosion(node) {
            node.active = true;
          }
        }, {
          key: "returnBombDefuseExplosion",
          value: function returnBombDefuseExplosion(node) {
            node.active = false;
          }
        }]);

        return DefuseExplosion;
      }();

      var BombExplosion = /*#__PURE__*/function () {
        function BombExplosion() {
          _classCallCheck(this, BombExplosion);
        }

        _createClass(BombExplosion, null, [{
          key: "createBombExplosion",
          value: function createBombExplosion(bombExplosionPrefab, parent) {
            var bombExplosion = instantiate(bombExplosionPrefab);
            parent.addChild(bombExplosion);
            bombExplosion.active = false;
            return bombExplosion;
          }
        }, {
          key: "destroyBombExplosion",
          value: function destroyBombExplosion(node) {
            node.destroy();
          }
        }, {
          key: "getBombExplosion",
          value: function getBombExplosion(node) {
            node.active = true;
          }
        }, {
          key: "returnBombExplosion",
          value: function returnBombExplosion(node) {
            node.active = false;
          }
        }]);

        return BombExplosion;
      }();

      cclegacy._RF.pop();

      var _dec$A, _dec2$o, _dec3$k, _dec4$d, _dec5$9, _dec6$7, _dec7$6, _class$A, _class2$j, _descriptor$h, _descriptor2$e, _descriptor3$b, _descriptor4$7, _descriptor5$6, _descriptor6$5;

      cclegacy._RF.push({}, "c3d9fl9+INO3ac7Q2zvmRKy", "SpecialItem", undefined);

      var ccclass$A = _decorator.ccclass,
          property$k = _decorator.property;
      var SpecialItem = (_dec$A = ccclass$A('SpecialItem'), _dec2$o = property$k({
        editorOnly: true,
        tooltip: 'A debug button has infinite quantity'
      }), _dec3$k = property$k({
        type: Button,
        tooltip: 'The button that activates the item'
      }), _dec4$d = property$k({
        type: CCInteger,
        group: 'Quantity',
        tooltip: 'The starting quantity of the item',
        displayName: 'Quantity'
      }), _dec5$9 = property$k({
        type: Label,
        group: 'Quantity',
        tooltip: 'The label that shows the quantity',
        displayName: 'Label'
      }), _dec6$7 = property$k({
        type: Node$1,
        group: 'Quantity',
        tooltip: 'The node that shows the quantity of the item',
        displayName: 'Quantity node'
      }), _dec7$6 = property$k({
        type: Node$1,
        group: 'Quantity',
        tooltip: 'The node that shows the plus icon when there is no item',
        displayName: 'Plus node'
      }), _dec$A(_class$A = (_class2$j = /*#__PURE__*/function (_Component) {
        _inherits(SpecialItem, _Component);

        var _super = _createSuper(SpecialItem);

        function SpecialItem() {
          var _this;

          _classCallCheck(this, SpecialItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "isDevButton", _descriptor$h, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "button", _descriptor2$e, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantity", _descriptor3$b, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantityLabel", _descriptor4$7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantityNode", _descriptor5$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "plusNode", _descriptor6$5, _assertThisInitialized(_this));

          _this.requestItem = null;
          _this.loadQuantity = null;
          _this.saveQuantity = null;
          return _this;
        }

        _createClass(SpecialItem, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "init",
          value: function init(_gameplay) {// Override this method
          }
        }, {
          key: "start",
          value: function start() {
            var quantity = this.loadQuantity();
            this.setQuantity(quantity);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.button) {
              throw new Error('Item: Button component not found');
            }

            if (!this.quantityLabel) {
              throw new Error('Item: Quantity label not found');
            }

            if (!this.plusNode) {
              throw new Error('Item: Plus node not found');
            }

            if (!this.quantityNode) {
              throw new Error('Item: Quantity node not found');
            }

            if (this.requestItem === null) {
              throw new Error('Item: requestItem function not found');
            }

            if (this.loadQuantity === null) {
              throw new Error('Item: loadQuantity function not found');
            }

            if (this.saveQuantity === null) {
              throw new Error('Item: saveQuantity function not found');
            }
          }
        }, {
          key: "applyActivationStatus",
          value: function () {
            var _applyActivationStatus = _asyncToGenerator(function* () {
              var _this2 = this;

              var canActivate = this.canActivate();
              var uiOpacity = this.button.getComponent(UIOpacity);

              if (uiOpacity === null || uiOpacity === undefined) {
                this.button.interactable = canActivate;
                return;
              }

              yield AnimUtils.runTweenAsync(tween(uiOpacity).call(function () {
                _this2.button.interactable = canActivate;
              }).to(0.2, {
                opacity: canActivate ? 255 : 128
              }));
            });

            function applyActivationStatus() {
              return _applyActivationStatus.apply(this, arguments);
            }

            return applyActivationStatus;
          }()
        }, {
          key: "activate",
          value: function () {
            var _activate = _asyncToGenerator(function* () {
              if (this.quantity <= 0) {
                this.requestItem();
                return;
              }

              this.vibrate();
              this.setQuantity(this.quantity - 1);
            });

            function activate() {
              return _activate.apply(this, arguments);
            }

            return activate;
          }()
        }, {
          key: "canActivate",
          value: function canActivate() {
            return false;
          }
        }, {
          key: "setQuantity",
          value: function setQuantity(quantity) {
            if (this.isDevButton) {
              this.quantityLabel.string = 'i';
              this.quantityNode.active = true;
              this.plusNode.active = false;
              this.applyActivationStatus();
              return;
            }

            if (quantity < 0) {
              quantity = 0;
            }

            this.quantity = quantity;
            this.quantityLabel.string = "".concat(this.quantity);

            if (quantity <= 0) {
              this.quantityNode.active = false;
              this.plusNode.active = true;
            } else {
              this.quantityNode.active = true;
              this.plusNode.active = false;
            }

            this.applyActivationStatus();
            this.saveQuantity();
          }
        }, {
          key: "getQuantity",
          value: function getQuantity() {
            return this.quantity;
          }
        }, {
          key: "vibrate",
          value: function vibrate() {
            var _find, _find$getComponent;

            (_find = find('Vibrate')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Vibrate)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.vibrate(50);
          }
        }]);

        return SpecialItem;
      }(Component), (_descriptor$h = _applyDecoratedDescriptor(_class2$j.prototype, "isDevButton", [_dec2$o], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2$e = _applyDecoratedDescriptor(_class2$j.prototype, "button", [_dec3$k], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$b = _applyDecoratedDescriptor(_class2$j.prototype, "quantity", [_dec4$d], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4$7 = _applyDecoratedDescriptor(_class2$j.prototype, "quantityLabel", [_dec5$9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$6 = _applyDecoratedDescriptor(_class2$j.prototype, "quantityNode", [_dec6$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$5 = _applyDecoratedDescriptor(_class2$j.prototype, "plusNode", [_dec7$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$j)) || _class$A);

      cclegacy._RF.pop();

      var _dec$B, _class$B;

      cclegacy._RF.push({}, "e1fd9AcoshNdK0i6vow/F2P", "ItemManager", undefined);

      var ccclass$B = _decorator.ccclass;
      var ItemManager = (_dec$B = ccclass$B('ItemManager'), _dec$B(_class$B = /*#__PURE__*/function (_Component) {
        _inherits(ItemManager, _Component);

        var _super = _createSuper(ItemManager);

        function ItemManager() {
          var _this;

          _classCallCheck(this, ItemManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.sceneItems = [];
          return _this;
        }

        _createClass(ItemManager, [{
          key: "items",
          get: function get() {
            // make items immutable
            return _toConsumableArray(this.sceneItems);
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.syncItems();
          }
        }, {
          key: "syncItems",
          value: function syncItems() {
            var _this2 = this;

            var uiNode = find('Canvas/UI');

            if (!uiNode) {
              return;
            }

            var items = uiNode.getComponentsInChildren(SpecialItem);
            items.forEach(function (item) {
              if (item.node.activeInHierarchy) {
                _this2.sceneItems.push(item);
              }
            });
          }
        }]);

        return ItemManager;
      }(Component)) || _class$B);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "8f758kdd5dJvp4u7kW14LVp", "LevelThemes", undefined);

      var LevelThemes = ['cakes', 'cosmetic', 'flower', 'fruit', 'ice-cream', 'sport', 'tool'];

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "a6e4bjV/RVH17qBEx1mZaFg", "ResourcePaths", undefined);

      var ResourcePaths = /*#__PURE__*/function (ResourcePaths) {
        ResourcePaths["WATER_SURFACE_FRAME"] = "sprites/water-surface/spriteFrame";
        ResourcePaths["IC_HAND_FRAME"] = "sprites/ic-hand/spriteFrame";
        ResourcePaths["POISON_CIRCLE_FRAME"] = "sprites/poison-circle/spriteFrame";
        ResourcePaths["POISON_BUBBLE_PREFAB"] = "prefabs/PoisonBubble";
        ResourcePaths["DUST_PARTICLE_SPINE"] = "spines/dust-particle/siwang_texiao";
        ResourcePaths["LEVEL_THEME_FOLDER"] = "tiles";
        ResourcePaths["LEVEL_THEME_PREFIX"] = "sprites/tiles/skin";
        ResourcePaths["LEVEL_THEME_DATA"] = "loadable/jsons/LevelThemeData";
        return ResourcePaths;
      }(ResourcePaths || {});

      cclegacy._RF.pop();

      var _dec$C, _dec2$p, _class$C, _class2$k, _descriptor$i;

      cclegacy._RF.push({}, "bbe87JDGgVEkJdgCL2ydwxX", "LevelManager", undefined);

      var player$4 = globalThis.game.player;
      var ccclass$C = _decorator.ccclass,
          property$l = _decorator.property;
      var LevelManager = (_dec$C = ccclass$C('LevelManager'), _dec2$p = property$l([SpriteFrame]), _dec$C(_class$C = (_class2$k = /*#__PURE__*/function (_Component) {
        _inherits(LevelManager, _Component);

        var _super = _createSuper(LevelManager);

        function LevelManager() {
          var _this;

          _classCallCheck(this, LevelManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "defaultTheme", _descriptor$i, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(LevelManager, [{
          key: "__preload",
          value: function __preload() {
            this.validateRequiredComponents();
            if (this.firstLoad) return;
            this.firstLoad = true;

            var _iterator = _createForOfIteratorHelper(LevelThemes),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var theme = _step.value;
                var themePath = "".concat(ResourcePaths.LEVEL_THEME_FOLDER, "/").concat(theme);
                resources.loadDir(themePath, SpriteFrame);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (this.defaultTheme.length === 0) {
              throw new Error('<LevelManager>: defaultTheme not found');
            }
          }
        }, {
          key: "loadLevel",
          value: function () {
            var _loadLevel = _asyncToGenerator(function* (level, theme) {
              level ? player$4.setGameData({
                level: level
              }) : level = 1;
              this.levelData = LevelData[level - 1];
              var frames = yield this.requestTheme(theme);
              this.node.scene.emit(GameplayEvents.LEVEL_THEME_LOADED, frames);
            });

            function loadLevel(_x, _x2) {
              return _loadLevel.apply(this, arguments);
            }

            return loadLevel;
          }()
        }, {
          key: "requestTheme",
          value: function () {
            var _requestTheme = _asyncToGenerator(function* (theme) {
              var _this2 = this;

              this.themeName = this.levelData.theme[math.randomRangeInt(0, this.levelData.theme.length)];

              if (theme) {
                this.themeName = theme;
              }

              var themePath = "".concat(ResourcePaths.LEVEL_THEME_FOLDER, "/").concat(this.themeName);
              var assetsInfo = resources.getDirWithPath(themePath, SpriteFrame);

              if (assetsInfo.length > 0 && resources.get(assetsInfo[0].path, SpriteFrame) !== null) {
                var assets = [];
                assetsInfo.forEach(function (assetInfo) {
                  var asset = resources.get(assetInfo.path, SpriteFrame);

                  if (asset instanceof SpriteFrame) {
                    assets.push(asset);
                  }
                });
                return Promise.resolve(assets);
              }

              return new Promise(function (resolve) {
                resources.loadDir("".concat(ResourcePaths.LEVEL_THEME_FOLDER, "/").concat(_this2.themeName), SpriteFrame, function (err, assets) {
                  if (err || assets.length === 0) {
                    resolve(_this2.defaultTheme);
                    return;
                  }

                  resolve(assets);
                });
              });
            });

            function requestTheme(_x3) {
              return _requestTheme.apply(this, arguments);
            }

            return requestTheme;
          }()
        }, {
          key: "getLevelData",
          value: function getLevelData() {
            return this.levelData;
          }
        }]);

        return LevelManager;
      }(Component), _descriptor$i = _applyDecoratedDescriptor(_class2$k.prototype, "defaultTheme", [_dec2$p], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2$k)) || _class$C);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e6116mseMNPD6VcLUtkvez6", "BaseState", undefined);

      var BaseState$1 = /*#__PURE__*/function () {
        function BaseState(manager) {
          _classCallCheck(this, BaseState);

          this.game = null;
          this.data = {};
          this.game = manager.node.getComponent(Gameplay);

          if (!this.game) {
            throw new Error('Gameplay component not found');
          }

          this.manager = manager;
          this.updateStateData();
          this.logDebug();
        }

        _createClass(BaseState, [{
          key: "logDebug",
          value: function logDebug() {
            var stateName = this.constructor.name;
            console.info("[STATE] ".concat(stateName), this.data);
          }
        }, {
          key: "updateStateData",
          value: function updateStateData() {
            if (!this.game) return;
            var gameData = this.game.getGameData();
            if (!gameData) return;
            this.data = gameData; // console.info('[STATE] updateStateData', this.data)
          }
        }, {
          key: "updateGameData",
          value: function updateGameData(data) {
            var _this$game;

            (_this$game = this.game) === null || _this$game === void 0 ? void 0 : _this$game.setGameData(data);
          }
        }]);

        return BaseState;
      }();

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "a9bc11SkV9L/5L+Y+fhswfJ", "FinishState", undefined);

      var _globalThis$game$6 = globalThis.game,
          match = _globalThis$game$6.match,
          analytics$1 = _globalThis$game$6.analytics,
          event$8 = _globalThis$game$6.event;
      var _GameCore$a = GameCore,
          Events$9 = _GameCore$a.Events;

      var FinishState = /*#__PURE__*/function (_BaseState) {
        _inherits(FinishState, _BaseState);

        var _super = _createSuper(FinishState);

        function FinishState(manager) {
          var _this;

          _classCallCheck(this, FinishState);

          _this = _super.call(this, manager);

          _this.processCrazyGamesEvent();

          _this.turnUpBackgroundMusic();

          _this.finishMatchAsync();

          _this.logAnalytics();

          _this.showLevelCompleteScreen();

          return _this;
        }

        _createClass(FinishState, [{
          key: "processCrazyGamesEvent",
          value: function processCrazyGamesEvent() {
            if ('gameplayStop' in GameSDK) {
              GameSDK.gameplayStop();
            }
          }
        }, {
          key: "turnUpBackgroundMusic",
          value: function turnUpBackgroundMusic() {
            var _find, _find$getComponent;

            (_find = find('Music')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Music)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.setVolume(0.8);
          }
        }, {
          key: "finishMatchAsync",
          value: function () {
            var _finishMatchAsync = _asyncToGenerator(function* () {
              try {
                if (!this.game) return;
                yield match.single.finish.processAsync();
              } catch (error) {
                console.warn('FinishState', error);
              }
            });

            function finishMatchAsync() {
              return _finishMatchAsync.apply(this, arguments);
            }

            return finishMatchAsync;
          }()
        }, {
          key: "logAnalytics",
          value: function logAnalytics() {
            if (!this.game) return;
            var _this$data$level = this.data.level,
                level = _this$data$level === void 0 ? 0 : _this$data$level;
            analytics$1.levelFail(level);
          }
        }, {
          key: "showLevelCompleteScreen",
          value: function () {
            var _showLevelCompleteScreen = _asyncToGenerator(function* () {
              var level = this.data.level;

              if (this.game) {
                yield GeneralUtils.showInterstitialAdAsync({
                  component: this.game,
                  forLevel: level
                });
              }

              GeneralUtils.turnOffBackgroundMusic();
              GeneralUtils.playSound(CodeSoundKeys.LEVEL_COMPLETE);
              event$8.emit(Events$9.OPEN_SCREEN, {
                screenName: ScreenKeys.LEVEL_COMPLETE_SCREEN,
                screenData: {
                  level: level
                }
              });
            });

            function showLevelCompleteScreen() {
              return _showLevelCompleteScreen.apply(this, arguments);
            }

            return showLevelCompleteScreen;
          }()
        }, {
          key: "initialize",
          value: function initialize() {
            var state = new InitializeState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "ready",
          value: function ready() {// Don't allow ready in finish state
          }
        }, {
          key: "playing",
          value: function playing() {// Don't allow playing in finish state
          }
        }, {
          key: "fail",
          value: function fail() {// Don't allow fail in finish state
          }
        }, {
          key: "complete",
          value: function complete() {// Don't allow complete in finish state
          }
        }, {
          key: "finish",
          value: function finish() {// This is finish state, do nothing
          }
        }, {
          key: "update",
          value: function update() {//
          }
        }]);

        return FinishState;
      }(BaseState$1);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e3b372NaI5HvY5HnTleBQKd", "PlayingState", undefined);

      var PlayingState = /*#__PURE__*/function (_BaseState) {
        _inherits(PlayingState, _BaseState);

        var _super = _createSuper(PlayingState);

        function PlayingState(manager) {
          var _this;

          _classCallCheck(this, PlayingState);

          _this = _super.call(this, manager);

          _this.startCountdown();

          return _this;
        }

        _createClass(PlayingState, [{
          key: "startCountdown",
          value: function startCountdown() {
            var _this$game;

            (_this$game = this.game) === null || _this$game === void 0 ? void 0 : _this$game.uiManager.startCountdown();
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var state = new InitializeState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "ready",
          value: function ready() {
            var state = new ReadyState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "playing",
          value: function playing() {// This is playing state, do nothing
          }
        }, {
          key: "fail",
          value: function fail() {
            var state = new FailState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "complete",
          value: function complete() {
            var state = new CompleteState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "finish",
          value: function finish() {
            var state = new FinishState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "update",
          value: function update() {
            // TODO: check data using
            this.updateStateData();
          }
        }]);

        return PlayingState;
      }(BaseState$1);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e4ee7Ho9zJPVKobpdsCwGlp", "FailState", undefined);

      var _GameCore$b = GameCore,
          Events$a = _GameCore$b.Events;
      var event$9 = globalThis.game.event;

      var FailState = /*#__PURE__*/function (_BaseState) {
        _inherits(FailState, _BaseState);

        var _super = _createSuper(FailState);

        function FailState(manager) {
          var _this;

          _classCallCheck(this, FailState);

          _this = _super.call(this, manager);

          _this.stopAllSounds();

          _this.vibrateDevice();

          _this.pauseCountdown();

          _this.showTimeUpScreen();

          return _this;
        }

        _createClass(FailState, [{
          key: "stopAllSounds",
          value: function stopAllSounds() {
            var _find, _find$getComponent;

            (_find = find('Sound')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Sound)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.stopAll();
          }
        }, {
          key: "pauseCountdown",
          value: function pauseCountdown() {
            var _this$game;

            (_this$game = this.game) === null || _this$game === void 0 ? void 0 : _this$game.uiManager.pauseCountdown();
          }
        }, {
          key: "vibrateDevice",
          value: function vibrateDevice() {
            var _find2, _find2$getComponent;

            (_find2 = find('Vibrate')) === null || _find2 === void 0 ? void 0 : (_find2$getComponent = _find2.getComponent(Vibrate)) === null || _find2$getComponent === void 0 ? void 0 : _find2$getComponent.vibrate(500);
          }
        }, {
          key: "showTimeUpScreen",
          value: function () {
            var _showTimeUpScreen = _asyncToGenerator(function* () {
              var level = this.data.level;

              if (this.game) {
                yield GeneralUtils.showInterstitialAdAsync({
                  component: this.game,
                  forLevel: level
                });
              }

              GeneralUtils.turnOffBackgroundMusic();
              GeneralUtils.playSound(CodeSoundKeys.LEVEL_FAIL);
              event$9.emit(Events$a.OPEN_SCREEN, {
                screenName: ScreenKeys.TIME_UP_SCREEN,
                screenData: {
                  level: level
                }
              });
            });

            function showTimeUpScreen() {
              return _showTimeUpScreen.apply(this, arguments);
            }

            return showTimeUpScreen;
          }()
        }, {
          key: "initialize",
          value: function initialize() {
            var state = new InitializeState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "ready",
          value: function ready() {// Don't allow ready in fail state
          }
        }, {
          key: "playing",
          value: function playing() {
            var state = new PlayingState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "fail",
          value: function fail() {// This is fail state, do nothing
          }
        }, {
          key: "complete",
          value: function complete() {// Don't allow complete in fail state
          }
        }, {
          key: "finish",
          value: function finish() {
            var state = new FinishState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "update",
          value: function update() {//
          }
        }]);

        return FailState;
      }(BaseState$1);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "5ef69tJ5eNNv7o22H/XfSD2", "ReadyState", undefined);

      var _GameCore$c = GameCore,
          Events$b = _GameCore$c.Events;
      var event$a = globalThis.game.event;

      var ReadyState = /*#__PURE__*/function (_BaseState) {
        _inherits(ReadyState, _BaseState);

        var _super = _createSuper(ReadyState);

        function ReadyState(manager) {
          var _this;

          _classCallCheck(this, ReadyState);

          _this = _super.call(this, manager);

          _this.updateStateData();

          _this.stopAllSounds();

          GeneralUtils.turnUpBackgroundMusic();

          _this.setLevelTime();

          _this.showTutorialUI();

          _this.openLevelStartScreen();

          return _this;
        }

        _createClass(ReadyState, [{
          key: "initialize",
          value: function initialize() {
            var state = new InitializeState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "ready",
          value: function ready() {// This is ready state, do nothing
          }
        }, {
          key: "playing",
          value: function playing() {
            var state = new PlayingState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "fail",
          value: function fail() {
            // ? Allow fail by dev tools
            if (!GameCore.Utils.Valid.isDebugger()) return;
            var state = new FailState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "complete",
          value: function complete() {
            // ? Allow complete by dev tools
            if (!GameCore.Utils.Valid.isDebugger()) return;
            var state = new CompleteState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "finish",
          value: function finish() {
            // ? Allow complete by dev tools
            if (!GameCore.Utils.Valid.isDebugger()) return;
            var state = new FinishState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "update",
          value: function update() {//
          }
        }, {
          key: "openLevelStartScreen",
          value: function openLevelStartScreen() {
            var levelData = this.data.levelData;
            if (!levelData) return;
            var timeInSecond = levelData.time;
            var description = "Clear all tiles in ".concat(timeInSecond, " seconds");
            event$a.emit(Events$b.OPEN_SCREEN, {
              screenName: ScreenKeys.START_LEVEL_SCREEN,
              screenData: {
                level: this.data.level,
                message: description
              }
            });
          }
        }, {
          key: "stopAllSounds",
          value: function stopAllSounds() {
            var _find, _find$getComponent;

            (_find = find('Sound')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Sound)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.stopAll();
          }
        }, {
          key: "setLevelTime",
          value: function setLevelTime() {
            if (!this.game) return;
            var levelData = this.data.levelData;
            if (!levelData) return;
            this.game.uiManager.setCountdownTime(levelData.time);
          }
        }, {
          key: "showTutorialUI",
          value: function showTutorialUI() {
            if (!this.game) return;
            var _this$data = this.data,
                level = _this$data.level,
                levelData = _this$data.levelData;
            if (!level || !levelData) return;
            if (level > 3) return; //this.game.uiManager.stopCountDownHeaderHintBubbleAnim()
          }
        }]);

        return ReadyState;
      }(BaseState$1);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "37a5cRy3ANBGpVlH3wyS3Ra", "InitializeState", undefined);

      var _globalThis$game$7 = globalThis.game,
          player$5 = _globalThis$game$7.player,
          match$1 = _globalThis$game$7.match,
          analytics$2 = _globalThis$game$7.analytics;

      var InitializeState = /*#__PURE__*/function (_BaseState) {
        _inherits(InitializeState, _BaseState);

        var _super = _createSuper(InitializeState);

        function InitializeState(manager) {
          var _this;

          _classCallCheck(this, InitializeState);

          _this = _super.call(this, manager);

          if (GameSDK.getSDKName() === 'CrazyGames') {
            _this.processCrazyGamesRequirements();
          }

          _this.enableUI();

          _this.clearHint();

          _this.clearBoard();

          _this.loadLevel();

          _this.initCountdown();

          _this.updateLevelText();

          _this.startMatchAsync().then(function () {
            _this.logAnalytics();
          });

          return _this;
        }

        _createClass(InitializeState, [{
          key: "processCrazyGamesRequirements",
          value: function processCrazyGamesRequirements() {
            if ('gameplayStart' in GameSDK) {
              GameSDK.gameplayStart();
            }

            this.showInterAdsCrazyGames();
          }
        }, {
          key: "showInterAdsCrazyGames",
          value: function () {
            var _showInterAdsCrazyGames = _asyncToGenerator(function* () {
              this.stopAllSounds();
              var game = this.game;

              if (game) {
                yield GeneralUtils.showInterstitialAdAsync({
                  component: game,
                  includeList: ['CrazyGames'],
                  onSucceedCallback: function onSucceedCallback() {
                    game.disableRewardAdsItemForCrazyGames();
                  }
                });
                this.turnUpBackgroundMusic();
              }
            });

            function showInterAdsCrazyGames() {
              return _showInterAdsCrazyGames.apply(this, arguments);
            }

            return showInterAdsCrazyGames;
          }()
        }, {
          key: "enableUI",
          value: function enableUI() {
            var _this$game;

            (_this$game = this.game) === null || _this$game === void 0 ? void 0 : _this$game.uiManager.enableHeader();
          }
        }, {
          key: "clearHint",
          value: function clearHint() {// this.game?.hint?.reset()
          }
        }, {
          key: "clearBoard",
          value: function clearBoard() {
            if (!this.game) return;
            this.game.grid.destroyAll();
            this.game.pathDraw.clearMatchPath();
          }
        }, {
          key: "loadLevel",
          value: function loadLevel() {
            var _this$data$levelData;

            if (!this.game) return;
            this.game.levelManager.loadLevel(this.data.level).then(function () {
              GeneralUtils.playSound(CodeSoundKeys.LEVEL_START);
            });
            this.game.uiManager.setCountdownTime((_this$data$levelData = this.data.levelData) === null || _this$data$levelData === void 0 ? void 0 : _this$data$levelData.time);
          }
        }, {
          key: "initCountdown",
          value: function initCountdown() {
            if (!this.game) return;
            this.game.uiManager.initCountdown();
          }
        }, {
          key: "updateLevelText",
          value: function updateLevelText() {
            var _this$game2;

            var level = this.data.level;
            if (level === undefined || level === null) return;
            (_this$game2 = this.game) === null || _this$game2 === void 0 ? void 0 : _this$game2.uiManager.setLevelText(level);
          }
        }, {
          key: "stopAllSounds",
          value: function stopAllSounds() {
            var _find, _find$getComponent;

            (_find = find('Sound')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Sound)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.stopAll();
          }
        }, {
          key: "turnUpBackgroundMusic",
          value: function turnUpBackgroundMusic() {
            var _find2, _find2$getComponent;

            (_find2 = find('Music')) === null || _find2 === void 0 ? void 0 : (_find2$getComponent = _find2.getComponent(Music)) === null || _find2$getComponent === void 0 ? void 0 : _find2$getComponent.setVolume(0.8);
          }
        }, {
          key: "startMatchAsync",
          value: function () {
            var _startMatchAsync = _asyncToGenerator(function* () {
              if (this.data.isContextProcessing) {
                this.updateGameData({
                  isContextProcessing: false
                });
                return;
              }

              try {
                var playerId = player$5.getPlayerId();
                yield match$1.single.start.processAsync({
                  playerId: playerId
                });
              } catch (error) {
                console.warn('ReadyState', error);
              }
            });

            function startMatchAsync() {
              return _startMatchAsync.apply(this, arguments);
            }

            return startMatchAsync;
          }()
        }, {
          key: "logAnalytics",
          value: function logAnalytics() {
            if (!this.game) return;
            var _this$data$level = this.data.level,
                level = _this$data$level === void 0 ? 0 : _this$data$level;
            analytics$2.levelStart(level, 3);
          }
        }, {
          key: "initialize",
          value: function initialize() {// This is initialize state, do nothing
          }
        }, {
          key: "ready",
          value: function ready() {
            var state = new ReadyState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "pause",
          value: function pause() {// Don't allow pause in initialize state
          }
        }, {
          key: "playing",
          value: function playing() {// Don't allow play in initialize state
          }
        }, {
          key: "fail",
          value: function fail() {// Don't allow fail in initialize state
          }
        }, {
          key: "complete",
          value: function complete() {// Don't allow complete in initialize state
          }
        }, {
          key: "finish",
          value: function finish() {// Don't allow finish in initialize state
          }
        }, {
          key: "update",
          value: function update() {//
          }
        }]);

        return InitializeState;
      }(BaseState$1);

      InitializeState.didGameStart = false;

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "7c26ebr5L5EdZUQb6a6CS3j", "CompleteState", undefined);

      var _globalThis$game$8 = globalThis.game,
          event$b = _globalThis$game$8.event,
          player$6 = _globalThis$game$8.player;
      var _GameCore$d = GameCore,
          Events$c = _GameCore$d.Events;

      var CompleteState = /*#__PURE__*/function (_BaseState) {
        _inherits(CompleteState, _BaseState);

        var _super = _createSuper(CompleteState);

        function CompleteState(manager) {
          var _this;

          _classCallCheck(this, CompleteState);

          _this = _super.call(this, manager);

          _this.attemptCallCreateShortcut();

          _this.updatePlayerProgress();

          _this.showLevelCompleteScreen();

          return _this;
        }

        _createClass(CompleteState, [{
          key: "attemptCallCreateShortcut",
          value: function attemptCallCreateShortcut() {
            var _this$data$level = this.data.level,
                level = _this$data$level === void 0 ? 0 : _this$data$level;
            if (level < 2) return;
            if (!('createShortcutAsync' in GameSDK.extra)) return;
            GameSDK.extra.createShortcutAsync()["catch"](function (error) {
              console.warn('createShortcutAsync', error);
            });
          }
        }, {
          key: "showLevelCompleteScreen",
          value: function () {
            var _showLevelCompleteScreen = _asyncToGenerator(function* () {
              if (this.game) {
                yield GeneralUtils.showInterstitialAdAsync({
                  component: this.game,
                  forLevel: this.data.level
                });
              }

              event$b.emit(Events$c.OPEN_SCREEN, {
                screenName: ScreenKeys.LEVEL_COMPLETE_SCREEN,
                screenData: {
                  level: this.data.level,
                  coins: 40 //Default coin

                }
              });
            });

            function showLevelCompleteScreen() {
              return _showLevelCompleteScreen.apply(this, arguments);
            }

            return showLevelCompleteScreen;
          }()
        }, {
          key: "updatePlayerProgress",
          value: function updatePlayerProgress() {
            if (!this.game) return;
            var level = this.data.level;
            if (!level) return;
            var gameData = player$6.getGameData();
            if (!gameData) return;
            var totalLevel = gameData.totalLevel;

            var newGameData = _objectSpread2({}, gameData);

            if (level >= totalLevel) {
              newGameData.passAllLevels = true;
            } else if (level < gameData.level) {
              newGameData.level = level + 1;
            }

            var currentTheme = this.game.themeManager.getLevelTheme(level);
            this.game.themeManager.increaseProgress(currentTheme, 1, false);

            if (this.game.themeManager.playerThemeProgress === null) {
              throw new Error('playerThemeProgress has not been initialized. Have you called ThemeManager.init()?');
            }

            newGameData.themes = this.game.themeManager.playerThemeProgress;
            player$6.setGameData(newGameData);
          }
        }, {
          key: "initialize",
          value: function initialize() {
            var state = new InitializeState(this.manager);
            this.manager.change(state);
          }
        }, {
          key: "ready",
          value: function ready() {// Don't allow ready in complete state
          }
        }, {
          key: "pause",
          value: function pause() {// Don't pause in complete state
          }
        }, {
          key: "playing",
          value: function playing() {// Don't play again in complete state
          }
        }, {
          key: "fail",
          value: function fail() {// Don't allow fail in complete state
          }
        }, {
          key: "complete",
          value: function complete() {// This is complete state, do nothing
          }
        }, {
          key: "finish",
          value: function finish() {// Don't allow finish in complete state
          }
        }, {
          key: "update",
          value: function update() {//
          }
        }]);

        return CompleteState;
      }(BaseState$1);

      cclegacy._RF.pop();

      var _dec$D, _class$D;

      cclegacy._RF.push({}, "bb0e3beWSxOOLCv7gjyg2s0", "StateManager", undefined);

      var ccclass$D = _decorator.ccclass; // ? "isX" methods only used for specific state checking, don't use it for other purpose. ex: check when switch state

      var StateManager = (_dec$D = ccclass$D('StateManager'), _dec$D(_class$D = /*#__PURE__*/function (_Component) {
        _inherits(StateManager, _Component);

        var _super = _createSuper(StateManager);

        function StateManager() {
          _classCallCheck(this, StateManager);

          return _super.apply(this, arguments);
        }

        _createClass(StateManager, [{
          key: "init",
          value: function init() {
            this.state = new InitializeState(this);
          }
        }, {
          key: "change",
          value: function change(state) {
            this.state = state;
          }
        }, {
          key: "initialize",
          value: function initialize() {
            this.state.initialize();
          }
        }, {
          key: "isInitialize",
          value: function isInitialize() {
            return this.state instanceof InitializeState;
          }
        }, {
          key: "ready",
          value: function ready() {
            this.state.ready();
          }
        }, {
          key: "isReady",
          value: function isReady() {
            return this.state instanceof ReadyState;
          }
        }, {
          key: "playing",
          value: function playing() {
            this.state.playing();
          }
        }, {
          key: "isPlaying",
          value: function isPlaying() {
            return this.state instanceof PlayingState;
          }
        }, {
          key: "fail",
          value: function fail() {
            this.state.fail();
          }
        }, {
          key: "isFail",
          value: function isFail() {
            return this.state instanceof FailState;
          }
        }, {
          key: "complete",
          value: function complete() {
            this.state.complete();
          }
        }, {
          key: "isComplete",
          value: function isComplete() {
            return this.state instanceof CompleteState;
          }
        }, {
          key: "finish",
          value: function finish() {
            this.state.finish();
          }
        }, {
          key: "isFinished",
          value: function isFinished() {
            return this.state instanceof FinishState;
          }
        }, {
          key: "update",
          value: function update(deltaTime) {
            if (!this.state) return;
            this.state.update(deltaTime);
          }
        }]);

        return StateManager;
      }(Component)) || _class$D);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "e73e7v5S5dN9abDAqKtq53N", "DefaultLevelThemeData", undefined);

      var DefaultLevelThemeData = {
        mapNames: ['summer'],
        themeNames: ['fruit'],
        levelOrder: [{
          id: 1,
          map: 'summer',
          theme: 'fruit',
          levelCount: 10
        }]
      };

      cclegacy._RF.pop();

      var _dec$E, _class$E;

      cclegacy._RF.push({}, "7c423mkzMdHFL3mq+cHnUS0", "ThemeManager", undefined);

      var ccclass$E = _decorator.ccclass;
      var storage = globalThis.game.storage;
      var ThemeManager = (_dec$E = ccclass$E('ThemeManager'), _dec$E(_class$E = /*#__PURE__*/function (_Component) {
        _inherits(ThemeManager, _Component);

        var _super = _createSuper(ThemeManager);

        function ThemeManager() {
          var _this;

          _classCallCheck(this, ThemeManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.levelThemeData = DefaultLevelThemeData;
          _this.playerThemeProgress = null;
          return _this;
        }

        _createClass(ThemeManager, [{
          key: "init",
          value: function init() {
            this.updateLevelThemeData();
            this.updatePlayerThemeProgress();
            this.initDashboardSceneStorage();
          }
        }, {
          key: "initDashboardSceneStorage",
          value: function initDashboardSceneStorage() {
            var dashboardStorage = storage.getStorage('dashboard');

            if (dashboardStorage !== null && dashboardStorage !== undefined) {
              return;
            }

            var currMap = this.getCurrentProgress();
            storage.addStorage('dashboard', {
              lastMapPayload: currMap,
              animateToCurrentLevel: false
            });
            var collectionStorage = storage.getStorage('collection');

            if (collectionStorage !== null && collectionStorage !== undefined) {
              return;
            }

            storage.addStorage('collection', {
              lastLevelPack: currMap.id,
              animateLevelPackUnlock: false
            });
          }
        }, {
          key: "updateLevelThemeData",
          value: function updateLevelThemeData() {
            var levelThemeData = resources.get("".concat(ResourcePaths.LEVEL_THEME_DATA), JsonAsset);

            if (levelThemeData) {
              this.levelThemeData = levelThemeData.json;
            }
          }
        }, {
          key: "updatePlayerThemeProgress",
          value: function updatePlayerThemeProgress() {
            var playerData = globalThis.game.player.getGameData();

            if (playerData !== null && playerData !== void 0 && playerData.themes && Object.keys(playerData.themes).length > 0) {
              this.playerThemeProgress = playerData.themes;
              return;
            }

            console.log('getPlayerThemeProgress: playerData not found, use data from level');
            var themeInfo = this.levelThemeData.levelOrder; // init player theme progress

            this.playerThemeProgress = {};

            var _iterator = _createForOfIteratorHelper(themeInfo),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var element = _step.value;
                this.playerThemeProgress[element.theme] = {
                  currentProgress: 0,
                  maxProgress: element.levelCount,
                  isLocked: true
                };
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            this.updatePlayerThemeProgressByLevel();
            console.log(this.playerThemeProgress);
          }
        }, {
          key: "syncPlayerThemeProgress",
          value: function syncPlayerThemeProgress() {
            var gameData = globalThis.game.player.getGameData();
            globalThis.game.player.setGameData(_objectSpread2(_objectSpread2({}, gameData), {}, {
              themes: this.playerThemeProgress
            }));
          }
        }, {
          key: "getLevelTheme",
          value: function getLevelTheme(level) {
            var playerLevel = level !== null && level !== void 0 ? level : 1;
            var levelOrder = this.levelThemeData.levelOrder;
            var count = 0;

            var _iterator2 = _createForOfIteratorHelper(levelOrder),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var element = _step2.value;
                var levelThemeInfo = element;

                if (count + levelThemeInfo.levelCount >= playerLevel) {
                  console.log('getLevelTheme', levelThemeInfo.theme);
                  return levelThemeInfo.theme;
                } else {
                  count += levelThemeInfo.levelCount;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            var lastLevelThemeInfo = levelOrder[levelOrder.length - 1];
            console.log('getLevelTheme', lastLevelThemeInfo.theme);
            return lastLevelThemeInfo.theme;
          }
        }, {
          key: "getUnlockedThemes",
          value: function getUnlockedThemes() {
            if (this.playerThemeProgress === null || this.playerThemeProgress === undefined) {
              throw new Error('getUnlockedThemes: playerThemeProgress not found. Have you called init()?');
            }

            var themeKeys = Object.keys(this.playerThemeProgress);
            var unlockedThemes = [];

            for (var i = 0; i < themeKeys.length; i++) {
              var theme = themeKeys[i];
              var isLocked = this.playerThemeProgress[theme].isLocked;

              if (!isLocked) {
                unlockedThemes.push(theme);
              }
            }

            console.log('getUnlockedThemes', unlockedThemes);
            return unlockedThemes;
          }
        }, {
          key: "getLevelMap",
          value: function getLevelMap(level) {
            var playerLevel = level !== null && level !== void 0 ? level : 1;
            var levelOrder = this.levelThemeData.levelOrder;
            var count = 0;

            var _iterator3 = _createForOfIteratorHelper(levelOrder),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var levelThemeInfo = _step3.value;

                if (count + levelThemeInfo.levelCount >= playerLevel) {
                  console.log('getLevelMap', levelThemeInfo.map);
                  return levelThemeInfo.map;
                } else {
                  count += levelThemeInfo.levelCount;
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            var lastLevelThemeInfo = levelOrder[levelOrder.length - 1];
            console.log('getLevelMap', lastLevelThemeInfo.map);
            return lastLevelThemeInfo.map;
          }
        }, {
          key: "updatePlayerThemeProgressByLevel",
          value: function updatePlayerThemeProgressByLevel() {
            var _gameData$level;

            var gameData = globalThis.game.player.getGameData();
            var levelProgress = ((_gameData$level = gameData === null || gameData === void 0 ? void 0 : gameData.level) !== null && _gameData$level !== void 0 ? _gameData$level : 1) - 1;
            var count = levelProgress;
            var levelOrder = this.levelThemeData.levelOrder; //? unlock first theme

            this.playerThemeProgress[levelOrder[0].theme].isLocked = false;

            var _iterator4 = _createForOfIteratorHelper(levelOrder),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var levelThemeInfo = _step4.value;
                var levelCount = levelThemeInfo.levelCount,
                    theme = levelThemeInfo.theme;
                if (count <= 0) continue;
                var progress = count - levelCount >= 0 ? levelCount : count;
                count -= progress;
                console.log('getPlayerThemeProgressByLevel', theme, progress);
                this.increaseProgress(theme, progress, false);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }, {
          key: "getCollectionUnlockProgress",
          value: function getCollectionUnlockProgress() {
            if (this.playerThemeProgress === null) {
              throw new Error('getCollectionUnlockProgress: playerThemeProgress not found. Have you called init()?');
            }

            var themeKeys = Object.keys(this.playerThemeProgress);
            var payload = [];

            for (var _i = 0, _themeKeys = themeKeys; _i < _themeKeys.length; _i++) {
              var theme = _themeKeys[_i];
              var _this$playerThemeProg = this.playerThemeProgress[theme],
                  currentProgress = _this$playerThemeProg.currentProgress,
                  maxProgress = _this$playerThemeProg.maxProgress,
                  isLocked = _this$playerThemeProg.isLocked;
              payload.push({
                progress: currentProgress,
                max: maxProgress,
                isLocked: isLocked,
                theme: theme
              });
            }

            console.log('getCollectionUnlockProgress', payload);
            return payload;
          }
        }, {
          key: "getCurrentProgress",
          value: function getCurrentProgress() {
            if (this.playerThemeProgress === null) {
              throw new Error('getCurrentProgress: playerThemeProgress not found. Have you called init()?');
            } // get the furthest theme that is not completed. If all themes are completed, get the last theme


            var themeInfo = this.levelThemeData.levelOrder;
            var currentMap = '';
            var nextMap = '';
            var progress = 0;
            var max = 0;
            var id = 0;

            for (var i = 0; i < themeInfo.length; i++) {
              var theme = this.playerThemeProgress[themeInfo[i].theme]; // ! if theme is not found, use the first theme

              if (theme.currentProgress < theme.maxProgress) {
                var _themeInfo$map, _themeInfo;

                id = themeInfo[i].id;
                currentMap = themeInfo[i].map;
                nextMap = (_themeInfo$map = (_themeInfo = themeInfo[i + 1]) === null || _themeInfo === void 0 ? void 0 : _themeInfo.map) !== null && _themeInfo$map !== void 0 ? _themeInfo$map : currentMap;
                progress = theme.currentProgress;
                max = theme.maxProgress;
                break;
              }
            }

            if (currentMap === '') {
              var lastTheme = themeInfo[themeInfo.length - 1];
              id = lastTheme.id;
              currentMap = lastTheme.map;
              nextMap = lastTheme.map;
              progress = lastTheme.levelCount;
              max = lastTheme.levelCount;
              console.log('getCurrentProgress: all themes completed');
              return {
                id: id,
                currentMap: currentMap,
                nextMap: nextMap,
                progress: progress,
                max: max
              };
            }

            console.log('getCurrentProgress', currentMap, nextMap, progress, max);
            return {
              id: id,
              currentMap: currentMap,
              nextMap: nextMap,
              progress: progress,
              max: max
            };
          }
        }, {
          key: "getThemeFromLevel",
          value: function getThemeFromLevel(level) {
            var levelOrder = this.levelThemeData.levelOrder;
            var count = 0;

            var _iterator5 = _createForOfIteratorHelper(levelOrder),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var levelThemeInfo = _step5.value;

                if (count + levelThemeInfo.levelCount >= level) {
                  console.log('getThemeFromLevel', levelThemeInfo.theme);
                  return levelThemeInfo.theme;
                } else {
                  count += levelThemeInfo.levelCount;
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            var lastLevelThemeInfo = levelOrder[levelOrder.length - 1];
            console.log('getThemeFromLevel', lastLevelThemeInfo.theme);
            return lastLevelThemeInfo.theme;
          }
        }, {
          key: "increaseProgress",
          value: function increaseProgress(theme, progress, isSync) {
            if (this.playerThemeProgress === null) {
              throw new Error('increaseProgress: playerThemeProgress not found. Have you called init()?');
            }

            if (!this.playerThemeProgress[theme]) {
              console.warn('increaseProgress: theme not found', theme);
              return;
            }

            var _this$playerThemeProg2 = this.playerThemeProgress[theme],
                currentProgress = _this$playerThemeProg2.currentProgress,
                maxProgress = _this$playerThemeProg2.maxProgress;
            var newProgress = currentProgress + progress > maxProgress ? maxProgress : currentProgress + progress;

            if (newProgress > 0) {
              // unlock current theme
              this.playerThemeProgress[theme].isLocked = false;
            }

            if (newProgress === maxProgress) {
              var _themeInfo2; // unlock next theme


              var themeInfo = this.levelThemeData.levelOrder;
              var currThemeIndex = themeInfo.findIndex(function (element) {
                return element.theme === theme;
              });
              var nextTheme = (_themeInfo2 = themeInfo[currThemeIndex + 1]) === null || _themeInfo2 === void 0 ? void 0 : _themeInfo2.theme;

              if (nextTheme) {
                this.unlockTheme(nextTheme, false);
              }
            }

            this.playerThemeProgress[theme].currentProgress = newProgress;
            this.playerThemeProgress[theme].maxProgress = maxProgress;
            if (isSync) this.syncPlayerThemeProgress();
          }
        }, {
          key: "unlockTheme",
          value: function unlockTheme(theme, isSync) {
            if (this.playerThemeProgress === null) {
              throw new Error('unlockTheme: playerThemeProgress not found. Have you called init()?');
            }

            if (!this.playerThemeProgress[theme]) {
              console.warn('unlockTheme: theme not found', theme);
              return;
            }

            this.playerThemeProgress[theme].isLocked = false;
            if (isSync) this.syncPlayerThemeProgress();
          }
        }]);

        return ThemeManager;
      }(Component)) || _class$E);

      cclegacy._RF.pop();

      var _dec$F, _dec2$q, _dec3$l, _class$F, _class2$l, _descriptor$j, _descriptor2$f;

      cclegacy._RF.push({}, "9e40aEq56tMKLFoeACyl+eH", "Clock", undefined);

      var ccclass$F = _decorator.ccclass,
          disallowMultiple$c = _decorator.disallowMultiple,
          property$m = _decorator.property;
      var Clock = (_dec$F = ccclass$F('Clock'), _dec2$q = property$m(Label), _dec3$l = property$m(Node$1), _dec$F(_class$F = disallowMultiple$c(_class$F = (_class2$l = /*#__PURE__*/function (_Component) {
        _inherits(Clock, _Component);

        var _super = _createSuper(Clock);

        function Clock() {
          var _this;

          _classCallCheck(this, Clock);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "timeText", _descriptor$j, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clockIcon", _descriptor2$f, _assertThisInitialized(_this));

          _this.time = 0;
          _this.remaining = 0;
          _this.running = false;

          _this.handleUpdateConfig = function (config) {
            if (!_this.enabled) return;
            console.log('Clock: handleUpdateConfig', config); // this.setTime(config.waitForPassSecs)
          };

          _this.refillTime = function () {
            var addedTime = 120;
            var startedTime = Date.now();
            var scaleUpTween = tween(_this.node).to(0.5, {
              scale: new Vec3(1.1, 1.1, 1)
            });
            var scaleDownTween = tween(_this.node).to(0.5, {
              scale: new Vec3(1, 1, 1)
            });
            var clockIconTween = tween(_this.clockIcon).to(0.15, {
              angle: -15
            }, {
              easing: 'cubicOut'
            }).to(0.15, {
              angle: 0
            }, {
              easing: 'cubicIn'
            }).to(0.15, {
              angle: 15
            }, {
              easing: 'cubicOut'
            }).to(0.15, {
              angle: 0
            }, {
              easing: 'cubicIn'
            });
            var clockIconTweenLoop = tween(_this.clockIcon).repeat(5, clockIconTween);
            var counterTween = tween(_this.node).to(3, {
              position: new Vec3(0, 0, 0)
            }, {
              onUpdate: function onUpdate() {
                var now = Date.now();
                var progress = (now - startedTime) / 3000 > 1 ? 1 : (now - startedTime) / 3000;
                var current = math.lerp(0, addedTime, progress);

                _this.setTime(current);
              }
            }).call(function () {
              _this.setTime(addedTime);

              scaleDownTween.start();

              _this.node.scene.emit(GameplayEvents.RESCUE_FINISHED);
            });
            tween(_this.node).parallel(scaleUpTween, counterTween).start();
            clockIconTweenLoop.start();
          };

          return _this;
        }

        _createClass(Clock, [{
          key: "__preload",
          value: function __preload() {
            this.listenEvents();
          }
        }, {
          key: "start",
          value: function start() {
            this.init();
          }
        }, {
          key: "init",
          value: function init() {
            this.running = false;
          }
        }, {
          key: "listenEvents",
          value: function listenEvents() {
            this.node.scene.on(GameEvents.GAMEPLAY_UPDATE_CONFIG, this.handleUpdateConfig);
            this.node.scene.on(GameplayEvents.RESCUE_START, this.refillTime);
          }
        }, {
          key: "setTime",
          value: function setTime(time) {
            this.time = time;
            this.timeText.string = this.convertSecondsToMmSs(time);
          }
        }, {
          key: "startCountdown",
          value: function startCountdown() {
            this.running = true;
            this.remaining = this.time;
          }
        }, {
          key: "pause",
          value: function pause() {
            this.running = false;
          }
        }, {
          key: "resume",
          value: function resume() {
            this.running = true;
          }
        }, {
          key: "endCountDown",
          value: function endCountDown() {
            this.running = false;
            this.remaining = 0;
            this.node.scene.emit(GameplayEvents.TIME_OUT);
          }
        }, {
          key: "update",
          value: function update(deltaTime) {
            if (!this.running) return;

            if (this.remaining <= 0) {
              this.endCountDown();
              return;
            }

            this.remaining -= deltaTime;
            if (this.remaining >= 0) this.updateLabel();
          }
        }, {
          key: "updateLabel",
          value: function updateLabel() {
            this.timeText.string = this.convertSecondsToMmSs(this.remaining);
          }
        }, {
          key: "convertSecondsToMmSs",
          value: function convertSecondsToMmSs(seconds) {
            var minutes = Math.floor(seconds / 60);
            var remainingSeconds = Math.floor(seconds % 60);
            var formattedMinutes = this.padZero(minutes);
            var formattedSeconds = this.padZero(remainingSeconds);
            return "".concat(formattedMinutes, ":").concat(formattedSeconds);
          }
        }, {
          key: "padZero",
          value: function padZero(number) {
            return number < 10 ? "0".concat(number) : "".concat(number);
          }
        }]);

        return Clock;
      }(Component), (_descriptor$j = _applyDecoratedDescriptor(_class2$l.prototype, "timeText", [_dec2$q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$f = _applyDecoratedDescriptor(_class2$l.prototype, "clockIcon", [_dec3$l], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$l)) || _class$F) || _class$F);

      cclegacy._RF.pop();

      var _dec$G, _dec2$r, _dec3$m, _dec4$e, _dec5$a, _class$G, _class2$m, _descriptor$k, _descriptor2$g, _descriptor3$c, _descriptor4$8;

      cclegacy._RF.push({}, "61791zAr2tJR4p22EZ5QRfk", "Header", undefined);

      var ccclass$G = _decorator.ccclass,
          property$n = _decorator.property;
      var _GameCore$e = GameCore,
          Events$d = _GameCore$e.Events;
      var _globalThis$game$9 = globalThis.game,
          language$3 = _globalThis$game$9.language,
          event$c = _globalThis$game$9.event,
          match$2 = _globalThis$game$9.match,
          storage$1 = _globalThis$game$9.storage;
      var Header = (_dec$G = ccclass$G('Header'), _dec2$r = property$n(Label), _dec3$m = property$n(Node$1), _dec4$e = property$n(Node$1), _dec5$a = property$n(Node$1), _dec$G(_class$G = (_class2$m = /*#__PURE__*/function (_Component) {
        _inherits(Header, _Component);

        var _super = _createSuper(Header);

        function Header() {
          var _this;

          _classCallCheck(this, Header);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "levelText", _descriptor$k, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "settingNode", _descriptor2$g, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "homeNode", _descriptor3$c, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rescueAnimationMask", _descriptor4$8, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(Header, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
            this.listenToEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.levelText) {
              throw new Error('Header: LevelText not found');
            }

            if (!this.settingNode) {
              throw new Error('Header: SettingNode not found');
            }

            if (!this.rescueAnimationMask) {
              throw new Error('Header: RescueAnimationMask not found');
            }
          }
        }, {
          key: "listenToEvents",
          value: function listenToEvents() {
            this.node.scene.on(GameplayEvents.RESCUE_START, this.showRescueAnimationMask, this);
            this.node.scene.on(GameplayEvents.RESCUE_FINISHED, this.hideRescueAnimationMask, this);
          } // ? Callback for click event of PauseButton

        }, {
          key: "handleClickedPauseGame",
          value: function handleClickedPauseGame() {
            this.showSettingScreen();
            this.node.scene.emit(GameplayEvents.GAME_PAUSE);
          } // ? Callback for click event of HomeButton

        }, {
          key: "handleReturnHome",
          value: function handleReturnHome() {
            var _this2 = this;

            match$2.single.finish.processAsync().then(function () {
              storage$1.setStorageData('dashboard', 'animateToCurrentLevel', true);
              storage$1.setStorageData('collection', 'animateLevelPackUnlock', true);

              _this2.node.scene.emit(GameEvents.REQUEST_SWITCH_SCENE_LOADING, SceneKeys.DASHBOARD_SCENE);

              event$c.emit(Events$d.SWITCH_SCENE, {
                sceneName: SceneKeys.DASHBOARD_SCENE
              });
            });
          }
        }, {
          key: "showSettingScreen",
          value: function showSettingScreen() {
            event$c.emit(Events$d.OPEN_SCREEN, {
              screenName: ScreenKeys.SETTINGS_SCREEN,
              screenData: {}
            });
          }
        }, {
          key: "setLevelText",
          value: function setLevelText(level) {
            var levelText = language$3.getText('level');
            this.levelText.string = levelText + " ".concat(level);
          }
        }, {
          key: "setProgress",
          value: function setProgress(_progress) {// this.levelProgressBar.setProgress(progress)
          }
        }, {
          key: "setProgressStars",
          value: function setProgressStars(_stars) {// this.levelProgressBar.setStars(stars)
          }
        }, {
          key: "startCountDownHintBubble",
          value: function startCountDownHintBubble() {// this.schedule(this.handlePlayBubble, 30)
          }
        }, {
          key: "stopCountDownHintBubble",
          value: function stopCountDownHintBubble() {// this.unschedule(this.handlePlayBubble)
          }
        }, {
          key: "setButtonsSelectable",
          value: function setButtonsSelectable() {
            var isSelectable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this.enableBtnNode(this.settingNode, isSelectable, true);
            this.enableBtnNode(this.homeNode, isSelectable, true);
          }
        }, {
          key: "enableBtnNode",
          value: function enableBtnNode(node, enable, visible) {
            var button = node.getComponent(Button);

            if (button) {
              button.interactable = enable;
            }

            if (visible) {
              node.active = true; // TODO: use grayscale texture instead of OpacityToggler

              var opacityToggler = node.getComponent(OpacityToggler);
            } else {
              node.active = false;
            }
          }
        }, {
          key: "showRescueAnimationMask",
          value: function showRescueAnimationMask() {
            this.rescueAnimationMask.active = true;
            var uiOpacity = this.rescueAnimationMask.getComponent(UIOpacity);

            if (!uiOpacity) {
              console.warn('RescueAnimationMask: UIOpacity not found');
              return;
            }

            var startedTime = Date.now();
            tween(this.rescueAnimationMask).to(0.5, {
              angle: 0
            }, {
              onUpdate: function onUpdate() {
                var progress = (Date.now() - startedTime) / 500 > 1 ? 1 : (Date.now() - startedTime) / 500;
                var opacityValue = math.lerp(0, 150, progress);
                uiOpacity.opacity = opacityValue;
              }
            }).start();
          }
        }, {
          key: "hideRescueAnimationMask",
          value: function hideRescueAnimationMask() {
            var _this3 = this;

            var uiOpacity = this.rescueAnimationMask.getComponent(UIOpacity);

            if (!uiOpacity) {
              console.warn('RescueAnimationMask: UIOpacity not found');
              return;
            }

            var startedTime = Date.now();
            tween(this.rescueAnimationMask).to(0.5, {
              angle: 0
            }, {
              onUpdate: function onUpdate() {
                var progress = (Date.now() - startedTime) / 500 > 1 ? 1 : (Date.now() - startedTime) / 500;
                var opacityValue = math.lerp(0, 150, progress);
                uiOpacity.opacity = 150 - opacityValue;
              }
            }).call(function () {
              _this3.rescueAnimationMask.active = false;
            }).start();
          }
        }]);

        return Header;
      }(Component), (_descriptor$k = _applyDecoratedDescriptor(_class2$m.prototype, "levelText", [_dec2$r], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$g = _applyDecoratedDescriptor(_class2$m.prototype, "settingNode", [_dec3$m], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$c = _applyDecoratedDescriptor(_class2$m.prototype, "homeNode", [_dec4$e], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$8 = _applyDecoratedDescriptor(_class2$m.prototype, "rescueAnimationMask", [_dec5$a], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$m)) || _class$G);

      cclegacy._RF.pop();

      var _class$H;

      cclegacy._RF.push({}, "99177y4Zj1AUICVgEPgG4e9", "DevItem", undefined);

      var ccclass$H = _decorator.ccclass;

      var DevItem = ccclass$H(_class$H = /*#__PURE__*/function (_Component) {
        _inherits(DevItem, _Component);

        var _super = _createSuper(DevItem);

        function DevItem() {
          var _this;

          _classCallCheck(this, DevItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.gameplay = null;
          return _this;
        }

        _createClass(DevItem, [{
          key: "injectGameplay",
          value: function injectGameplay(gameplay) {
            this.gameplay = gameplay;
          }
        }, {
          key: "quantity",
          get: function get() {
            return 1;
          },
          set: function set(value) {
            console.warn("Do not set quantity on ".concat(this.constructor.name, ". It is a dev item. Tried to set to ").concat(value, "."));
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            return true;
          }
        }]);

        return DevItem;
      }(Component)) || _class$H;

      cclegacy._RF.pop();

      var _dec$H, _dec2$s, _dec3$n, _class$I, _class2$n, _descriptor$l, _descriptor2$h;

      cclegacy._RF.push({}, "151afQBVDpOYpTjtwP+wYH+", "DevTools", undefined);

      var ccclass$I = _decorator.ccclass,
          property$o = _decorator.property;
      var match$3 = globalThis.game.match;
      var DevToolsContainer = (_dec$H = ccclass$I('DevToolsContainer'), _dec2$s = property$o(Node$1), _dec3$n = property$o({
        type: DevItem,
        displayName: 'Dev items'
      }), _dec$H(_class$I = (_class2$n = /*#__PURE__*/function (_Component) {
        _inherits(DevToolsContainer, _Component);

        var _super = _createSuper(DevToolsContainer);

        function DevToolsContainer() {
          var _this;

          _classCallCheck(this, DevToolsContainer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "devToolsToggle", _descriptor$l, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "devItems", _descriptor2$h, _assertThisInitialized(_this));

          _this.isActive = true;
          _this.game = null;
          _this.currentSpawnObjId = -1;
          return _this;
        }

        _createClass(DevToolsContainer, [{
          key: "start",
          value: function start() {// this.devToolsToggle.on(Node.EventType.TOUCH_START, this.handleClickDevToolsButton)
            // this.prepareAllItems()
          }
        }, {
          key: "injectGameplay",
          value: function injectGameplay(game) {
            this.game = game;
          }
        }, {
          key: "hideAllButtons",
          value: function hideAllButtons() {
            var _this2 = this;

            this.getComponentsInChildren(Button).forEach(function (button) {
              var parent = button.node.parent;
              if (!parent) return;
              if (parent.name === _this2.devToolsToggle.name) return;
              parent.active = false;
            });
          }
        }, {
          key: "showAllButtons",
          value: function showAllButtons() {
            var _this3 = this;

            this.getComponentsInChildren(Button).forEach(function (button) {
              var parent = button.node.parent;
              if (!parent) return;
              if (parent.name === _this3.devToolsToggle.name) return;
              parent.active = true;
            });
          }
        }, {
          key: "handleClickDevToolsButton",
          value: function handleClickDevToolsButton() {
            if (this.isActive) {
              this.hideAllButtons();
              this.isActive = false;
            } else {
              this.showAllButtons();
              this.isActive = true;
            }
          } // ? Callback for ResetDataButton

        }, {
          key: "handleResetData",
          value: function handleResetData() {
            //@ts-expect-error waiting update core
            game.player.setPlayerData(window.__defaultData);
          }
        }, {
          key: "handleNextLevel",
          value: function () {
            var _handleNextLevel = _asyncToGenerator(function* () {
              yield this.finishMatch();
              this.node.scene.emit(GameplayEvents.NEXT_LEVEL, {});
            });

            function handleNextLevel() {
              return _handleNextLevel.apply(this, arguments);
            }

            return handleNextLevel;
          }()
        }, {
          key: "handlePrevLevel",
          value: function () {
            var _handlePrevLevel = _asyncToGenerator(function* () {
              var _this$game, _this$game$getGameDat;

              var level = (((_this$game = this.game) === null || _this$game === void 0 ? void 0 : (_this$game$getGameDat = _this$game.getGameData()) === null || _this$game$getGameDat === void 0 ? void 0 : _this$game$getGameDat.level) || 2) - 2;
              yield this.finishMatch();
              this.node.scene.emit(GameplayEvents.NEXT_LEVEL, {
                level: level
              });
            });

            function handlePrevLevel() {
              return _handlePrevLevel.apply(this, arguments);
            }

            return handlePrevLevel;
          }() // ? Callback for SelectLevelButton

        }, {
          key: "handleEnterSelectLevel",
          value: function () {
            var _handleEnterSelectLevel = _asyncToGenerator(function* (editBox) {
              var level = Number(editBox.string);
              yield this.finishMatch();
              this.node.scene.emit(GameplayEvents.NEXT_LEVEL, {
                level: level - 1
              });
            });

            function handleEnterSelectLevel(_x) {
              return _handleEnterSelectLevel.apply(this, arguments);
            }

            return handleEnterSelectLevel;
          }() // ? Callback for button

        }, {
          key: "handleClickWinLevelButton",
          value: function handleClickWinLevelButton() {
            this.node.scene.emit(GameplayEvents.GAME_FINISH);
          } // ? Callback for button

        }, {
          key: "handleClickTimeOutButton",
          value: function handleClickTimeOutButton() {
            this.node.scene.emit(GameplayEvents.TIME_OUT);
          } // ? Callback for button

        }, {
          key: "handleClickExplodeButton",
          value: function handleClickExplodeButton() {//TODO: check if in bomb level and make current time of the bomb to 1
          } // ? Callback for button

        }, {
          key: "handleFillItem",
          value: function handleFillItem() {
            this.node.scene.emit(GameplayEvents.ADD_HINT_ITEMS, 2);
            this.node.scene.emit(GameplayEvents.ADD_STORM_ITEMS, 2);
            this.node.scene.emit(GameplayEvents.ADD_THUNDER_ITEMS, 2);
            this.node.scene.emit(GameplayEvents.ADD_PLIERS_ITEMS, 2);
          }
        }, {
          key: "finishMatch",
          value: function () {
            var _finishMatch = _asyncToGenerator(function* () {
              try {
                if (!this.game) return;
                yield match$3.single.finish.processAsync();
              } catch (error) {
                console.warn('FinishState', error);
              }
            });

            function finishMatch() {
              return _finishMatch.apply(this, arguments);
            }

            return finishMatch;
          }()
        }]);

        return DevToolsContainer;
      }(Component), (_descriptor$l = _applyDecoratedDescriptor(_class2$n.prototype, "devToolsToggle", [_dec2$s], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$h = _applyDecoratedDescriptor(_class2$n.prototype, "devItems", [_dec3$n], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2$n)) || _class$I);

      cclegacy._RF.pop();

      var _dec$I, _dec2$t, _dec3$o, _dec4$f, _dec5$b, _dec6$8, _class$J, _class2$o, _descriptor$m, _descriptor2$i, _descriptor3$d, _descriptor4$9, _descriptor5$7;

      cclegacy._RF.push({}, "a3b0f6zU+1D97PyszsgST1H", "UIManager", undefined);

      var ccclass$J = _decorator.ccclass,
          property$p = _decorator.property;
      var _GameCore$f = GameCore,
          Utils$5 = _GameCore$f.Utils;
      var UIManager = (_dec$I = ccclass$J('UIManager'), _dec2$t = property$p(Clock), _dec3$o = property$p(Header), _dec4$f = property$p(DevToolsContainer), _dec5$b = property$p([Node$1]), _dec6$8 = property$p([Node$1]), _dec$I(_class$J = (_class2$o = /*#__PURE__*/function (_Component) {
        _inherits(UIManager, _Component);

        var _super = _createSuper(UIManager);

        function UIManager() {
          var _this;

          _classCallCheck(this, UIManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "clock", _descriptor$m, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "header", _descriptor2$i, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "devTools", _descriptor3$d, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topAnimNodes", _descriptor4$9, _assertThisInitialized(_this));

          _this.originTopNodesPos = [];

          _initializerDefineProperty(_this, "botAnimNodes", _descriptor5$7, _assertThisInitialized(_this));

          _this.originBotNodesPos = [];

          _this.showDevTools = function () {
            if (!_this.devTools) return;
            _this.devTools.node.active = true;
          };

          return _this;
        }

        _createClass(UIManager, [{
          key: "onLoad",
          value: function onLoad() {
            var _this2 = this;

            this.validateRequiredComponents();
            this.listensDevToolsEvents(); //? wait LayoutComponent finish layout (not dirty)

            director.once(Director.EVENT_AFTER_UPDATE, function () {
              _this2.saveOriginPos();

              _this2.initUIPos();
            });
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.clock) {
              throw new Error("".concat(this.node.name, ": clock not found"));
            }

            if (!this.header) {
              throw new Error("".concat(this.node.name, ": header not found"));
            }

            if (this.topAnimNodes.length === 0) {
              throw new Error("".concat(this.node.name, ": animNodes not found"));
            }

            if (this.botAnimNodes.length === 0) {
              throw new Error("".concat(this.node.name, ": animNodes not found"));
            }
          }
        }, {
          key: "saveOriginPos",
          value: function saveOriginPos() {
            var _this3 = this;

            this.topAnimNodes.forEach(function (node) {
              _this3.originTopNodesPos.push(node.position.clone());
            });
            this.botAnimNodes.forEach(function (node) {
              _this3.originBotNodesPos.push(node.position.clone());
            });
          }
        }, {
          key: "initUIPos",
          value: function initUIPos() {
            var _this4 = this;

            this.topAnimNodes.forEach(function (node, idx) {
              var startPos = _this4.originTopNodesPos[idx].clone();

              startPos.y += 200;
              node.setPosition(startPos);
            });
            this.botAnimNodes.forEach(function (node, idx) {
              var startPos = _this4.originBotNodesPos[idx].clone();

              startPos.y -= 200;
              node.setPosition(startPos);
            });
          }
        }, {
          key: "listensDevToolsEvents",
          value: function listensDevToolsEvents() {
            this.node.scene.on(DevTools.Events.UNLOCK_DEV_TOOLS, this.showDevTools);
          }
        }, {
          key: "initDevTools",
          value: function initDevTools(gameplay) {
            if (!this.devTools) return;
            this.devTools.node.active = Utils$5.Valid.isDebugger();
            this.devTools.injectGameplay(gameplay);
          }
        }, {
          key: "setLevelText",
          value: function setLevelText(level) {
            this.header.setLevelText(level);
          }
        }, {
          key: "initCountdown",
          value: function initCountdown() {
            this.clock.init();
          }
        }, {
          key: "setCountdownTime",
          value: function setCountdownTime(time) {
            this.clock.setTime(time);
          }
        }, {
          key: "startCountdown",
          value: function startCountdown() {
            this.clock.startCountdown();
          }
        }, {
          key: "pauseCountdown",
          value: function pauseCountdown() {
            this.clock.pause();
          }
        }, {
          key: "resumeCountdown",
          value: function resumeCountdown() {
            this.clock.resume();
          }
        }, {
          key: "setProgressBarPercentage",
          value: function setProgressBarPercentage(percentage) {
            this.header.setProgress(percentage);
          }
        }, {
          key: "setProgressStars",
          value: function setProgressStars(stars) {
            this.header.setProgressStars(stars);
          }
        }, {
          key: "startCountDownHeaderHintBubbleAnim",
          value: function startCountDownHeaderHintBubbleAnim() {
            this.header.startCountDownHintBubble();
          }
        }, {
          key: "stopCountDownHeaderHintBubbleAnim",
          value: function stopCountDownHeaderHintBubbleAnim() {
            this.header.stopCountDownHintBubble();
          }
        }, {
          key: "disableHeader",
          value: function disableHeader() {
            this.header.setButtonsSelectable(false);
          }
        }, {
          key: "enableHeader",
          value: function enableHeader() {
            this.header.setButtonsSelectable();
          }
        }, {
          key: "playExitAnimUI",
          value: function playExitAnimUI() {
            var _this5 = this;

            this.topAnimNodes.forEach(function (node, idx) {
              var des = _this5.originTopNodesPos[idx].clone();

              des.y += 200;
              var t = tween(node);
              t.to(0.17, {
                position: des
              }, {
                easing: 'backIn'
              }).start();
            });
            this.botAnimNodes.forEach(function (node, idx) {
              var des = _this5.originBotNodesPos[idx].clone();

              des.y -= 200;
              var t = tween(node);
              t.to(0.17, {
                position: des
              }, {
                easing: 'backIn'
              });
              t.start();
            });
          }
        }, {
          key: "playEntranceAnimUI",
          value: function playEntranceAnimUI() {
            var _this6 = this;

            this.topAnimNodes.forEach(function (node, idx) {
              var t = tween(node);
              t.to(0.2, {
                position: _this6.originTopNodesPos[idx]
              }, {
                easing: 'backOut'
              });
              t.start();
            });
            this.botAnimNodes.forEach(function (node, idx) {
              var t = tween(node);
              t.to(0.2, {
                position: _this6.originBotNodesPos[idx]
              }, {
                easing: 'backOut'
              });
              t.start();
            });
          }
        }, {
          key: "setInteractableItemButtons",
          value: function setInteractableItemButtons() {
            var interactable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            this.botAnimNodes.forEach(function (node) {
              var button = node.getComponent(Button);
              var item = node.getComponent(SpecialItem);

              if (button && item) {
                if (!interactable) {
                  button.interactable = false;
                  return;
                }

                if (item.canActivate()) {
                  button.interactable = true;
                }
              }
            });
          }
        }]);

        return UIManager;
      }(Component), (_descriptor$m = _applyDecoratedDescriptor(_class2$o.prototype, "clock", [_dec2$t], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$i = _applyDecoratedDescriptor(_class2$o.prototype, "header", [_dec3$o], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$d = _applyDecoratedDescriptor(_class2$o.prototype, "devTools", [_dec4$f], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4$9 = _applyDecoratedDescriptor(_class2$o.prototype, "topAnimNodes", [_dec5$b], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5$7 = _applyDecoratedDescriptor(_class2$o.prototype, "botAnimNodes", [_dec6$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2$o)) || _class$J);

      cclegacy._RF.pop();

      var _dec$J, _dec2$u, _dec3$p, _class$K, _class2$p, _descriptor$n, _descriptor2$j;

      cclegacy._RF.push({}, "157f203vjtMma2FDvAlyM6h", "Gameplay", undefined);

      var _globalThis$game$a = globalThis.game,
          player$7 = _globalThis$game$a.player,
          ads$1 = _globalThis$game$a.ads,
          event$d = _globalThis$game$a.event;
      var _GameCore$g = GameCore,
          Events$e = _GameCore$g.Events,
          Utils$6 = _GameCore$g.Utils;
      var ccclass$K = _decorator.ccclass,
          property$q = _decorator.property;
      var Gameplay = (_dec$J = ccclass$K('Gameplay'), _dec2$u = property$q(Grid), _dec3$p = property$q(PathDraw), _dec$J(_class$K = (_class2$p = /*#__PURE__*/function (_Component) {
        _inherits(Gameplay, _Component);

        var _super = _createSuper(Gameplay);

        function Gameplay() {
          var _this;

          _classCallCheck(this, Gameplay);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args)); // ? Why Managers and Controllers are not marked as @property?
          // * Because they are partial of Gameplay (system) and not a component of Gameplay (node)
          // ? Why use non-null assertion operator (!) for Managers, Controllers and Components?
          // * Because they are required components of Gameplay (node)
          // Managers (System)
          // Controllers (System)
          // Misc
          // Components

          _initializerDefineProperty(_this, "grid", _descriptor$n, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pathDraw", _descriptor2$j, _assertThisInitialized(_this));

          _this.gameData = null;
          _this.defaultData = null;
          _this.rescueTiles = [];

          _this.handleOpenScreen = function (payload) {
            var screenName = payload.screenName;
            var screens = [ScreenKeys.START_LEVEL_SCREEN, ScreenKeys.TIME_UP_SCREEN, ScreenKeys.LEVEL_COMPLETE_SCREEN, ScreenKeys.SETTINGS_SCREEN, ScreenKeys.GET_ITEM_SCREEN];

            if (screens.includes(screenName)) {
              _this.uiManager.disableHeader();

              _this.uiManager.playExitAnimUI();
            }
          };

          _this.handleCloseScreen = function (payload) {
            var screenName = payload.screenName;
            var screens = [ScreenKeys.START_LEVEL_SCREEN, ScreenKeys.SETTINGS_SCREEN, ScreenKeys.TIME_UP_SCREEN, ScreenKeys.GET_ITEM_SCREEN]; //? handle restart case, wait restart event confirm
            //? GameplayEvents.GAME_REPLAY fire after Events.CLOSING_SCREEN

            if (screenName === ScreenKeys.SETTINGS_SCREEN) {
              _this.uiManager.enableHeader();

              _this.scheduleOnce(_this.playEntranceAnimUI, 0);

              return;
            }

            if (screens.includes(screenName)) {
              _this.uiManager.enableHeader();

              _this.playEntranceAnimUI();
            }
          };

          _this.handlePauseGame = function () {
            _this.uiManager.pauseCountdown();
          };

          _this.handleResumeGame = function () {
            if (_this.stateManager.isPlaying()) {
              _this.uiManager.resumeCountdown();
            }

            _this.processCrazyGamesGameplayStop();
          };

          _this.handleReplayGame = function (gameEvent) {
            var data = _objectSpread2(_objectSpread2({}, _this.defaultData), gameEvent);

            _this.setGameData(data);

            _this.stateManager.initialize();

            _this.unschedule(_this.playEntranceAnimUI);
          };

          _this.handleFinishGame = function () {
            _this.stateManager.finish();
          };

          _this.handleNextLevel = function (gameEvent) {
            if (!_this.gameData) return;

            if (!gameEvent) {
              throw new Error('handleNextLevel: GameEvent payload is not defined');
            }

            var currentLevel = _this.gameData.level;
            var _gameEvent$level = gameEvent.level,
                level = _gameEvent$level === void 0 ? currentLevel : _gameEvent$level;

            if (!Utils$6.Valid.isNumber(level)) {
              throw new Error('Level is not defined');
            }

            var nextLevel = level + 1;
            player$7.setGameData({
              level: nextLevel
            });

            var data = _objectSpread2(_objectSpread2(_objectSpread2({}, _this.defaultData), gameEvent), {}, {
              level: nextLevel
            });

            _this.setGameData(data);

            _this.stateManager.initialize();

            console.log('Next level', nextLevel);
          };

          _this.handleThemeLoaded = function (frames) {
            var levelData = _this.levelManager.getLevelData();

            _this.setGameData({
              levelData: levelData
            });

            _this.grid.create(frames, levelData).then(function () {
              _this.stateManager.ready();
            });
          };

          _this.handleGridStartPlaying = function () {
            _this.grid.play();
          };

          _this.handleTileClick = function (tile) {
            _this.stateManager.playing();

            _this.grid.emitTileDown(tile);
          };

          _this.handleGridMatch = function (path, match) {
            _this.pathDraw.drawMatchPath(path);

            _this.comboManager.addCombo();

            _this.effectManager.playClearFXAt([match[0].node.worldPosition, match[1].node.worldPosition]);
          };

          _this.handleApplyGravity = function () {
            if (!_this.gameData) return;
            if (!_this.gameData.levelData) return;
            _this.grid.gravityList = parseLevelGravity(_this.gameData.levelData.mode);
          };

          _this.handleClockTimeout = function () {
            _this.stateManager.fail();
          };

          _this.handleStartRescue = function () {
            _this.inputBlocker.active = true;

            while (_this.rescueTiles.length > 0) {
              var tile = _this.rescueTiles.pop();

              tile === null || tile === void 0 ? void 0 : tile.restore();
            }
          };

          _this.handleFinishRescue = function () {
            _this.inputBlocker.active = false;
          };

          _this.handleBombExplode = function (tile) {
            _this.rescueTiles.push(tile);

            GeneralUtils.playSound(CodeSoundKeys.BOMB_EXPLODE_1);

            var position = _this.grid.toWorldPosition(tile.getCoord());

            _this.effectManager.createBombExplosionAt(new Vec3(position.x, position.y, 0));

            _this.inputBlocker.active = true;

            _this.scheduleOnce(function () {
              _this.inputBlocker.active = false;

              _this.handleClockTimeout();
            }, 0.8);
          };

          _this.handleUseItem = function () {
            _this.stateManager.playing();
          };

          _this.playEntranceAnimUI = function () {
            _this.uiManager.playEntranceAnimUI();
          };

          return _this;
        }

        _createClass(Gameplay, [{
          key: "onLoad",
          value: function onLoad() {
            this.initComponents();
            this.validateRequiredComponents();
            this.listenCoreEvents();
            this.listenInputEvents();
            this.showBannerAds();
          }
        }, {
          key: "initComponents",
          value: function initComponents() {
            this.initUIManager();
            this.initLevelManager();
            this.initThemeManager();
            this.initStateManager();
            this.initCoinManager();
            this.initEffectManager();
            this.initItemManager();
            this.initComboManager();
            this.initInputController();
            this.initInputBlocker();
          }
        }, {
          key: "initUIManager",
          value: function initUIManager() {
            var _this$node$parent;

            this.uiManager = (_this$node$parent = this.node.parent) === null || _this$node$parent === void 0 ? void 0 : _this$node$parent.getComponentInChildren(UIManager);
            this.uiManager.initDevTools(this);
          }
        }, {
          key: "initLevelManager",
          value: function initLevelManager() {
            this.levelManager = this.getComponent(LevelManager);
          }
        }, {
          key: "initThemeManager",
          value: function initThemeManager() {
            this.themeManager = this.getComponent(ThemeManager);
          }
        }, {
          key: "initStateManager",
          value: function initStateManager() {
            this.stateManager = this.getComponent(StateManager);
          }
        }, {
          key: "initCoinManager",
          value: function initCoinManager() {
            this.coinManager = this.getComponent(CoinManager);
          }
        }, {
          key: "initInputController",
          value: function initInputController() {
            this.inputController = this.getComponent(InputController);
          }
        }, {
          key: "initEffectManager",
          value: function initEffectManager() {
            this.effectManager = this.getComponent(EffectManager);
          }
        }, {
          key: "initItemManager",
          value: function initItemManager() {
            var _this2 = this;

            this.itemManager = this.getComponent(ItemManager);
            this.itemManager.syncItems();
            this.itemManager.items.forEach(function (item) {
              item.init(_this2);
            });
          }
        }, {
          key: "initComboManager",
          value: function initComboManager() {
            this.comboManager = this.getComponent(ComboManager);
          }
        }, {
          key: "initInputBlocker",
          value: function initInputBlocker() {
            this.inputBlocker = find('Canvas/InputBlocker');
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.grid) {
              throw new Error('Missing required Grid component');
            }

            if (!this.pathDraw) {
              throw new Error('Missing required PathDrawManager component');
            }

            if (!this.uiManager) {
              throw new Error('Missing required UIManager component');
            }

            if (!this.levelManager) {
              throw new Error('Missing required LevelManager component');
            }

            if (!this.themeManager) {
              throw new Error('Missing required ThemeManager component');
            }

            if (!this.coinManager) {
              throw new Error('Missing required CoinManager component');
            }

            if (!this.stateManager) {
              throw new Error('Missing required StateManager component');
            }

            if (!this.effectManager) {
              throw new Error('Missing required EffectManager component');
            }

            if (!this.itemManager) {
              throw new Error('Missing required ItemManager component');
            }

            if (!this.comboManager) {
              throw new Error('Missing required ComboManager component');
            }

            if (!this.inputController) {
              throw new Error('Missing required InputController component');
            }

            if (!this.inputBlocker) {
              throw new Error('Missing required InputBlocker node');
            }
          }
        }, {
          key: "showBannerAds",
          value: function showBannerAds() {
            var BannerDisplayAdOptions = GameCore.Configs.Ads.BannerDisplayAdOptions;
            var worldGameSize = View.instance.getVisibleSize();
            var bannerRemainSizeCss = CocosUtils.worldSizeToCssSize(worldGameSize.height * Ads.MAX_BOTTOM_BANNER_RATIO);
            BannerDisplayAdOptions.forEach(function (_ref) {
              var PlacementId = _ref.PlacementId,
                  Position = _ref.Position,
                  BannerHeight = _ref.BannerHeight;
              if (Position === 'bottom' && BannerHeight > bannerRemainSizeCss) return;
              ads$1.showBannerAdAsync(PlacementId)["catch"](function (_) {// Safe to ignore
              });
            });
          }
        }, {
          key: "listenCoreEvents",
          value: function listenCoreEvents() {
            event$d.clear(Events$e.OPENING_SCREEN);
            event$d.clear(Events$e.CLOSING_SCREEN);
            event$d.on(Events$e.OPENING_SCREEN, this.handleOpenScreen);
            event$d.on(Events$e.CLOSING_SCREEN, this.handleCloseScreen);
          }
        }, {
          key: "listenInputEvents",
          value: function listenInputEvents() {
            // this.node.scene.on(GameplayEvents.GAME_START, this.handleStartGame)
            this.node.scene.on(GameplayEvents.GAME_PAUSE, this.handlePauseGame);
            this.node.scene.on(GameplayEvents.GAME_RESUME, this.handleResumeGame);
            this.node.scene.on(GameplayEvents.GAME_REPLAY, this.handleReplayGame);
            this.node.scene.on(GameplayEvents.GAME_FINISH, this.handleFinishGame);
            this.node.scene.on(GameplayEvents.NEXT_LEVEL, this.handleNextLevel); // this.node.scene.on(GameplayEvents.START_OVER, this.handleStartOver)
            // this.node.scene.on(GameplayEvents.SELECT_LEVEL, this.handleSelectLevel)

            this.node.scene.on(GameplayEvents.LEVEL_THEME_LOADED, this.handleThemeLoaded);
            this.node.scene.on(GameplayEvents.GAME_START, this.handleGridStartPlaying);
            this.node.scene.on(GameplayEvents.TILE_CLICK, this.handleTileClick);
            this.node.scene.on(GameplayEvents.GRID_MATCH, this.handleGridMatch);
            this.node.scene.on(GameplayEvents.APPLY_GRAVITY, this.handleApplyGravity);
            this.node.scene.on(GameplayEvents.TIME_OUT, this.handleClockTimeout);
            this.node.scene.on(GameplayEvents.RESCUE_START, this.handleStartRescue);
            this.node.scene.on(GameplayEvents.RESCUE_FINISHED, this.handleFinishRescue);
            this.node.scene.on(GameplayEvents.BOMB_EXPLODE, this.handleBombExplode); // this.node.scene.on(GameplayEvents.SKIP_LEVEL, this.handleSkipLevel)

            this.node.scene.on(GameplayEvents.USE_HINT_ITEM, this.handleUseItem);
            this.node.scene.on(GameplayEvents.USE_STORM_ITEM, this.handleUseItem);
            this.node.scene.on(GameplayEvents.USE_THUNDER_ITEM, this.handleUseItem);
            this.node.scene.on(GameplayEvents.USE_PLIERS_ITEM, this.handleUseItem);
          }
        }, {
          key: "start",
          value: function start() {
            this.initData();
            this.initGame(); // this.initDevTools()
          }
        }, {
          key: "initData",
          value: function initData() {
            var _player$getGameData; // ! Debug only

            /* player.setGameData({
                level: 1,
                levelProgress: {},
                passAllLevels: false,
            }) */


            var _ref2 = (_player$getGameData = player$7.getGameData()) !== null && _player$getGameData !== void 0 ? _player$getGameData : {},
                _ref2$level = _ref2.level,
                level = _ref2$level === void 0 ? 1 : _ref2$level;

            var sceneData = this.getSceneData();

            var _ref3 = sceneData !== null && sceneData !== void 0 ? sceneData : {},
                _ref3$isContextProces = _ref3.isContextProcessing,
                isContextProcessing = _ref3$isContextProces === void 0 ? false : _ref3$isContextProces;

            this.defaultData = {
              level: level,
              levelData: LevelData[level - 1],
              isContextProcessing: false
            };
            this.setGameData(this.defaultData);
            this.setGameData({
              isContextProcessing: isContextProcessing
            });
          }
        }, {
          key: "initGame",
          value: function initGame() {
            if (!this.stateManager) {
              throw new Error('StateManager is not initialized');
            }

            this.stateManager.init();
            this.stateManager.initialize();
            this.themeManager.init();
            this.coinManager.init();
          }
        }, {
          key: "setGameData",
          value: function setGameData(data) {
            if (!data) return;
            this.gameData = _objectSpread2(_objectSpread2({}, this.gameData), data);
          }
        }, {
          key: "getGameData",
          value: function getGameData() {
            return this.gameData;
          }
        }, {
          key: "getSceneData",
          value: function getSceneData() {
            var _scene$getSceneData;

            var scene = this.node.scene.getComponent(SceneManager);
            return (_scene$getSceneData = scene === null || scene === void 0 ? void 0 : scene.getSceneData(this.node.scene.name)) !== null && _scene$getSceneData !== void 0 ? _scene$getSceneData : null;
          }
        }, {
          key: "processCrazyGamesGameplayStop",
          value: function processCrazyGamesGameplayStop() {
            if ('gameplayStop' in GameSDK) {
              GameSDK.gameplayStop();
            }
          }
        }, {
          key: "disableRewardAdsItemForCrazyGames",
          value: function disableRewardAdsItemForCrazyGames() {
            if (GameSDK.getSDKName() !== 'CrazyGames') return; //TODO: implement for CG
          }
        }]);

        return Gameplay;
      }(Component), (_descriptor$n = _applyDecoratedDescriptor(_class2$p.prototype, "grid", [_dec2$u], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$j = _applyDecoratedDescriptor(_class2$p.prototype, "pathDraw", [_dec3$p], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$p)) || _class$K);

      cclegacy._RF.pop();

      var _dec$K, _class$L;

      cclegacy._RF.push({}, "476e6UyMHFJyI2GmFP4KpHY", "BaseObject", undefined);

      var ccclass$L = _decorator.ccclass;
      var MESSAGE_NOT_FOUND = 'not found';
      var BaseObject = (_dec$K = ccclass$L('BaseObject'), _dec$K(_class$L = /*#__PURE__*/function (_Component) {
        _inherits(BaseObject, _Component);

        var _super = _createSuper(BaseObject);

        function BaseObject() {
          var _this;

          _classCallCheck(this, BaseObject);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.id = 0;
          _this.points = [];
          _this.body = null;
          _this.bodyType = ERigidBody2DType.Static;
          return _this;
        }

        _createClass(BaseObject, [{
          key: "sleep",
          value: function sleep() {
            if (!this.body) {
              this.body = this.getComponent(RigidBody2D);
              if (!this.body) return;
              this.bodyType = this.body.type;
            }

            this.enabled = false;
            this.body.sleep();
            this.body.type = ERigidBody2DType.Static;
          }
        }, {
          key: "wake",
          value: function wake() {
            this.enabled = true;

            if (!this.body) {
              this.body = this.getComponent(RigidBody2D);
              if (!this.body) return;
              this.bodyType = this.body.type;
            } else {
              this.body.wakeUp();
              this.body.type = this.bodyType;
            }
          }
        }, {
          key: "hide",
          value: function hide() {
            var _this$body;

            this.enabled = false;
            (_this$body = this.body) === null || _this$body === void 0 ? void 0 : _this$body.sleep();
            var skeleton = this.getComponent(sp.Skeleton);
            if (skeleton) skeleton.enabled = false;
            var sprite = this.getComponent(Sprite);
            if (sprite) sprite.enabled = false;
          }
        }, {
          key: "preHide",
          value: function preHide() {
            var _this$body2;

            this.enabled = false;
            (_this$body2 = this.body) === null || _this$body2 === void 0 ? void 0 : _this$body2.sleep();
            this.scheduleOnce(this.hide, 0.2);
          }
        }, {
          key: "appear",
          value: function appear() {
            this.enabled = true;
            var skeleton = this.getComponent(sp.Skeleton);
            if (skeleton) skeleton.enabled = true;
          }
        }, {
          key: "setSpineAnimation",
          value: function setSpineAnimation(animationName, isLoop) {
            var skeleton = this.getComponent(sp.Skeleton);
            skeleton && skeleton.setAnimation(0, animationName, isLoop);
          }
        }, {
          key: "getCurrentSpineAnimation",
          value: function getCurrentSpineAnimation() {
            var skeleton = this.getComponent(sp.Skeleton);
            if (!skeleton) return null;
            return skeleton.animation;
          }
        }, {
          key: "setEnable",
          value: function setEnable(enabled) {
            this.enabled = enabled;
          }
        }, {
          key: "angle",
          value: function angle(x, y) {
            var angle = Math.atan2(y, x);

            if (angle < 0) {
              angle += 2 * Math.PI;
            }

            return angle;
          }
        }, {
          key: "getVectorDataFromAToB",
          value: function getVectorDataFromAToB(a, b) {
            var dx = b.x - a.x;
            var dy = b.y - a.y;
            var vector = new Vec2(dx, dy).normalize();
            return {
              vector: vector,
              dx: dx,
              dy: dy
            };
          }
        }, {
          key: "kill",
          value: function kill() {
            this.node.active = false;
          }
        }, {
          key: "revive",
          value: function revive() {
            this.node.active = true;
          }
        }, {
          key: "throwMissingComponentException",
          value: function throwMissingComponentException(classConstructor) {
            var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MESSAGE_NOT_FOUND;
            this.exception(classConstructor.constructor.name, message);
          }
        }, {
          key: "throwMissingPropsException",
          value: function throwMissingPropsException(propName) {
            var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MESSAGE_NOT_FOUND;
            this.exception(propName, message);
          }
        }, {
          key: "exception",
          value: function exception(key, message) {
            throw new Error("".concat(this.constructor.name, ": ").concat(key, " ").concat(message));
          }
        }, {
          key: "lazyValidateCCProperties",
          value: function lazyValidateCCProperties() {
            var ccPropNames = this.getCCPropNames();
            var requiredCCPropNames = ccPropNames.filter(function (propName) {
              return !propName.startsWith('_');
            });

            var _iterator = _createForOfIteratorHelper(requiredCCPropNames),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var propName = _step.value;

                if (!this[propName]) {
                  this.throwMissingPropsException(propName);
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }, {
          key: "getCCPropNames",
          value: function getCCPropNames() {
            var emptyArray = [];
            if (!('__props__' in this.constructor)) return emptyArray;
            var ccPropNames = this.constructor.__props__;
            if (!Array.isArray(ccPropNames)) return emptyArray;

            var _iterator2 = _createForOfIteratorHelper(ccPropNames),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var propName = _step2.value;

                if (!GameCore.Utils.Valid.isString(propName)) {
                  return emptyArray;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return ccPropNames;
          }
        }]);

        return BaseObject;
      }(Component)) || _class$L);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "63645sZ1tlEZL2530kj5xkt", "CollectionSceneEvents", undefined);

      var CollectionSceneEvents = /*#__PURE__*/function (CollectionSceneEvents) {
        CollectionSceneEvents["FADE_IN_COMPLETE"] = "fade-in-complete";
        return CollectionSceneEvents;
      }(CollectionSceneEvents || {});

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "463cfEelRVL4KYgc4n5FJNz", "Map", undefined);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "4c577T9x2FPKpyFoVPXbav0", "ObjectIds", undefined);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "3f1dbbPrPVBy5lNYySV74Qq", "ThemeKeys", undefined);

      cclegacy._RF.pop();

      var _dec$L, _dec2$v, _dec3$q, _dec4$g, _dec5$c, _dec6$9, _dec7$7, _class$M, _class2$q, _descriptor$o, _descriptor2$k, _descriptor3$e, _descriptor4$a, _descriptor5$8, _descriptor6$6;

      cclegacy._RF.push({}, "48081huyTZGu5rme4u8PrdR", "Item", undefined);

      var ccclass$M = _decorator.ccclass,
          property$r = _decorator.property;
      var event$e = globalThis.game.event;
      var _GameCore$h = GameCore,
          Events$f = _GameCore$h.Events;
      var ItemButton = (_dec$L = ccclass$M('ItemButton'), _dec2$v = property$r(CCBoolean), _dec3$q = property$r(Button), _dec4$g = property$r({
        type: CCInteger
      }), _dec5$c = property$r(Label), _dec6$9 = property$r(Node$1), _dec7$7 = property$r(Node$1), _dec$L(_class$M = (_class2$q = /*#__PURE__*/function (_Component) {
        _inherits(ItemButton, _Component);

        var _super = _createSuper(ItemButton);

        function ItemButton() {
          var _this;

          _classCallCheck(this, ItemButton);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "isDebug", _descriptor$o, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "button", _descriptor2$k, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantity", _descriptor3$e, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantityLabel", _descriptor4$a, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "plusNode", _descriptor5$8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantityNode", _descriptor6$6, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ItemButton, [{
          key: "__preload",
          value: function __preload() {
            this.item = this.getComponent(SpecialItem);
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            this.quantity = this.item.loadQuantity();
            this.quantityLabel.string = "".concat(this.quantity);
            this.validateButton();
            this.node.scene.on(GridEvents.CREATE, this.validateButton, this);
            this.node.scene.on(GridEvents.MATCH_SUCCESS, this.validateButton, this);
            this.node.scene.on(GridEvents.CLEAR, this.validateButton, this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.item) {
              throw new Error('Item: BaseItem component not found');
            }

            if (!this.button) {
              throw new Error('Item: Button component not found');
            }

            if (!this.quantityLabel) {
              throw new Error('Item: Quantity label not found');
            }

            if (!this.plusNode) {
              throw new Error('Item: Plus node not found');
            }

            if (!this.quantityNode) {
              throw new Error('Item: Quantity node not found');
            }
          }
        }, {
          key: "validateButton",
          value: function validateButton() {
            var _this2 = this;

            console.log('VALIDATE BUTTON');
            this.canActivate().then(function (_canActivate) {
              _this2.button.interactable = true;
              _this2.plusNode.active = _this2.quantity == 0;
              _this2.quantityNode.active = _this2.quantity > 0;
            });
          } // ? Use for button event

        }, {
          key: "activate",
          value: function activate() {
            var _this3 = this;

            return new Promise(function (resolve) {
              if (_this3.quantity <= 0) {
                _this3.handleShowAddItemScreen();

                resolve();
                return;
              }

              _this3.item.activate().then(function () {
                if (!_this3.isDebug) {
                  _this3.quantity--;
                  _this3.quantityLabel.string = "".concat(_this3.quantity);

                  _this3.item.saveQuantity();
                }

                _this3.validateButton();

                resolve();
              });
            });
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            return Promise.resolve(true); // return new Promise((resolve) => {
            //     this.item.canActivate().then((canActivate) => {
            //         resolve(canActivate && this.quantity > 0)
            //     })
            // })
          }
        }, {
          key: "addQuantity",
          value: function addQuantity(quantity) {
            this.quantity += quantity;
            this.quantityLabel.string = "".concat(this.quantity);
            this.item.saveQuantity();
            this.validateButton();
          }
        }, {
          key: "clearQuantity",
          value: function clearQuantity() {
            this.quantity = 0;
            this.quantityLabel.string = "".concat(this.quantity);
            this.item.saveQuantity();
            this.validateButton();
          }
        }, {
          key: "handleShowAddItemScreen",
          value: function handleShowAddItemScreen() {
            event$e.emit(Events$f.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_ITEM_SCREEN,
              screenData: {
                item: ItemKeys.HINT,
                quantity: 1
              }
            });
          }
        }]);

        return ItemButton;
      }(Component), (_descriptor$o = _applyDecoratedDescriptor(_class2$q.prototype, "isDebug", [_dec2$v], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2$k = _applyDecoratedDescriptor(_class2$q.prototype, "button", [_dec3$q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$e = _applyDecoratedDescriptor(_class2$q.prototype, "quantity", [_dec4$g], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4$a = _applyDecoratedDescriptor(_class2$q.prototype, "quantityLabel", [_dec5$c], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$8 = _applyDecoratedDescriptor(_class2$q.prototype, "plusNode", [_dec6$9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$6 = _applyDecoratedDescriptor(_class2$q.prototype, "quantityNode", [_dec7$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$q)) || _class$M);

      cclegacy._RF.pop();

      var _dec$M, _dec2$w, _class$N, _class2$r, _descriptor$p, _descriptor2$l;

      cclegacy._RF.push({}, "5f81fe/+8tH8psYqgE7fk8a", "AddQuantityItem", undefined);

      var ccclass$N = _decorator.ccclass,
          property$s = _decorator.property;
      var AddQuantityItem = (_dec$M = property$s({
        type: ItemButton,
        displayName: 'Game item'
      }), _dec2$w = property$s({
        type: CCInteger,
        displayName: 'Quantity to add',
        min: 1
      }), ccclass$N(_class$N = (_class2$r = /*#__PURE__*/function (_DevItem) {
        _inherits(AddQuantityItem, _DevItem);

        var _super = _createSuper(AddQuantityItem);

        function AddQuantityItem() {
          var _this;

          _classCallCheck(this, AddQuantityItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "items", _descriptor$p, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "addQuantity", _descriptor2$l, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(AddQuantityItem, [{
          key: "activate",
          value: function activate() {
            var _this2 = this;

            this.items.forEach(function (item) {
              item.quantity += _this2.addQuantity;
            });
            return Promise.resolve(this.items);
          }
        }]);

        return AddQuantityItem;
      }(DevItem), (_descriptor$p = _applyDecoratedDescriptor(_class2$r.prototype, "items", [_dec$M], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2$l = _applyDecoratedDescriptor(_class2$r.prototype, "addQuantity", [_dec2$w], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2$r)) || _class$N);

      cclegacy._RF.pop();

      var _dec$N, _class$O, _class2$s, _descriptor$q;

      cclegacy._RF.push({}, "bbc9fepanJKcbSou8OK240e", "ClearQuantityItem", undefined);

      var ccclass$O = _decorator.ccclass,
          property$t = _decorator.property;
      var ClearQuantityItem = (_dec$N = property$t({
        type: ItemButton,
        displayName: 'Game item'
      }), ccclass$O(_class$O = (_class2$s = /*#__PURE__*/function (_DevItem) {
        _inherits(ClearQuantityItem, _DevItem);

        var _super = _createSuper(ClearQuantityItem);

        function ClearQuantityItem() {
          var _this;

          _classCallCheck(this, ClearQuantityItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "items", _descriptor$q, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ClearQuantityItem, [{
          key: "activate",
          value: function activate() {
            this.items.forEach(function (item) {
              item.quantity -= item.quantity;
            });
            return Promise.resolve(this.items);
          }
        }]);

        return ClearQuantityItem;
      }(DevItem), _descriptor$q = _applyDecoratedDescriptor(_class2$s.prototype, "items", [_dec$N], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2$s)) || _class$O);

      cclegacy._RF.pop();

      var _class$P;

      cclegacy._RF.push({}, "70e23r5Ji1DkZlbUvG5dijG", "ExplodeBombItem", undefined);

      var ccclass$P = _decorator.ccclass;

      var ExplodeBombItem = ccclass$P(_class$P = /*#__PURE__*/function (_DevItem) {
        _inherits(ExplodeBombItem, _DevItem);

        var _super = _createSuper(ExplodeBombItem);

        function ExplodeBombItem() {
          _classCallCheck(this, ExplodeBombItem);

          return _super.apply(this, arguments);
        }

        _createClass(ExplodeBombItem, [{
          key: "activate",
          value: function activate() {
            // TODO: search for bomb if found, call explode on it, else console.info that no bomb was found
            return Promise.resolve();
          }
        }]);

        return ExplodeBombItem;
      }(DevItem)) || _class$P;

      cclegacy._RF.pop();

      var _dec$O, _dec2$x, _class$Q, _class2$t, _descriptor$r, _descriptor2$m;

      cclegacy._RF.push({}, "29706IEMYVNdLVF/2a0STgf", "LevelLoaderItem", undefined);

      var ccclass$Q = _decorator.ccclass,
          property$u = _decorator.property;

      var LevelLoadingType = /*#__PURE__*/function (LevelLoadingType) {
        LevelLoadingType[LevelLoadingType["Next"] = 0] = "Next";
        LevelLoadingType[LevelLoadingType["Previous"] = 1] = "Previous";
        LevelLoadingType[LevelLoadingType["Specific"] = 2] = "Specific";
        return LevelLoadingType;
      }({});

      var LevelLoaderItem = (_dec$O = property$u({
        type: Enum(LevelLoadingType),
        displayName: 'Loading strategy'
      }), _dec2$x = property$u({
        type: EditBox,
        visible: function visible() {
          return this.loadingStrategy === LevelLoadingType.Specific;
        }
      }), ccclass$Q(_class$Q = (_class2$t = /*#__PURE__*/function (_DevItem) {
        _inherits(LevelLoaderItem, _DevItem);

        var _super = _createSuper(LevelLoaderItem);

        function LevelLoaderItem() {
          var _this;

          _classCallCheck(this, LevelLoaderItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "loadingStrategy", _descriptor$r, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelNumberInput", _descriptor2$m, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(LevelLoaderItem, [{
          key: "activate",
          value: function activate() {
            var _this$gameplay$getGam;

            if (!this.gameplay) return Promise.reject(new Error('Gameplay is not injected'));
            var currentLevel = (_this$gameplay$getGam = this.gameplay.getGameData()) === null || _this$gameplay$getGam === void 0 ? void 0 : _this$gameplay$getGam.level;
            if (currentLevel === undefined || currentLevel === null) return Promise.reject(new Error('Current level is not injected'));

            switch (this.loadingStrategy) {
              case LevelLoadingType.Next:
                return Promise.resolve(this.loadLevel(currentLevel + 1));

              case LevelLoadingType.Previous:
                return Promise.resolve(this.loadLevel(currentLevel - 1));

              case LevelLoadingType.Specific:
                if (!this.levelNumberInput) return Promise.reject(new Error('Level number input is not injected'));

                if (this.levelNumberInput.node.active) {
                  var level = Number(this.levelNumberInput.string); // hide level number input

                  this.levelNumberInput.node.active = false;
                  return Promise.resolve(level !== currentLevel ? this.loadLevel(level) : currentLevel);
                } // show level number input


                this.levelNumberInput.node.active = true;
                this.levelNumberInput.string = String(currentLevel);
                return Promise.resolve(currentLevel);

              default:
                return Promise.reject(new Error('Unknown loading strategy'));
            }
          }
        }, {
          key: "injectGameplay",
          value: function injectGameplay(gameplay) {
            _get(_getPrototypeOf(LevelLoaderItem.prototype), "injectGameplay", this).call(this, gameplay); // hide level number input


            if (this.levelNumberInput) this.levelNumberInput.node.active = false;
          }
        }, {
          key: "loadLevel",
          value: function loadLevel(level) {
            this.node.scene.emit(GameplayEvents.SELECT_LEVEL, {
              level: level
            });
            return level;
          }
        }]);

        return LevelLoaderItem;
      }(DevItem), (_descriptor$r = _applyDecoratedDescriptor(_class2$t.prototype, "loadingStrategy", [_dec$O], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return LevelLoadingType.Next;
        }
      }), _descriptor2$m = _applyDecoratedDescriptor(_class2$t.prototype, "levelNumberInput", [_dec2$x], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2$t)) || _class$Q);

      cclegacy._RF.pop();

      var _class$R;

      cclegacy._RF.push({}, "65afem4XlNJJbTvrAQshVpg", "ResetLevelItem", undefined);

      var ccclass$R = _decorator.ccclass;

      var ResetLevelItem = ccclass$R(_class$R = /*#__PURE__*/function (_DevItem) {
        _inherits(ResetLevelItem, _DevItem);

        var _super = _createSuper(ResetLevelItem);

        function ResetLevelItem() {
          _classCallCheck(this, ResetLevelItem);

          return _super.apply(this, arguments);
        }

        _createClass(ResetLevelItem, [{
          key: "activate",
          value: function activate() {
            // TODO: reset the current level
            return Promise.resolve();
          }
        }]);

        return ResetLevelItem;
      }(DevItem)) || _class$R;

      cclegacy._RF.pop();

      var _class$S;

      cclegacy._RF.push({}, "558e5/jnb5PorkUr6Twqh4/", "ResetProgressItem", undefined);

      var ccclass$S = _decorator.ccclass;

      var ResetProgressItem = ccclass$S(_class$S = /*#__PURE__*/function (_DevItem) {
        _inherits(ResetProgressItem, _DevItem);

        var _super = _createSuper(ResetProgressItem);

        function ResetProgressItem() {
          _classCallCheck(this, ResetProgressItem);

          return _super.apply(this, arguments);
        }

        _createClass(ResetProgressItem, [{
          key: "activate",
          value: function activate() {
            // TODO: reset the progression of the game
            return Promise.resolve();
          }
        }]);

        return ResetProgressItem;
      }(DevItem)) || _class$S;

      cclegacy._RF.pop();

      var _class$T;

      cclegacy._RF.push({}, "c94fbb5qZ5D5ImqWUX7ZNbo", "SetTimeoutItem", undefined);

      var ccclass$T = _decorator.ccclass;

      var SetTimeoutItem = ccclass$T(_class$T = /*#__PURE__*/function (_DevItem) {
        _inherits(SetTimeoutItem, _DevItem);

        var _super = _createSuper(SetTimeoutItem);

        function SetTimeoutItem() {
          _classCallCheck(this, SetTimeoutItem);

          return _super.apply(this, arguments);
        }

        _createClass(SetTimeoutItem, [{
          key: "activate",
          value: function activate() {
            // TODO: set the game's countdown timer to 0
            return Promise.resolve();
          }
        }]);

        return SetTimeoutItem;
      }(DevItem)) || _class$T;

      cclegacy._RF.pop();

      var _dec$P, _dec2$y, _dec3$r, _dec4$h, _class$U, _class2$u, _descriptor$s, _descriptor2$n, _descriptor3$f, _descriptor4$b;

      cclegacy._RF.push({}, "bebcdH/aItCYZdtvIEdw/Yu", "GridFX", undefined);

      var ccclass$U = _decorator.ccclass,
          property$v = _decorator.property;
      var GridFX = (_dec$P = property$v(Prefab), _dec2$y = property$v(Prefab), _dec3$r = property$v(Prefab), _dec4$h = property$v(Prefab), ccclass$U(_class$U = (_class2$u = /*#__PURE__*/function (_Component) {
        _inherits(GridFX, _Component);

        var _super = _createSuper(GridFX);

        function GridFX() {
          var _this;

          _classCallCheck(this, GridFX);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "rocket", _descriptor$s, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rocketExplosion", _descriptor2$n, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defuseExplosion", _descriptor3$f, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bombExplosion", _descriptor4$b, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(GridFX, [{
          key: "start",
          value: function start() {
            this.validateRequiredComponents();
            /*
            this.rocketPool = new AFPool<Node>(
                this.createRocket.bind(this),
                2,
                Rocket.getRocket,
                Rocket.returnRocket,
                Rocket.destroyRocket
            )
             this.rocketExplosionPool = new AFPool<Node>(
                this.createRocketExplosion.bind(this),
                2,
                RocketExplosion.getRocketExplosion,
                RocketExplosion.returnRocketExplosion,
                RocketExplosion.destroyRocketExplosion
            )
             this.defuseExplosionPool = new AFPool<Node>(
                this.createDefuseExplosion.bind(this),
                1,
                DefuseExplosion.getBombDefuseExplosion,
                DefuseExplosion.returnBombDefuseExplosion,
                DefuseExplosion.destroyBombDefuseExplosion
            )
             this.bombExplosionPool = new AFPool<Node>(
                this.createBombExplosion.bind(this),
                1,
                BombExplosion.getBombExplosion,
                BombExplosion.returnBombExplosion,
                BombExplosion.destroyBombExplosion
            )
            */
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.rocket) {
              console.error('GridFX: Rocket prefab is not assigned');
            }

            if (!this.rocketExplosion) {
              console.error('GridFX: Rocket Explosion prefab is not assigned');
            }

            if (!this.defuseExplosion) {
              console.error('GridFX: Defuse Explosion prefab is not assigned');
            }

            if (!this.bombExplosion) {
              console.error('GridFX: Bomb Explosion prefab is not assigned');
            }
          }
        }, {
          key: "fireRocket",
          value: function fireRocket(from, to) {
            var _this2 = this;

            var travelDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5; // tween a rocket, growing in size from 0% to 100% while moving from start to end, then from 100% to 0% and destroy

            var rocket = this.rocketPool.alloc();
            rocket.setPosition(from.x, from.y); // reset particle systems

            rocket.getComponentsInChildren(ParticleSystem2D).forEach(function (ps) {
              ps.resetSystem();
            });
            var rocketScale = rocket.getScale();
            rocket.setScale(0.5, 0.5, 0.5); // rocket is upright by default, rotate to align with from - to in quaternion

            rocket.setRotationFromEuler(0, 0, Math.atan2(to.y - from.y, to.x - from.x) * (180 / Math.PI) - 90);
            return new Promise(function (resolve) {
              tween(rocket).to(0.2, {
                scale: rocketScale
              }, {
                easing: 'sineOut'
              }).to(travelDuration, {
                position: to
              }, {
                easing: 'quartIn'
              }).to(0.1, {
                scale: new Vec3(0, 0, 0)
              }, {
                easing: 'sineOut',
                onComplete: function onComplete() {
                  rocket.setScale(rocketScale);

                  _this2.rocketPool.free(rocket);

                  resolve();
                }
              }).start();
            });
          }
        }, {
          key: "createExplosionAt",
          value: function createExplosionAt(position) {
            var _this3 = this;

            var rocketExplosion = this.rocketExplosionPool.alloc();
            rocketExplosion.setPosition(position);
            var anim = rocketExplosion.getComponent(Animation);
            return new Promise(function (resolve) {
              anim.once(Animation.EventType.FINISHED, function () {
                _this3.rocketExplosionPool.free(rocketExplosion);

                resolve();
              });
              anim.play();
            });
          }
        }, {
          key: "createDefuseExplosionAt",
          value: function createDefuseExplosionAt(position) {
            var _this4 = this;

            var defuseExplosion = this.defuseExplosionPool.alloc();
            defuseExplosion.setPosition(position);
            var anim = defuseExplosion.getComponent(Animation);
            return new Promise(function (resolve) {
              anim.once(Animation.EventType.FINISHED, function () {
                _this4.defuseExplosionPool.free(defuseExplosion);

                resolve();
              });
              anim.play();
            });
          }
        }, {
          key: "createBombExplosionAt",
          value: function createBombExplosionAt(position) {
            var _this5 = this; // AudioSystem.Instance.playSound(AudioKeys.BOMB_EXPLODE)


            var bombExplosion = this.bombExplosionPool.alloc();
            bombExplosion.setPosition(position);
            var anim = bombExplosion.getComponent(Animation);
            return new Promise(function (resolve) {
              anim.once(Animation.EventType.FINISHED, function () {
                _this5.bombExplosionPool.free(bombExplosion);

                resolve();
              });
              anim.play();
            });
          }
        }, {
          key: "createRocket",
          value: function createRocket() {
            return Rocket.createRocket(this.rocket, this.node);
          }
        }, {
          key: "createRocketExplosion",
          value: function createRocketExplosion() {
            return RocketExplosion.createRocketExplosion(this.rocketExplosion, this.node);
          }
        }, {
          key: "createDefuseExplosion",
          value: function createDefuseExplosion() {
            return DefuseExplosion$1.createDefuseExplosion(this.defuseExplosion, this.node);
          }
        }, {
          key: "createBombExplosion",
          value: function createBombExplosion() {
            return BombExplosion$1.createBombExplosion(this.bombExplosion, this.node);
          }
        }]);

        return GridFX;
      }(Component), (_descriptor$s = _applyDecoratedDescriptor(_class2$u.prototype, "rocket", [_dec$P], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$n = _applyDecoratedDescriptor(_class2$u.prototype, "rocketExplosion", [_dec2$y], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$f = _applyDecoratedDescriptor(_class2$u.prototype, "defuseExplosion", [_dec3$r], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$b = _applyDecoratedDescriptor(_class2$u.prototype, "bombExplosion", [_dec4$h], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$u)) || _class$U);

      var Rocket = /*#__PURE__*/function () {
        function Rocket() {
          _classCallCheck(this, Rocket);
        }

        _createClass(Rocket, null, [{
          key: "createRocket",
          value: function createRocket(rocketPrefab, parent) {
            var rocket = instantiate(rocketPrefab);
            parent.addChild(rocket);
            rocket.getComponent(UIOpacity).opacity = 0;
            return rocket;
          }
        }, {
          key: "destroyRocket",
          value: function destroyRocket(node) {
            node.destroy();
          }
        }, {
          key: "getRocket",
          value: function getRocket(node) {
            node.getComponent(UIOpacity).opacity = 255;
          }
        }, {
          key: "returnRocket",
          value: function returnRocket(node) {
            node.getComponent(UIOpacity).opacity = 0;
            node.getComponentsInChildren(ParticleSystem2D).forEach(function (ps) {
              ps.stopSystem();
            });
          }
        }]);

        return Rocket;
      }();

      var RocketExplosion = /*#__PURE__*/function () {
        function RocketExplosion() {
          _classCallCheck(this, RocketExplosion);
        }

        _createClass(RocketExplosion, null, [{
          key: "createRocketExplosion",
          value: function createRocketExplosion(rocketExplosionPrefab, parent) {
            var rocketExplosion = instantiate(rocketExplosionPrefab);
            parent.addChild(rocketExplosion);
            rocketExplosion.active = false;
            return rocketExplosion;
          }
        }, {
          key: "destroyRocketExplosion",
          value: function destroyRocketExplosion(node) {
            node.destroy();
          }
        }, {
          key: "getRocketExplosion",
          value: function getRocketExplosion(node) {
            node.active = true;
          }
        }, {
          key: "returnRocketExplosion",
          value: function returnRocketExplosion(node) {
            node.active = false;
          }
        }]);

        return RocketExplosion;
      }();

      var DefuseExplosion$1 = /*#__PURE__*/function () {
        function DefuseExplosion() {
          _classCallCheck(this, DefuseExplosion);
        }

        _createClass(DefuseExplosion, null, [{
          key: "createDefuseExplosion",
          value: function createDefuseExplosion(bombDefuseExplosionPrefab, parent) {
            var bombDefuseExplosion = instantiate(bombDefuseExplosionPrefab);
            parent.addChild(bombDefuseExplosion);
            bombDefuseExplosion.active = false;
            return bombDefuseExplosion;
          }
        }, {
          key: "destroyBombDefuseExplosion",
          value: function destroyBombDefuseExplosion(node) {
            node.destroy();
          }
        }, {
          key: "getBombDefuseExplosion",
          value: function getBombDefuseExplosion(node) {
            node.active = true;
          }
        }, {
          key: "returnBombDefuseExplosion",
          value: function returnBombDefuseExplosion(node) {
            node.active = false;
          }
        }]);

        return DefuseExplosion;
      }();

      var BombExplosion$1 = /*#__PURE__*/function () {
        function BombExplosion() {
          _classCallCheck(this, BombExplosion);
        }

        _createClass(BombExplosion, null, [{
          key: "createBombExplosion",
          value: function createBombExplosion(bombExplosionPrefab, parent) {
            var bombExplosion = instantiate(bombExplosionPrefab);
            parent.addChild(bombExplosion);
            bombExplosion.active = false;
            return bombExplosion;
          }
        }, {
          key: "destroyBombExplosion",
          value: function destroyBombExplosion(node) {
            node.destroy();
          }
        }, {
          key: "getBombExplosion",
          value: function getBombExplosion(node) {
            node.active = true;
          }
        }, {
          key: "returnBombExplosion",
          value: function returnBombExplosion(node) {
            node.active = false;
          }
        }]);

        return BombExplosion;
      }();

      cclegacy._RF.pop();

      var _dec$Q, _class$V;

      cclegacy._RF.push({}, "5262atLmldNy7Q3MtHgiSRI", "HintItem", undefined);

      var ccclass$V = _decorator.ccclass;
      var _globalThis$game$b = globalThis.game,
          player$8 = _globalThis$game$b.player,
          event$f = _globalThis$game$b.event;
      var _GameCore$i = GameCore,
          Events$g = _GameCore$i.Events;
      var HintItem = (_dec$Q = ccclass$V('HintItem'), _dec$Q(_class$V = /*#__PURE__*/function (_SpecialItem) {
        _inherits(HintItem, _SpecialItem);

        var _super = _createSuper(HintItem);

        function HintItem() {
          var _this;

          _classCallCheck(this, HintItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.isDrawingHint = false;

          _this.requestItem = function () {
            event$f.emit(Events$g.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_ITEM_SCREEN,
              screenData: {
                item: ItemKeys.HINT,
                quantity: 1
              }
            });
          };

          _this.loadQuantity = function () {
            var gameData = player$8.getGameData();
            return gameData ? gameData.items[ItemKeys.HINT] : 0;
          };

          _this.saveQuantity = function () {
            var gameData = player$8.getGameData();
            if (!gameData) return;
            player$8.setGameData({
              items: _objectSpread2(_objectSpread2({}, gameData.items), {}, _defineProperty({}, ItemKeys.HINT, _this.getQuantity()))
            });
          };

          _this.hideHint = function () {
            _this.pathDrawer.clearHintPath();

            _this.isDrawingHint = false;
          };

          return _this;
        }

        _createClass(HintItem, [{
          key: "init",
          value: function init(gameplay) {
            var _this2 = this;

            this.gridInstance = gameplay.grid;
            this.pathDrawer = gameplay.pathDraw;
            this.uiManager = gameplay.uiManager;
            this.setQuantity(this.loadQuantity());
            this.node.scene.on(GameplayEvents.ADD_HINT_ITEMS, function (quantity) {
              _this2.setQuantity(quantity);

              _this2.uiManager.playEntranceAnimUI();
            }, this);
            this.gridInstance.node.on(GridEvents.CREATE, this.applyActivationStatus, this);
            this.gridInstance.node.on(GridEvents.IDLE_EXIT, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = false;
            });
            this.gridInstance.node.on(GridEvents.IDLE_ENTER, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = true;

              _this2.applyActivationStatus();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            var _get3;

            this.node.scene.targetOff(this);
            var gridNode = this.gridInstance.node;

            if (gridNode === null || gridNode === undefined) {
              var _get2;

              (_get2 = _get(_getPrototypeOf(HintItem.prototype), "onDestroy", this)) === null || _get2 === void 0 ? void 0 : _get2.call(this);
              return;
            }

            this.gridInstance.node.targetOff(this);
            (_get3 = _get(_getPrototypeOf(HintItem.prototype), "onDestroy", this)) === null || _get3 === void 0 ? void 0 : _get3.call(this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            _get(_getPrototypeOf(HintItem.prototype), "validateRequiredComponents", this).call(this);

            if (!this.gridInstance) {
              throw new Error("".concat(this.node.name, ": gridInstance not found"));
            }

            if (!this.pathDrawer) {
              throw new Error("".concat(this.node.name, ": pathDrawer not found"));
            }
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            var uncleared = this.gridInstance.getUncleared();
            return uncleared.length > 0;
          }
        }, {
          key: "activate",
          value: function () {
            var _activate = _asyncToGenerator(function* () {
              if (this.isDrawingHint) return;

              if (this.getQuantity() <= 0) {
                yield _get(_getPrototypeOf(HintItem.prototype), "activate", this).call(this);
                return;
              }

              yield _get(_getPrototypeOf(HintItem.prototype), "activate", this).call(this);
              this.isDrawingHint = true;
              this.node.scene.emit(GameplayEvents.USE_HINT_ITEM);
              var path = findFirstMatch(this.gridInstance);

              if (path) {
                GeneralUtils.playSound(CodeSoundKeys.HINT_ITEM);
                this.pathDrawer.drawHintPath(path);
                var start = path[0].a;
                var end = path.slice(-1)[0].b;
                var startTile = this.gridInstance.getTileAt(start.x, start.y);
                var endTile = this.gridInstance.getTileAt(end.x, end.y);
                if (!startTile || !endTile) throw new Error('Tile is null');
                startTile.setHint(true);
                endTile.setHint(true);
              }

              this.gridInstance.node.once(GridMachineEvent.STATE_CHANGE, this.hideHint);
              this.gridInstance.node.once(GridEvents.TILE_SELECT, this.hideHint);
              this.node.scene.once(GameplayEvents.USE_STORM_ITEM, this.hideHint);
              this.node.scene.once(GameplayEvents.USE_THUNDER_ITEM, this.hideHint);
              this.node.scene.once(GameplayEvents.USE_PLIERS_ITEM, this.hideHint);
            });

            function activate() {
              return _activate.apply(this, arguments);
            }

            return activate;
          }()
        }]);

        return HintItem;
      }(SpecialItem)) || _class$V);

      cclegacy._RF.pop();

      var _dec$R, _class$W;

      cclegacy._RF.push({}, "3f4c1AB+jdNFqylpogoaiDZ", "PliersItem", undefined);

      var ccclass$W = _decorator.ccclass;
      var _globalThis$game$c = globalThis.game,
          player$9 = _globalThis$game$c.player,
          event$g = _globalThis$game$c.event;
      var _GameCore$j = GameCore,
          Events$h = _GameCore$j.Events;
      var PliersItem = (_dec$R = ccclass$W('PliersItem'), _dec$R(_class$W = /*#__PURE__*/function (_SpecialItem) {
        _inherits(PliersItem, _SpecialItem);

        var _super = _createSuper(PliersItem);

        function PliersItem() {
          var _this;

          _classCallCheck(this, PliersItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.requestItem = function () {
            event$g.emit(Events$h.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_ITEM_SCREEN,
              screenData: {
                item: ItemKeys.PLIERS,
                quantity: 1
              }
            });
          };

          _this.loadQuantity = function () {
            var gameData = player$9.getGameData();
            return gameData ? gameData.items[ItemKeys.PLIERS] : 0;
          };

          _this.saveQuantity = function () {
            var gameData = player$9.getGameData();
            if (!gameData) return;
            player$9.setGameData({
              items: _objectSpread2(_objectSpread2({}, gameData.items), {}, _defineProperty({}, ItemKeys.PLIERS, _this.getQuantity()))
            });
          };

          return _this;
        }

        _createClass(PliersItem, [{
          key: "init",
          value: function init(gameplay) {
            var _this2 = this;

            this.gridInstance = gameplay.grid;
            this.uiManager = gameplay.uiManager;
            this.effectManager = gameplay.effectManager;
            this.node.scene.on(GameplayEvents.ADD_PLIERS_ITEMS, function (quantity) {
              _this2.setQuantity(quantity);

              _this2.uiManager.playEntranceAnimUI();
            }, this);
            this.gridInstance.node.on(GridEvents.CREATE, this.applyActivationStatus, this);
            this.gridInstance.node.on(GridEvents.IDLE_EXIT, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = false;
            });
            this.gridInstance.node.on(GridEvents.IDLE_ENTER, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = true;

              _this2.applyActivationStatus();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            var _get3;

            this.node.scene.targetOff(this);
            var gridNode = this.gridInstance.node;

            if (gridNode === null || gridNode === undefined) {
              var _get2;

              (_get2 = _get(_getPrototypeOf(PliersItem.prototype), "onDestroy", this)) === null || _get2 === void 0 ? void 0 : _get2.call(this);
              return;
            }

            this.gridInstance.node.targetOff(this);
            (_get3 = _get(_getPrototypeOf(PliersItem.prototype), "onDestroy", this)) === null || _get3 === void 0 ? void 0 : _get3.call(this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            _get(_getPrototypeOf(PliersItem.prototype), "validateRequiredComponents", this).call(this);

            if (!this.gridInstance) {
              throw new Error("".concat(this.node.name, ": gridInstance not found"));
            }
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            var uncleared = this.gridInstance.getUncleared();
            return uncleared.find(function (tile) {
              return tile.special.getCurrentState() instanceof BombState;
            }) !== undefined;
          }
        }, {
          key: "activate",
          value: function () {
            var _activate = _asyncToGenerator(function* () {
              if (this.getQuantity() <= 0) {
                yield _get(_getPrototypeOf(PliersItem.prototype), "activate", this).call(this);
                return;
              }

              yield _get(_getPrototypeOf(PliersItem.prototype), "activate", this).call(this);
              this.node.scene.emit(GameplayEvents.USE_PLIERS_ITEM); // get random tile with bomb

              var tile = this.gridInstance.getTiles().find(function (tile) {
                return tile.special.getCurrentState() instanceof BombState;
              });

              if (!tile) {
                throw new Error('No bomb found');
              }

              var position = this.gridInstance.toWorldPosition(tile.getCoord());
              this.effectManager.createDefuseExplosionAt(new Vec3(position.x, position.y, 0));
              GeneralUtils.playSound(CodeSoundKeys.BOMB_DEFUSE);
              tile.special.updateState(new BasicState(tile));
              this.applyActivationStatus();
            });

            function activate() {
              return _activate.apply(this, arguments);
            }

            return activate;
          }()
        }]);

        return PliersItem;
      }(SpecialItem)) || _class$W);

      cclegacy._RF.pop();

      var _dec$S, _class$X;

      cclegacy._RF.push({}, "d6e51+oy6NCF7cKvf6KOWiu", "StormItem", undefined);

      var ccclass$X = _decorator.ccclass;
      var _globalThis$game$d = globalThis.game,
          player$a = _globalThis$game$d.player,
          event$h = _globalThis$game$d.event;
      var _GameCore$k = GameCore,
          Events$i = _GameCore$k.Events;

      var animateTornadoShuffle = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (config) {
          var grid = config.grid,
              syncConfig = config.config;
          grid.sortTilesForTornadoAnim();
          yield grid.flyTiles(_objectSpread2(_objectSpread2({}, syncConfig), {}, {
            padding: 10,
            stagger: 0
          }));
          grid.sortTiles();
          yield grid.syncTiles(_objectSpread2(_objectSpread2({}, syncConfig), {}, {
            stagger: 0
          }));
        });

        return function animateTornadoShuffle(_x) {
          return _ref.apply(this, arguments);
        };
      }();

      var StormItem = (_dec$S = ccclass$X('StormItem'), _dec$S(_class$X = /*#__PURE__*/function (_SpecialItem) {
        _inherits(StormItem, _SpecialItem);

        var _super = _createSuper(StormItem);

        function StormItem() {
          var _this;

          _classCallCheck(this, StormItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.requestItem = function () {
            event$h.emit(Events$i.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_ITEM_SCREEN,
              screenData: {
                item: ItemKeys.STORM,
                quantity: 1
              }
            });
          };

          _this.loadQuantity = function () {
            var gameData = player$a.getGameData();
            return gameData ? gameData.items[ItemKeys.STORM] : 0;
          };

          _this.saveQuantity = function () {
            var gameData = player$a.getGameData();
            if (!gameData) return;
            player$a.setGameData({
              items: _objectSpread2(_objectSpread2({}, gameData.items), {}, _defineProperty({}, ItemKeys.STORM, _this.getQuantity()))
            });
          };

          return _this;
        }

        _createClass(StormItem, [{
          key: "init",
          value: function init(gameplay) {
            var _this2 = this;

            this.gridInstance = gameplay.grid;
            this.effectManager = gameplay.effectManager;
            this.uiManager = gameplay.uiManager;
            this.node.scene.on(GameplayEvents.ADD_STORM_ITEMS, function (quantity) {
              _this2.setQuantity(quantity);

              _this2.uiManager.playEntranceAnimUI();
            }, this);
            this.gridInstance.node.on(GridEvents.CREATE, this.applyActivationStatus, this);
            this.gridInstance.node.on(GridEvents.IDLE_EXIT, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = false;
            });
            this.gridInstance.node.on(GridEvents.IDLE_ENTER, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = true;

              _this2.applyActivationStatus();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            var _get3;

            this.node.scene.targetOff(this);
            var gridNode = this.gridInstance.node;

            if (gridNode === null || gridNode === undefined) {
              var _get2;

              (_get2 = _get(_getPrototypeOf(StormItem.prototype), "onDestroy", this)) === null || _get2 === void 0 ? void 0 : _get2.call(this);
              return;
            }

            this.gridInstance.node.targetOff(this);
            (_get3 = _get(_getPrototypeOf(StormItem.prototype), "onDestroy", this)) === null || _get3 === void 0 ? void 0 : _get3.call(this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            _get(_getPrototypeOf(StormItem.prototype), "validateRequiredComponents", this).call(this);

            if (!this.gridInstance) {
              throw new Error("".concat(this.node.name, ": gridInstance not found"));
            }

            if (!this.effectManager) {
              throw new Error("".concat(this.node.name, ": effectManager not found"));
            }

            if (!this.uiManager) {
              throw new Error("".concat(this.node.name, ": uiManager not found"));
            }
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            var uncleared = this.gridInstance.getUncleared();
            return uncleared.length > 0;
          }
        }, {
          key: "activate",
          value: function () {
            var _activate = _asyncToGenerator(function* () {
              if (this.getQuantity() <= 0) {
                yield _get(_getPrototypeOf(StormItem.prototype), "activate", this).call(this);
                return;
              }

              yield _get(_getPrototypeOf(StormItem.prototype), "activate", this).call(this);
              this.node.scene.emit(GameplayEvents.USE_STORM_ITEM);
              this.uiManager.setInteractableItemButtons(false);
              this.uiManager.playExitAnimUI();
              GeneralUtils.muteMusic(true);
              GeneralUtils.playSound(CodeSoundKeys.SHUFFLE_ITEM);
              GeneralUtils.playSound(CodeSoundKeys.WIND);
              yield Promise.all([this.gridInstance.shuffleTiles({
                config: {
                  duration: 0.4,
                  easing: 'cubicInOut',
                  stagger: 0.5
                },
                animate: animateTornadoShuffle,
                padBeforeShuffle: {
                  easing: 'smooth',
                  padding: 10,
                  duration: 0.4,
                  stagger: 0
                }
              }), this.effectManager.playTornadoAnimation()]);
              this.uiManager.playEntranceAnimUI();
              this.uiManager.setInteractableItemButtons(true);
              GeneralUtils.muteMusic(false);
            });

            function activate() {
              return _activate.apply(this, arguments);
            }

            return activate;
          }()
        }]);

        return StormItem;
      }(SpecialItem)) || _class$X);

      cclegacy._RF.pop();

      var _dec$T, _class$Y;

      cclegacy._RF.push({}, "b30ffJjU2lAH5yu2NkzVVnO", "ThunderItem", undefined);

      var ccclass$Y = _decorator.ccclass;
      var _globalThis$game$e = globalThis.game,
          player$b = _globalThis$game$e.player,
          event$i = _globalThis$game$e.event;
      var _GameCore$l = GameCore,
          Events$j = _GameCore$l.Events;
      var ThunderItem = (_dec$T = ccclass$Y('ThunderItem'), _dec$T(_class$Y = /*#__PURE__*/function (_SpecialItem) {
        _inherits(ThunderItem, _SpecialItem);

        var _super = _createSuper(ThunderItem);

        function ThunderItem() {
          var _this;

          _classCallCheck(this, ThunderItem);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.requestItem = function () {
            event$i.emit(Events$j.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_ITEM_SCREEN,
              screenData: {
                item: ItemKeys.THUNDER,
                quantity: 1
              }
            });
          };

          _this.loadQuantity = function () {
            var gameData = player$b.getGameData();
            return gameData ? gameData.items[ItemKeys.THUNDER] : 0;
          };

          _this.saveQuantity = function () {
            var gameData = player$b.getGameData();
            if (!gameData) return;
            player$b.setGameData({
              items: _objectSpread2(_objectSpread2({}, gameData.items), {}, _defineProperty({}, ItemKeys.THUNDER, _this.getQuantity()))
            });
          };

          return _this;
        }

        _createClass(ThunderItem, [{
          key: "init",
          value: function init(gameplay) {
            var _this2 = this;

            this.gridInstance = gameplay.grid;
            this.effectManager = gameplay.effectManager;
            this.uiManager = gameplay.uiManager;
            this.node.scene.on(GameplayEvents.ADD_THUNDER_ITEMS, function (quantity) {
              _this2.setQuantity(quantity);

              _this2.uiManager.playEntranceAnimUI();
            }, this);
            this.gridInstance.node.on(GridEvents.CREATE, this.applyActivationStatus, this);
            this.gridInstance.node.on(GridEvents.IDLE_EXIT, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = false;
            });
            this.gridInstance.node.on(GridEvents.IDLE_ENTER, function () {
              // simply disable button. Animation will be too distracting
              _this2.button.interactable = true;

              _this2.applyActivationStatus();
            });
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            var _get3;

            this.node.scene.targetOff(this);
            var gridNode = this.gridInstance.node;

            if (gridNode === null || gridNode === undefined) {
              var _get2;

              (_get2 = _get(_getPrototypeOf(ThunderItem.prototype), "onDestroy", this)) === null || _get2 === void 0 ? void 0 : _get2.call(this);
              return;
            }

            this.gridInstance.node.targetOff(this);
            (_get3 = _get(_getPrototypeOf(ThunderItem.prototype), "onDestroy", this)) === null || _get3 === void 0 ? void 0 : _get3.call(this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            _get(_getPrototypeOf(ThunderItem.prototype), "validateRequiredComponents", this).call(this);

            if (!this.gridInstance) {
              throw new Error("".concat(this.node.name, ": gridInstance not found"));
            }

            if (!this.effectManager) {
              throw new Error("".concat(this.node.name, ": effectManager not found"));
            }

            if (!this.uiManager) {
              throw new Error("".concat(this.node.name, ": uiManager not found"));
            }
          }
        }, {
          key: "canActivate",
          value: function canActivate() {
            var uncleared = this.gridInstance.getUncleared();
            return uncleared.length >= 4;
          }
        }, {
          key: "activate",
          value: function () {
            var _activate = _asyncToGenerator(function* () {
              if (this.getQuantity() <= 0) {
                yield _get(_getPrototypeOf(ThunderItem.prototype), "activate", this).call(this);
                return;
              }

              yield _get(_getPrototypeOf(ThunderItem.prototype), "activate", this).call(this);
              this.node.scene.emit(GameplayEvents.USE_THUNDER_ITEM);
              this.uiManager.playExitAnimUI();
              this.uiManager.setInteractableItemButtons(false);
              GeneralUtils.muteMusic(true);
              var unclearedTiles = this.gridInstance.getUncleared();

              if (unclearedTiles.length < 4) {
                throw new Error('Not enough uncleared tiles');
              } // pick 2 random pairs


              var pair1 = this.gridInstance.getRandomActivePair();
              var pair2 = this.gridInstance.getRandomActivePair();

              while (pair1[0] === pair2[0] || pair1[1] === pair2[1] || pair1[0] === pair2[1] || pair1[1] === pair2[0]) {
                pair2 = this.gridInstance.getRandomActivePair();
              } // disable tiles' button


              this.gridInstance.setTileIgnoreInput(this.gridInstance.getTiles());
              var pairs = [pair1, pair2];
              yield this.effectManager.playThunderAnimation(pairs, this.gridInstance);
              this.uiManager.playEntranceAnimUI();
              this.uiManager.setInteractableItemButtons(true);
              GeneralUtils.muteMusic(false);
            });

            function activate() {
              return _activate.apply(this, arguments);
            }

            return activate;
          }()
        }]);

        return ThunderItem;
      }(SpecialItem)) || _class$Y);

      cclegacy._RF.pop();

      var _dec$U, _dec2$z, _dec3$s, _class$Z, _class2$v, _descriptor$t;

      cclegacy._RF.push({}, "0a97aK0agJOHb07cLs0JICj", "PathHolder", undefined);

      var ccclass$Z = _decorator.ccclass,
          property$w = _decorator.property,
          requireComponent$d = _decorator.requireComponent;
      var PathHolder = (_dec$U = ccclass$Z('PathHolder'), _dec2$z = requireComponent$d(UIOpacity), _dec3$s = property$w(Grid), _dec$U(_class$Z = _dec2$z(_class$Z = (_class2$v = /*#__PURE__*/function (_Component) {
        _inherits(PathHolder, _Component);

        var _super = _createSuper(PathHolder);

        function PathHolder() {
          var _this;

          _classCallCheck(this, PathHolder);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "grid", _descriptor$t, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(PathHolder, [{
          key: "onLoad",
          value: function onLoad() {
            this.uiOpacity = this.getComponent(UIOpacity);
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            var _this2 = this;

            this.grid.node.on(GridEvents.CREATE, function () {
              _this2.node.scale = _this2.grid.node.scale;
            }); // TODO: fix this

            /* this.node.scene.on('game-state-updated', (state: GameState) => {
                // if (state instanceof PauseState) {
                //     this.uiOpacity.opacity = 0
                // } else {
                //     this.uiOpacity.opacity = 255
                // }
            }) */
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.grid) {
              throw new Error("".concat(this.node.name, ": grid not found"));
            }

            if (!this.uiOpacity) {
              throw new Error("".concat(this.node.name, ": UIOpacity not found"));
            }
          }
        }]);

        return PathHolder;
      }(Component), _descriptor$t = _applyDecoratedDescriptor(_class2$v.prototype, "grid", [_dec3$s], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2$v)) || _class$Z) || _class$Z);

      cclegacy._RF.pop();

      var _dec$V, _dec2$A, _dec3$t, _dec4$i, _class$_, _class2$w, _descriptor$u, _descriptor2$o, _descriptor3$g;

      cclegacy._RF.push({}, "5cc7bAmTI1JL7nwLzZcp45u", "ErrorDrawer", undefined);

      var ccclass$_ = _decorator.ccclass,
          property$x = _decorator.property;
      var ErrorDrawer = (_dec$V = ccclass$_('ErrorDrawer'), _dec2$A = property$x(SpriteFrame), _dec3$t = property$x(SpriteFrame), _dec4$i = property$x(SpriteFrame), _dec$V(_class$_ = (_class2$w = /*#__PURE__*/function (_PathDrawer) {
        _inherits(ErrorDrawer, _PathDrawer);

        var _super = _createSuper(ErrorDrawer);

        function ErrorDrawer() {
          var _this;

          _classCallCheck(this, ErrorDrawer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "one", _descriptor$u, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "two", _descriptor2$o, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "error", _descriptor3$g, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ErrorDrawer, [{
          key: "start",
          value: function start() {
            _get(_getPrototypeOf(ErrorDrawer.prototype), "start", this).call(this);

            this.pathAppearDuration = 0;
          }
        }, {
          key: "drawPath",
          value: function drawPath(path) {
            var _this2 = this;

            this.clearPath();
            path.forEach(function (line, index) {
              var _lineNode$getComponen;

              var lineNode = _this2.linePool.alloc();

              (_lineNode$getComponen = lineNode.getComponent(Line)) === null || _lineNode$getComponen === void 0 ? void 0 : _lineNode$getComponen.setPoints(line.a, line.b);

              if (index !== 0) {
                var pointNode = _this2.pointPool.alloc();

                pointNode.setPosition(new Vec3(line.a.x, line.a.y, 0));
                var sprite = pointNode.getComponent(Sprite);

                if (index === 1 && path.length > 3) {
                  sprite.spriteFrame = _this2.one;
                } else if (index === 2 && path.length > 3) {
                  sprite.spriteFrame = _this2.two;
                } else {
                  sprite.spriteFrame = _this2.error;
                }
              }
            });

            if (path.length === 1) {
              var pointNode = this.pointPool.alloc();
              pointNode.setPosition(new Vec3(path[0].a.x + path[0].b.x, path[0].a.y + path[0].b.y, 0).multiplyScalar(0.5));
              pointNode.getComponent(Sprite).spriteFrame = this.error;
            }

            this.pathAppearDuration = 0.8;
          }
        }, {
          key: "update",
          value: function update(dt) {
            if (this.pathAppearDuration > 0) {
              this.pathAppearDuration -= dt;

              if (this.pathAppearDuration <= 0) {
                this.clearPath();
              }
            }
          }
        }]);

        return ErrorDrawer;
      }(PathDrawer), (_descriptor$u = _applyDecoratedDescriptor(_class2$w.prototype, "one", [_dec2$A], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$o = _applyDecoratedDescriptor(_class2$w.prototype, "two", [_dec3$t], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$g = _applyDecoratedDescriptor(_class2$w.prototype, "error", [_dec4$i], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$w)) || _class$_);

      cclegacy._RF.pop();

      cclegacy._RF.push({}, "b4e9bAcDQNDZalLUjb7sBx1", "BaseTile", undefined);

      cclegacy._RF.pop();

      var _dec$W, _dec2$B, _dec3$u, _class$$, _class2$x, _descriptor$v, _descriptor2$p;

      cclegacy._RF.push({}, "18bbbp5z2VHVKp4jjjmsAhu", "ThemeProgressBar", undefined);

      var ccclass$$ = _decorator.ccclass,
          property$y = _decorator.property;
      var ThemeProgressBar = (_dec$W = ccclass$$('ThemeProgressBar'), _dec2$B = property$y(Node$1), _dec3$u = property$y(Node$1), _dec$W(_class$$ = (_class2$x = /*#__PURE__*/function (_Component) {
        _inherits(ThemeProgressBar, _Component);

        var _super = _createSuper(ThemeProgressBar);

        function ThemeProgressBar() {
          var _this;

          _classCallCheck(this, ThemeProgressBar);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "progressBar", _descriptor$v, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressText", _descriptor2$p, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ThemeProgressBar, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.progressBar) {
              throw new Error('ThemeProgressBar: progressBar not found');
            }

            if (!this.progressText) {
              throw new Error('ThemeProgressBar: progressText not found');
            }
          }
        }, {
          key: "setProgress",
          value: function setProgress(progress, max) {
            var progressBarComponent = this.progressBar.getComponent(ProgressBar);

            if (!progressBarComponent) {
              throw new Error('ThemeProgressBar: progressBarComponent not found');
            }

            progressBarComponent.progress = progress / max;
            var progressTextComponent = this.progressText.getComponent(Label);

            if (!progressTextComponent) {
              throw new Error('ThemeProgressBar: progressTextComponent not found');
            }

            progressTextComponent.string = "".concat(progress, "/").concat(max);
          }
        }]);

        return ThemeProgressBar;
      }(Component), (_descriptor$v = _applyDecoratedDescriptor(_class2$x.prototype, "progressBar", [_dec2$B], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$p = _applyDecoratedDescriptor(_class2$x.prototype, "progressText", [_dec3$u], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$x)) || _class$$);

      cclegacy._RF.pop();

      var _dec$X, _dec2$C, _dec3$v, _dec4$j, _dec5$d, _dec6$a, _dec7$8, _class$10, _class2$y, _descriptor$w, _descriptor2$q, _descriptor3$h, _descriptor4$c, _descriptor5$9;

      cclegacy._RF.push({}, "aef0d6qo8hNUJ7qNl2wuT29", "ThemeBlock", undefined);

      var ccclass$10 = _decorator.ccclass,
          property$z = _decorator.property;
      var defaultBlock = {
        progress: 0,
        max: 10,
        isLocked: true
      };
      var ThemeBlock = (_dec$X = ccclass$10('ThemeBlock'), _dec2$C = property$z(Node$1), _dec3$v = property$z(Node$1), _dec4$j = property$z(Node$1), _dec5$d = property$z(CCString), _dec6$a = property$z(UIOpacity), _dec7$8 = property$z(CCBoolean), _dec$X(_class$10 = (_class2$y = /*#__PURE__*/function (_Component) {
        _inherits(ThemeBlock, _Component);

        var _super = _createSuper(ThemeBlock);

        function ThemeBlock() {
          var _this;

          _classCallCheck(this, ThemeBlock);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "mask", _descriptor$w, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor2$q, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lockIcon", _descriptor3$h, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "themeName", _descriptor4$c, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backgroundUI", _descriptor5$9, _assertThisInitialized(_this));

          _this.payload = defaultBlock;
          return _this;
        }

        _createClass(ThemeBlock, [{
          key: "isLocked",
          get: function get() {
            return this.payload.isLocked;
          },
          set: function set(value) {
            this.payload.isLocked = value;
            this.updateThemeBlockDisplay();
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.mask) {
              throw new Error('ThemeBlock: mask not found');
            }

            if (!this.progressBar) {
              throw new Error('ThemeBlock: progressBar not found');
            }

            if (!this.lockIcon) {
              throw new Error('ThemeBlock: lockIcon not found');
            }

            if (!this.themeName) {
              throw new Error('ThemeBlock: themeName not found');
            }

            if (!this.backgroundUI) {
              throw new Error('ThemeBlock: backgroundUI not found');
            }
          }
        }, {
          key: "updateThemeBlockDisplay",
          value: function updateThemeBlockDisplay() {
            var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBlock;
            var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            this.payload = payload;
            var progress = payload.progress,
                max = payload.max,
                isLocked = payload.isLocked;

            if (isLocked || !animate) {
              this.mask.active = isLocked;
              this.progressBar.active = !isLocked;
              this.lockIcon.active = isLocked;
            } else {
              this.animateUnlockedState();
            }

            if (isLocked) return;
            var progressBarComponent = this.progressBar.getComponent(ThemeProgressBar);

            if (!progressBarComponent) {
              throw new Error('ThemeBlock: progressBarComponent not found');
            }

            progressBarComponent.setProgress(progress, max);
          }
        }, {
          key: "animateUnlockedState",
          value: function animateUnlockedState() {
            var _this2 = this;

            var maskUIOpacity = this.mask.getComponent(UIOpacity);
            var progressBarUIOpacity = this.progressBar.getComponent(UIOpacity);
            var lockIconUIOpacity = this.lockIcon.getComponent(UIOpacity);

            if (!maskUIOpacity) {
              throw new Error('ThemeBlock: maskUIOpacity not found');
            }

            if (!lockIconUIOpacity) {
              throw new Error('ThemeBlock: lockIconUIOpacity not found');
            }

            if (!progressBarUIOpacity) {
              throw new Error('ThemeBlock: progressBarUIOpacity not found');
            }

            tween(maskUIOpacity).call(function () {
              var _maskUIOpacity$opacit;

              _this2.mask.active = true;
              maskUIOpacity.opacity = (_maskUIOpacity$opacit = maskUIOpacity.opacity) !== null && _maskUIOpacity$opacit !== void 0 ? _maskUIOpacity$opacit : 255;
            }).to(2, {
              opacity: 0
            }).call(function () {
              _this2.mask.active = false;
            }).start();
            tween(lockIconUIOpacity).call(function () {
              var _lockIconUIOpacity$op;

              _this2.lockIcon.active = true;
              lockIconUIOpacity.opacity = (_lockIconUIOpacity$op = lockIconUIOpacity.opacity) !== null && _lockIconUIOpacity$op !== void 0 ? _lockIconUIOpacity$op : 255;
            }).to(2, {
              opacity: 0
            }).call(function () {
              _this2.lockIcon.active = false;
            }).start();
            tween(progressBarUIOpacity).call(function () {
              progressBarUIOpacity.opacity = 0;
            }).to(2, {
              opacity: 255
            }).start();
          }
        }]);

        return ThemeBlock;
      }(Component), (_descriptor$w = _applyDecoratedDescriptor(_class2$y.prototype, "mask", [_dec2$C], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$q = _applyDecoratedDescriptor(_class2$y.prototype, "progressBar", [_dec3$v], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$h = _applyDecoratedDescriptor(_class2$y.prototype, "lockIcon", [_dec4$j], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$c = _applyDecoratedDescriptor(_class2$y.prototype, "themeName", [_dec5$d], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$9 = _applyDecoratedDescriptor(_class2$y.prototype, "backgroundUI", [_dec6$a], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2$y.prototype, "isLocked", [_dec7$8], Object.getOwnPropertyDescriptor(_class2$y.prototype, "isLocked"), _class2$y.prototype)), _class2$y)) || _class$10);

      cclegacy._RF.pop();

      var _dec$Y, _dec2$D, _dec3$w, _class$11, _class2$z, _descriptor$x;

      cclegacy._RF.push({}, "ddb55wgRM9HDqKeircOOV0e", "CollectionsScene", undefined);

      var ccclass$11 = _decorator.ccclass,
          disallowMultiple$d = _decorator.disallowMultiple,
          requireComponent$e = _decorator.requireComponent,
          property$A = _decorator.property;
      var _globalThis$game$f = globalThis.game,
          audio$2 = _globalThis$game$f.audio,
          storage$2 = _globalThis$game$f.storage;
      var CollectionsScene = (_dec$Y = ccclass$11('CollectionsScene'), _dec2$D = requireComponent$e([SceneManager]), _dec3$w = property$A(MultiBackground), _dec$Y(_class$11 = disallowMultiple$d(_class$11 = _dec2$D(_class$11 = (_class2$z = /*#__PURE__*/function (_Component) {
        _inherits(CollectionsScene, _Component);

        var _super = _createSuper(CollectionsScene);

        function CollectionsScene() {
          var _this;

          _classCallCheck(this, CollectionsScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.animateThemeTabUnlock = null;

          _initializerDefineProperty(_this, "bgComp", _descriptor$x, _assertThisInitialized(_this));

          _this.handleFadeInComplete = function () {
            _this.handleThemeTabUnlock();

            var currentUnlockingTheme = _this.getCurrentUnlockingTheme();

            if (!currentUnlockingTheme) return;

            _this.scrollToCurrentUnlockingTheme(currentUnlockingTheme.theme);
          };

          _this.handleThemeTabUnlock = function () {
            if (!_this.animateThemeTabUnlock) return;
            var _this$animateThemeTab = _this.animateThemeTabUnlock,
                theme = _this$animateThemeTab.theme,
                progress = _this$animateThemeTab.progress,
                max = _this$animateThemeTab.max,
                isLocked = _this$animateThemeTab.isLocked;

            _this.setProgressToThemeTab(theme, progress, max, isLocked, true);

            _this.animateThemeTabUnlock = null;
          };

          _this.handleSwitchSceneEvent = function (payload) {
            var sceneName = payload.sceneName,
                sceneData = payload.sceneData;

            _this.scene.switchScene(sceneName, sceneData);
          };

          return _this;
        }

        _createClass(CollectionsScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.themeManager = this.getComponent(ThemeManager);
            this.scene.preloadScene('DashboardScene');
            this.getThemeScrollView();
            this.validateRequiredComponents();
            this.listenGameEvents();
            this.scene.listenSwitchSceneEvent(this.handleSwitchSceneEvent);
          }
        }, {
          key: "getThemeScrollView",
          value: function getThemeScrollView() {
            var _find;

            this.themeScrollView = (_find = find('Canvas/UI/ScreenContainer/ThemeScrollView')) === null || _find === void 0 ? void 0 : _find.getComponent(ScrollView);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('CollectionsScene: SceneManager not found');
            }

            if (!this.themeManager) {
              throw new Error('CollectionsScene: ThemeManager not found');
            }

            if (!this.themeScrollView) {
              throw new Error('CollectionsScene: ThemeScrollView not found');
            }

            if (!this.bgComp) {
              throw new Error('CollectionsScene: MultiBackground not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(CollectionSceneEvents.FADE_IN_COMPLETE, this.handleFadeInComplete);
          }
        }, {
          key: "start",
          value: function start() {
            this.themeManager.init();
            this.updateVolumeBackgroundMusic();
            this.updateThemeUnlockedProgress();
            this.updateCurBg();
          }
        }, {
          key: "updateThemeUnlockedProgress",
          value: function updateThemeUnlockedProgress() {
            var collectionsPayloads = this.themeManager.getCollectionUnlockProgress();
            var animateUnlock = storage$2.getStorageData('collection', 'animateLevelPackUnlock');
            var lastLevelPackId = storage$2.getStorageData('collection', 'lastLevelPack');
            if (collectionsPayloads.length === 0) return;

            for (var i = 0; i < collectionsPayloads.length; i++) {
              var element = collectionsPayloads[i];
              var theme = element.theme,
                  progress = element.progress,
                  max = element.max,
                  isLocked = element.isLocked;

              if (progress < max && !isLocked && animateUnlock && lastLevelPackId !== i + 1) {
                // skip the current theme
                // it will be animated when fade-in-complete event is fired
                this.animateThemeTabUnlock = element;
                storage$2.setStorageData('collection', 'animateLevelPackUnlock', false);
                storage$2.setStorageData('collection', 'lastLevelPack', i + 1);
                continue;
              }

              this.setProgressToThemeTab(theme, progress, max, isLocked);
            }
          }
        }, {
          key: "updateCurBg",
          value: function updateCurBg() {
            var currMap = this.themeManager.getCurrentProgress();
            if (!currMap) return;
            var currentMap = currMap.currentMap;
            this.bgComp.setCurrentMap(currentMap);
          }
        }, {
          key: "getCurrentUnlockingTheme",
          value: function getCurrentUnlockingTheme() {
            var collectionsPayloads = this.themeManager.getCollectionUnlockProgress();
            if (collectionsPayloads.length === 0) return null;
            var currentUnlockingTheme = collectionsPayloads[0];

            for (var i = 0; i < collectionsPayloads.length; i++) {
              var isLocked = collectionsPayloads[i].isLocked;

              if (!isLocked) {
                currentUnlockingTheme = collectionsPayloads[i];
              }
            }

            return currentUnlockingTheme;
          }
        }, {
          key: "scrollToCurrentUnlockingTheme",
          value: function scrollToCurrentUnlockingTheme(theme) {
            var contents = find('Canvas/UI/ScreenContainer/ThemeScrollView/Contents');
            if (!contents) return;
            var targetThemeTab = null;

            for (var i = 0; i < contents.children.length; i++) {
              var child = contents.children[i];
              var themeTab = child.getComponent(ThemeBlock);
              if (!themeTab) continue;
              if (themeTab.themeName !== theme) continue;
              targetThemeTab = themeTab;
              break;
            }

            if (!targetThemeTab) return;
            var y = targetThemeTab.node.position.y; // ? 407.5 is the offset between first theme tab and the top of the scroll view

            this.themeScrollView.scrollToOffset(new Vec2(0, (y + 407.5) * -1), 2);
          }
        }, {
          key: "setProgressToThemeTab",
          value: function setProgressToThemeTab(themeName, progress, max, isLocked) {
            var animate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var contents = find('Canvas/UI/ScreenContainer/ThemeScrollView/Contents');
            if (!contents) return;
            contents.children.forEach(function (child) {
              var themeTab = child.getComponent(ThemeBlock);
              if (!themeTab) return;
              if (themeTab.themeName !== themeName) return;
              themeTab.updateThemeBlockDisplay({
                progress: progress,
                max: max,
                isLocked: isLocked
              }, animate);
            });
          }
        }, {
          key: "updateVolumeBackgroundMusic",
          value: function updateVolumeBackgroundMusic() {
            // ? Channel 'global_music' has been created in 'LoadScene' as a persistent node for playing background music across all scenes.
            audio$2.setVolume(1, 'global_music');
          }
        }]);

        return CollectionsScene;
      }(Component), _descriptor$x = _applyDecoratedDescriptor(_class2$z.prototype, "bgComp", [_dec3$w], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2$z)) || _class$11) || _class$11) || _class$11);

      cclegacy._RF.pop();

      var _dec$Z, _dec2$E, _dec3$x, _dec4$k, _dec5$e, _dec6$b, _class$12, _class2$A, _descriptor$y, _descriptor2$r, _descriptor3$i, _descriptor4$d, _descriptor5$a;

      cclegacy._RF.push({}, "755d1r2cMRLvo4fObNWxss/", "CoinContainer", undefined);

      var ccclass$12 = _decorator.ccclass,
          property$B = _decorator.property;
      var event$j = globalThis.game.event;
      var _GameCore$m = GameCore,
          Events$k = _GameCore$m.Events;
      var ADD_COIN_AMOUNT = 40; // animation

      var MAX_COIN = 20;
      var DISTANCE_RANGE = [50, 200];
      var STAGGER = 0.02;
      var CoinContainer = (_dec$Z = ccclass$12('CoinContainer'), _dec2$E = property$B(Label), _dec3$x = property$B(CCBoolean), _dec4$k = property$B({
        type: Node$1,
        visible: function visible() {
          return this.animateCollection;
        }
      }), _dec5$e = property$B({
        type: Node$1,
        visible: function visible() {
          return this.animateCollection;
        }
      }), _dec6$b = property$B({
        type: Node$1,
        visible: function visible() {
          return this.animateCollection;
        }
      }), _dec$Z(_class$12 = (_class2$A = /*#__PURE__*/function (_Component) {
        _inherits(CoinContainer, _Component);

        var _super = _createSuper(CoinContainer);

        function CoinContainer() {
          var _this;

          _classCallCheck(this, CoinContainer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "coinLabel", _descriptor$y, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animateCollection", _descriptor2$r, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetPosition", _descriptor3$i, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinCollectionNode", _descriptor4$d, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinTemplate", _descriptor5$a, _assertThisInitialized(_this));

          _this.currentCoin = 0;
          _this.isAnimating = false;
          _this.coinCollection = [];
          return _this;
        }

        _createClass(CoinContainer, [{
          key: "setCoinText",
          value: function setCoinText(value) {
            this.coinLabel.string = value;
          }
        }, {
          key: "handleAddCoinButton",
          value: function handleAddCoinButton() {
            if (this.isAnimating) {
              return;
            }

            event$j.emit(Events$k.OPEN_SCREEN, {
              screenName: ScreenKeys.GET_COIN_SCREEN,
              screenData: {
                quantity: ADD_COIN_AMOUNT
              }
            });
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
            this.listenToEvents();
          }
        }, {
          key: "start",
          value: function start() {
            if (this.animateCollection && this.coinCollectionNode && this.coinTemplate) {
              this.prepareCoinCollection();
            }
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.coinLabel) {
              throw new Error('CoinContainer: coinLabel is not assigned');
            }
          }
        }, {
          key: "listenToEvents",
          value: function listenToEvents() {
            this.node.scene.on(GameplayEvents.COIN_CHANGED, this.updateCoins, this);
          }
        }, {
          key: "prepareCoinCollection",
          value: function prepareCoinCollection() {
            if (!this.animateCoinCollection || !this.coinCollectionNode || !this.coinTemplate) {
              throw new Error('CoinContainer: coin collection is not assigned');
            } // create FOLD_AMOUNT coins in collection node and hide them


            for (var i = 0; i < MAX_COIN; i++) {
              var coin = instantiate(this.coinTemplate);
              coin.setParent(this.coinCollectionNode);
              coin.setPosition(0, 0);
              coin.active = false;
              this.coinCollection.push(coin);
            }
          }
        }, {
          key: "updateCoins",
          value: function () {
            var _updateCoins = _asyncToGenerator(function* (value) {
              if (this.animateCollection) {
                yield this.animateCoinCollection(value.coins);
              }

              this.currentCoin = value.coins;
              this.setCoinText(value.displayString);
            });

            function updateCoins(_x) {
              return _updateCoins.apply(this, arguments);
            }

            return updateCoins;
          }()
        }, {
          key: "animateCoinCollection",
          value: function () {
            var _animateCoinCollection = _asyncToGenerator(function* (coins) {
              var _this2 = this;

              if (!this.animateCollection) {
                return;
              }

              var currentCoins = this.currentCoin;
              var shortened = Math.min(coins, MAX_COIN); // get `shortened` amount of coins from the collection and animate them

              var coinNodes = this.coinCollection.slice(0, shortened);
              if (coinNodes.length === 0) return;
              this.isAnimating = true;
              GeneralUtils.playSound(CodeSoundKeys.COLLECT_STOCK_COINS);
              var animations = coinNodes.map(function (coin, index) {
                return AnimUtils.runTweenAsync(_this2.getCoinTween(coin, CoinManager.getCoinDisplayString(currentCoins + index), index * STAGGER));
              });
              this.scheduleOnce(function () {
                return GeneralUtils.playSound(CodeSoundKeys.COLLECT_COINS);
              }, 1);
              yield Promise.all(animations);
              this.isAnimating = false;
            });

            function animateCoinCollection(_x2) {
              return _animateCoinCollection.apply(this, arguments);
            }

            return animateCoinCollection;
          }()
        }, {
          key: "getCoinTween",
          value: function getCoinTween(coin, nextCoinAmount) {
            var _this3 = this;

            var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var uiOpacity = coin.getComponent(UIOpacity);

            if (!uiOpacity) {
              throw new Error('CoinContainer: coin does not have UIOpacity component');
            }

            var rotation = randomRange(0, 2 * Math.PI);
            var targetX = randomRange(DISTANCE_RANGE[0], DISTANCE_RANGE[1]) * Math.cos(rotation);
            var targetY = randomRange(DISTANCE_RANGE[0], DISTANCE_RANGE[1]) * Math.sin(rotation);
            var ogScale = coin.scale; // animate coin from 0, 0 of the screen, appearing, moving in a random direction, for a random amount of distance, and then move to the target position

            return tween(coin).delay(delay).call(function () {
              coin.setScale(0, 0);
              coin.setPosition(0, 0);
              uiOpacity.opacity = 255;
              coin.active = true;
            }).to(0.5, {
              position: new Vec3(targetX, targetY, coin.position.z),
              scale: ogScale.clone()
            }, {
              easing: 'expoOut'
            }).to(1, {
              worldPosition: this.targetPosition.worldPosition.clone()
            }, {
              easing: 'cubicInOut'
            }).to(0.05, {}, {
              onUpdate: function onUpdate(_target, ratio) {
                if (!ratio) {
                  return;
                }

                uiOpacity.opacity = 255 - ratio * 255;
              }
            }).call(function () {
              uiOpacity.opacity = 0;
              coin.setScale(ogScale.clone());
              coin.setPosition(0, 0);
              coin.active = false;

              _this3.setCoinText(nextCoinAmount);
            });
          }
        }]);

        return CoinContainer;
      }(Component), (_descriptor$y = _applyDecoratedDescriptor(_class2$A.prototype, "coinLabel", [_dec2$E], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$r = _applyDecoratedDescriptor(_class2$A.prototype, "animateCollection", [_dec3$x], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3$i = _applyDecoratedDescriptor(_class2$A.prototype, "targetPosition", [_dec4$k], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4$d = _applyDecoratedDescriptor(_class2$A.prototype, "coinCollectionNode", [_dec5$e], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5$a = _applyDecoratedDescriptor(_class2$A.prototype, "coinTemplate", [_dec6$b], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2$A)) || _class$12);

      cclegacy._RF.pop();

      var _dec$_, _dec2$F, _dec3$y, _dec4$l, _class$13, _class2$B, _descriptor$z, _descriptor2$s, _descriptor3$j;

      cclegacy._RF.push({}, "f555belwQ1NHJr4np65OtcU", "NavManager", undefined);

      var ccclass$13 = _decorator.ccclass,
          property$C = _decorator.property;
      var event$k = globalThis.game.event;
      var NavManager = (_dec$_ = ccclass$13('NavManager'), _dec2$F = property$C(Node$1), _dec3$y = property$C(Node$1), _dec4$l = property$C(EventHandler), _dec$_(_class$13 = (_class2$B = /*#__PURE__*/function (_Component) {
        _inherits(NavManager, _Component);

        var _super = _createSuper(NavManager);

        function NavManager() {
          var _this;

          _classCallCheck(this, NavManager);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "selectorNode", _descriptor$z, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedButtonNode", _descriptor2$s, _assertThisInitialized(_this));

          _this.navButtons = [];

          _initializerDefineProperty(_this, "onNavigate", _descriptor3$j, _assertThisInitialized(_this));

          _this.isNavigating = false;
          return _this;
        }

        _createClass(NavManager, [{
          key: "currentButton",
          get: function get() {
            return this.selectedButton;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            var _this$selectedButtonN;

            this.navButtons = this.node.getComponentsInChildren('NavButton');
            this.selectedButton = (_this$selectedButtonN = this.selectedButtonNode) === null || _this$selectedButtonN === void 0 ? void 0 : _this$selectedButtonN.getComponent('NavButton');
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            this.initCurrentButton();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.selectedButtonNode) {
              throw new Error('NavManager: Selected button node not found');
            }

            if (!this.selectedButton) {
              throw new Error('NavManager: Selected button not found');
            }

            if (!this.selectorNode) {
              throw new Error('NavManager: Selector node not found');
            }
          }
        }, {
          key: "select",
          value: function () {
            var _select = _asyncToGenerator(function* (button) {
              if (this.isNavigating) {
                return;
              }

              if (!this.navButtons.includes(button)) {
                throw new Error('NavManager: Button not found');
              }

              if (button === this.selectedButton) {
                return;
              }

              if (button.isWIP) {
                this.handleWIPButton();
                return;
              }

              this.isNavigating = true;
              this.onNavigate.forEach(function (handler) {
                return handler.emit([button.buttonType, handler.customEventData]);
              });
              var deselectAnim = this.selectedButton.deselect();
              this.selectedButton = button;
              var selectorAnim = this.playSelectorAnimation();
              var selectAnim = button.select();
              yield Promise.all([deselectAnim, selectAnim, selectorAnim]);
              this.isNavigating = false;
            });

            function select(_x) {
              return _select.apply(this, arguments);
            }

            return select;
          }()
        }, {
          key: "selectUsingSceneTransition",
          value: function () {
            var _selectUsingSceneTransition = _asyncToGenerator(function* (button) {
              if (this.isNavigating) {
                return;
              }

              var targetScene;

              switch (button.buttonType) {
                case DashboardScreens.home:
                  targetScene = SceneKeys.DASHBOARD_SCENE;
                  break;

                case DashboardScreens.collections:
                  targetScene = SceneKeys.COLLECTIONS_SCENE;
                  break;

                default:
                  this.handleWIPButton();
                  return;
              }

              this.node.scene.emit(GameEvents.REQUEST_SWITCH_SCENE_LOADING, targetScene, {
                useBlockInputWithoutBg: true
              });
              yield this.select(button);
              event$k.emit(GameCore.Events.SWITCH_SCENE, {
                sceneName: targetScene
              });
            });

            function selectUsingSceneTransition(_x2) {
              return _selectUsingSceneTransition.apply(this, arguments);
            }

            return selectUsingSceneTransition;
          }()
        }, {
          key: "selectByType",
          value: function () {
            var _selectByType = _asyncToGenerator(function* (screenType) {
              var button = this.navButtons.find(function (button) {
                return button.buttonType === screenType;
              });

              if (!button) {
                throw new Error('NavManager: Button not found');
              }

              yield this.selectUsingSceneTransition(button);
            });

            function selectByType(_x3) {
              return _selectByType.apply(this, arguments);
            }

            return selectByType;
          }()
        }, {
          key: "handleWIPButton",
          value: function handleWIPButton() {
            event$k.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: 'Coming soon!'
              }
            });
          }
        }, {
          key: "initCurrentButton",
          value: function () {
            var _initCurrentButton = _asyncToGenerator(function* () {
              var _this2 = this;

              if (!this.currentButton || !this.navButtons.includes(this.currentButton)) {
                throw new Error('NavManager: Button not found');
              }

              this.onNavigate.forEach(function (handler) {
                return handler.emit([_this2.currentButton.buttonType, handler.customEventData]);
              });
              yield Promise.all([this.playSelectorAnimation(true), this.currentButton.select()]);
            });

            function initCurrentButton() {
              return _initCurrentButton.apply(this, arguments);
            }

            return initCurrentButton;
          }()
        }, {
          key: "playSelectorAnimation",
          value: function playSelectorAnimation() {
            var _this3 = this;

            var setScaleBeforeAnim = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var originalScale = new Vec3(1, 1, 1);
            var originalPosition = this.selectorNode.position.clone();
            var squashX = 1.2;
            var squashY = 0.8;
            var squashedScale = new Vec3(squashX * originalScale.x, squashY * originalScale.y, 1);

            if (setScaleBeforeAnim) {
              this.selectorNode.scale = new Vec3(0, 0, 1);
            } // ? This is a hack to manually update the position of the selector node
            // Without this, the selector node will follow the button node's position **before** it's rearranged by the layout which is delayed


            var it = {
              position: 0
            };
            return new Promise(function (resolve) {
              tween(it).to(0.5, {
                position: 1
              }, {
                onUpdate: function onUpdate(_target, ratio) {
                  if (ratio === null || ratio === undefined) {
                    return;
                  }

                  var calcRatio = ratio < 0.5 ? ratio * 2 : 1 - (ratio - 0.5) * 2;
                  var refScale = squashedScale.clone();
                  var nextScale = originalScale.clone().lerp(refScale, calcRatio);
                  _this3.selectorNode.scale = nextScale;
                  var easedValue = easing.quintInOut(ratio);
                  var targetX = _this3.selectedButton.node.position.x;
                  var nextX = originalPosition.x + (targetX - originalPosition.x) * easedValue;
                  _this3.selectorNode.position = new Vec3(nextX, originalPosition.y, 0);
                }
              }).call(resolve).start();
            });
          }
        }]);

        return NavManager;
      }(Component), (_descriptor$z = _applyDecoratedDescriptor(_class2$B.prototype, "selectorNode", [_dec2$F], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$s = _applyDecoratedDescriptor(_class2$B.prototype, "selectedButtonNode", [_dec3$y], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$j = _applyDecoratedDescriptor(_class2$B.prototype, "onNavigate", [_dec4$l], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2$B)) || _class$13);

      cclegacy._RF.pop();

      var _dec$$, _dec2$G, _dec3$z, _class$14, _class2$C, _descriptor$A;

      cclegacy._RF.push({}, "3b954Re2cRHvYJeBVAukYp9", "JourneyLevelAvatar", undefined);

      var ccclass$14 = _decorator.ccclass,
          property$D = _decorator.property,
          executeInEditMode$4 = _decorator.executeInEditMode;
      var JourneyLevelAvatar = (_dec$$ = ccclass$14('JourneyLevelAvatar'), _dec2$G = property$D({
        type: Sprite,
        displayName: 'Avatar node'
      }), _dec3$z = property$D({
        type: SpriteFrame,
        displayName: 'Avatar sprite'
      }), _dec$$(_class$14 = executeInEditMode$4(_class$14 = (_class2$C = /*#__PURE__*/function (_Component) {
        _inherits(JourneyLevelAvatar, _Component);

        var _super = _createSuper(JourneyLevelAvatar);

        function JourneyLevelAvatar() {
          var _this;

          _classCallCheck(this, JourneyLevelAvatar);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "sprite", _descriptor$A, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(JourneyLevelAvatar, [{
          key: "avatarSprite",
          get: function get() {
            var _this$sprite$spriteFr, _this$sprite;

            return (_this$sprite$spriteFr = (_this$sprite = this.sprite) === null || _this$sprite === void 0 ? void 0 : _this$sprite.spriteFrame) !== null && _this$sprite$spriteFr !== void 0 ? _this$sprite$spriteFr : null;
          },
          set: function set(value) {
            if (this.sprite) {
              this.sprite.spriteFrame = value;
            }
          }
        }]);

        return JourneyLevelAvatar;
      }(Component), (_descriptor$A = _applyDecoratedDescriptor(_class2$C.prototype, "sprite", [_dec2$G], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2$C.prototype, "avatarSprite", [_dec3$z], Object.getOwnPropertyDescriptor(_class2$C.prototype, "avatarSprite"), _class2$C.prototype)), _class2$C)) || _class$14) || _class$14);

      cclegacy._RF.pop();

      var _dec$10, _dec2$H, _dec3$A, _dec4$m, _dec5$f, _dec6$c, _class$15, _class2$D, _descriptor$B, _descriptor2$t;

      cclegacy._RF.push({}, "a392bibG75JPKzG0y2ZS2YY", "JourneyProgressBar", undefined);

      var ccclass$15 = _decorator.ccclass,
          property$E = _decorator.property,
          executeInEditMode$5 = _decorator.executeInEditMode;
      var JourneyProgressBar = (_dec$10 = ccclass$15('JourneyProgressBar'), _dec2$H = property$E(TapperedProgressBar), _dec3$A = property$E(Label), _dec4$m = property$E(CCInteger), _dec5$f = property$E(CCInteger), _dec6$c = property$E(CCString), _dec$10(_class$15 = executeInEditMode$5(_class$15 = (_class2$D = /*#__PURE__*/function (_Component) {
        _inherits(JourneyProgressBar, _Component);

        var _super = _createSuper(JourneyProgressBar);

        function JourneyProgressBar() {
          var _this;

          _classCallCheck(this, JourneyProgressBar);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "progressBar", _descriptor$B, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressLabel", _descriptor2$t, _assertThisInitialized(_this));

          _this.currentProgress = 10;
          _this.totalProgress = 10;
          _this.labelSeparator = '/';
          return _this;
        }

        _createClass(JourneyProgressBar, [{
          key: "total",
          get: function get() {
            return this.totalProgress;
          }
        }, {
          key: "current",
          get: function get() {
            return this.currentProgress;
          }
        }, {
          key: "separator",
          get: function get() {
            return this.labelSeparator;
          },
          set: function set(value) {
            this.labelSeparator = value;
            this.updateProgress();
          }
        }, {
          key: "setRange",
          value: function setRange(current, total) {
            this.totalProgress = total;

            if (current > total) {
              current = total;
            }

            this.currentProgress = current;
            this.updateProgress();
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "animateTo",
          value: function animateTo(progress) {
            var _this2 = this;

            return new Promise(function (resolve) {
              var end = progress / _this2.totalProgress;
              var duration = 1;
              tween(_this2.progressBar).to(duration, {
                progress: end
              }, {
                easing: 'quintInOut',
                onUpdate: function onUpdate(target) {
                  if (!(target instanceof TapperedProgressBar)) {
                    throw new Error('JourneyProgressBar: Invalid target type');
                  }

                  _this2.currentProgress = Math.round(target.progress * _this2.totalProgress);
                  _this2.progressBar.progress = target.progress;

                  _this2.updateProgressLabel();
                },
                onComplete: function onComplete() {
                  _this2.currentProgress = progress;

                  _this2.updateProgress();

                  resolve(progress);
                }
              }).start();
            });
          }
        }, {
          key: "updateProgress",
          value: function updateProgress() {
            this.progressBar.progress = this.currentProgress / this.totalProgress;
            this.updateProgressLabel();
          }
        }, {
          key: "updateProgressLabel",
          value: function updateProgressLabel() {
            this.progressLabel.string = "".concat(this.currentProgress).concat(this.separator).concat(this.totalProgress);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.progressBar) {
              throw new Error('JourneyProgressBar: Missing required component TapperedProgressBar');
            }

            if (!this.progressLabel) {
              throw new Error('JourneyProgressBar: Missing required component Label');
            }
          }
        }]);

        return JourneyProgressBar;
      }(Component), (_descriptor$B = _applyDecoratedDescriptor(_class2$D.prototype, "progressBar", [_dec2$H], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$t = _applyDecoratedDescriptor(_class2$D.prototype, "progressLabel", [_dec3$A], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2$D.prototype, "total", [_dec4$m], Object.getOwnPropertyDescriptor(_class2$D.prototype, "total"), _class2$D.prototype), _applyDecoratedDescriptor(_class2$D.prototype, "current", [_dec5$f], Object.getOwnPropertyDescriptor(_class2$D.prototype, "current"), _class2$D.prototype), _applyDecoratedDescriptor(_class2$D.prototype, "separator", [_dec6$c], Object.getOwnPropertyDescriptor(_class2$D.prototype, "separator"), _class2$D.prototype)), _class2$D)) || _class$15) || _class$15);

      cclegacy._RF.pop();

      var _dec$11, _dec2$I, _dec3$B, _class$16, _class2$E, _descriptor$C, _descriptor2$u, _dec4$n, _dec5$g, _dec6$d, _dec7$9, _dec8$5, _dec9$5, _dec10$4, _dec11$3, _dec12$2, _class4, _class5, _descriptor3$k, _descriptor4$e, _descriptor5$b, _descriptor6$7, _descriptor7$5, _descriptor8$4, _descriptor9$3, _descriptor10$2;

      cclegacy._RF.push({}, "8a41bfxLylDhLk57kewW14A", "JourneyProgressAnimator", undefined);

      var ccclass$16 = _decorator.ccclass,
          property$F = _decorator.property;
      var event$l = globalThis.game.event;
      var ProgressConfiguration = (_dec$11 = ccclass$16('ProgressConfiguration'), _dec2$I = property$F(SpriteFrame), _dec3$B = property$F(CCString), _dec$11(_class$16 = (_class2$E = /*#__PURE__*/_createClass(function ProgressConfiguration() {
        _classCallCheck(this, ProgressConfiguration);

        _initializerDefineProperty(this, "avatar", _descriptor$C, this);

        _initializerDefineProperty(this, "themeId", _descriptor2$u, this);
      }), (_descriptor$C = _applyDecoratedDescriptor(_class2$E.prototype, "avatar", [_dec2$I], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$u = _applyDecoratedDescriptor(_class2$E.prototype, "themeId", [_dec3$B], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$E)) || _class$16);
      var JourneyProgressAnimator = (_dec4$n = ccclass$16('JourneyProgressAnimator'), _dec5$g = property$F(JourneyProgressBar), _dec6$d = property$F(Animation), _dec7$9 = property$F(AnimationClip), _dec8$5 = property$F(AnimationClip), _dec9$5 = property$F(JourneyLevelAvatar), _dec10$4 = property$F(JourneyLevelAvatar), _dec11$3 = property$F(JourneyLevelAvatar), _dec12$2 = property$F(ProgressConfiguration), _dec4$n(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inherits(JourneyProgressAnimator, _Component);

        var _super = _createSuper(JourneyProgressAnimator);

        function JourneyProgressAnimator() {
          var _this;

          _classCallCheck(this, JourneyProgressAnimator);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "progressBar", _descriptor3$k, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animator", _descriptor4$e, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelUpAnimation", _descriptor5$b, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resetAnimation", _descriptor6$7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "currentLevelAvatar", _descriptor7$5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextLevelAvatar", _descriptor8$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextLevelAvatarPlaceholder", _descriptor9$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressConfigs", _descriptor10$2, _assertThisInitialized(_this));

          _this.isAnimating = false;
          return _this;
        }

        _createClass(JourneyProgressAnimator, [{
          key: "setRange",
          value: function setRange(current, total) {
            this.progressBar.setRange(current, total);
          }
        }, {
          key: "animateTo",
          value: function () {
            var _animateTo = _asyncToGenerator(function* (current) {
              if (this.isAnimating) {
                console.warn('JourneyProgressAnimator: animation already in progress');
                return Promise.resolve(-1);
              }

              this.isAnimating = true;
              var r = yield this.progressBar.animateTo(current);
              this.isAnimating = false;
              return r;
            });

            function animateTo(_x) {
              return _animateTo.apply(this, arguments);
            }

            return animateTo;
          }()
        }, {
          key: "animateToNextLevel",
          value: function () {
            var _animateToNextLevel = _asyncToGenerator(function* (nextProgress, nextTotal, prevThemeId, nextThemeId) {
              if (this.isAnimating) {
                console.warn('JourneyProgressAnimator: animation already in progress');
                return Promise.resolve(-1);
              }

              this.isAnimating = true;
              this.setAvatar(nextThemeId, this.nextLevelAvatarPlaceholder);
              yield this.progressBar.animateTo(this.progressBar.total);
              yield this.playAnimation(this.levelUpAnimation);
              this.setCurrentLevelAvatar(prevThemeId);
              this.setNextLevelAvatar(nextThemeId);
              yield this.playAnimation(this.resetAnimation);
              this.progressBar.setRange(nextTotal, nextTotal);
              yield this.progressBar.animateTo(0);
              yield this.progressBar.animateTo(nextProgress);
              this.isAnimating = false;
              return nextProgress;
            });

            function animateToNextLevel(_x2, _x3, _x4, _x5) {
              return _animateToNextLevel.apply(this, arguments);
            }

            return animateToNextLevel;
          }()
        }, {
          key: "playAnimation",
          value: function playAnimation(clip) {
            var _this2 = this;

            return new Promise(function (resolve) {
              _this2.animator.once(Animation.EventType.FINISHED, function () {
                resolve();
              });

              _this2.animator.play(clip.name);
            });
          }
        }, {
          key: "getSpriteFrameByThemeId",
          value: function getSpriteFrameByThemeId(themeId) {
            var config = this.progressConfigs.find(function (config) {
              return config.themeId === themeId;
            });

            if (!config) {
              throw new Error("JourneyProgressController: config not found for themeId ".concat(themeId));
            }

            return config.avatar;
          }
        }, {
          key: "setAvatar",
          value: function setAvatar(themeId, avatar) {
            var spriteFrame = this.getSpriteFrameByThemeId(themeId);
            avatar.avatarSprite = spriteFrame;
          }
        }, {
          key: "setCurrentLevelAvatar",
          value: function setCurrentLevelAvatar(themeId) {
            this.setAvatar(themeId, this.currentLevelAvatar);
          }
        }, {
          key: "setNextLevelAvatar",
          value: function setNextLevelAvatar(themeId) {
            this.setAvatar(themeId, this.nextLevelAvatar);
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            // ! test level up animation
            // call `game.event.emit('DashboardScene-Journey-Progress-LevelUp')` on the browser console
            this.callback = this.testAnimation.bind(this);
            event$l.on('DashboardScene-Journey-Progress-LevelUp', this.callback);
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            // ! test level up animation
            event$l.off('DashboardScene-Journey-Progress-LevelUp', this.callback);
          }
        }, {
          key: "testAnimation",
          value: function testAnimation() {
            this.animateToNextLevel(0, 10, 'autumn', 'summer');
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            var _this3 = this;

            if (!this.currentLevelAvatar) {
              throw new Error('JourneyProgressController: currentLevelAvatar not found');
            }

            if (!this.nextLevelAvatar) {
              throw new Error('JourneyProgressController: nextLevelAvatar not found');
            }

            if (!this.progressBar) {
              throw new Error('JourneyProgressController: progressBar not found');
            }

            if (this.progressConfigs.length === 0) {
              throw new Error('JourneyProgressController: add some progressConfigs');
            }

            if (!this.animator) {
              throw new Error('JourneyProgressController: animator not found');
            }

            if (!this.levelUpAnimation) {
              throw new Error('JourneyProgressController: levelUpAnimation not found');
            }

            if (!this.resetAnimation) {
              throw new Error('JourneyProgressController: restAnimation not found');
            }

            var clips = this.animator.clips;

            if (!clips.find(function (clip) {
              return clip && clip.name === _this3.levelUpAnimation.name;
            })) {
              throw new Error('JourneyProgressController: levelUpAnimation not found in animator');
            }

            if (!clips.find(function (clip) {
              return clip && clip.name === _this3.resetAnimation.name;
            })) {
              throw new Error('JourneyProgressController: restAnimation not found in animator');
            }
          }
        }]);

        return JourneyProgressAnimator;
      }(Component), (_descriptor3$k = _applyDecoratedDescriptor(_class5.prototype, "progressBar", [_dec5$g], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$e = _applyDecoratedDescriptor(_class5.prototype, "animator", [_dec6$d], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$b = _applyDecoratedDescriptor(_class5.prototype, "levelUpAnimation", [_dec7$9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$7 = _applyDecoratedDescriptor(_class5.prototype, "resetAnimation", [_dec8$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7$5 = _applyDecoratedDescriptor(_class5.prototype, "currentLevelAvatar", [_dec9$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8$4 = _applyDecoratedDescriptor(_class5.prototype, "nextLevelAvatar", [_dec10$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9$3 = _applyDecoratedDescriptor(_class5.prototype, "nextLevelAvatarPlaceholder", [_dec11$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10$2 = _applyDecoratedDescriptor(_class5.prototype, "progressConfigs", [_dec12$2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4);

      cclegacy._RF.pop();

      var _dec$12, _dec2$J, _dec3$C, _dec4$o, _dec5$h, _dec6$e, _dec7$a, _dec8$6, _class$17, _class2$F, _descriptor$D, _descriptor2$v, _descriptor3$l, _descriptor4$f, _descriptor5$c, _descriptor6$8;

      cclegacy._RF.push({}, "d48a1TnKg1F4YRzzKmQOD5k", "DashboardScene", undefined);

      var ccclass$17 = _decorator.ccclass,
          disallowMultiple$e = _decorator.disallowMultiple,
          requireComponent$f = _decorator.requireComponent,
          property$G = _decorator.property;
      var _globalThis$game$g = globalThis.game,
          language$4 = _globalThis$game$g.language,
          match$4 = _globalThis$game$g.match,
          event$m = _globalThis$game$g.event,
          storage$3 = _globalThis$game$g.storage,
          player$c = _globalThis$game$g.player;
      var _GameCore$n = GameCore,
          Events$l = _GameCore$n.Events; // SceneComponent
      // Required components: SceneManager

      var isFirstTimeGoToGameScene = true;
      var DashboardScene = (_dec$12 = ccclass$17('DashboardScene'), _dec2$J = requireComponent$f(SceneManager), _dec3$C = property$G(ThemeManager), _dec4$o = property$G(CoinManager), _dec5$h = property$G(JourneyProgressAnimator), _dec6$e = property$G(NavManager), _dec7$a = property$G(Label), _dec8$6 = property$G(MultiBackground), _dec$12(_class$17 = disallowMultiple$e(_class$17 = _dec2$J(_class$17 = (_class2$F = /*#__PURE__*/function (_Component) {
        _inherits(DashboardScene, _Component);

        var _super = _createSuper(DashboardScene);

        function DashboardScene() {
          var _this;

          _classCallCheck(this, DashboardScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "themeManager", _descriptor$D, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinManager", _descriptor2$v, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "journeyProgress", _descriptor3$l, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "navManager", _descriptor4$f, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playButtonLabel", _descriptor5$c, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgComp", _descriptor6$8, _assertThisInitialized(_this));

          _this.handleShowSwitchSceneLoading = function (targetScene, payload) {
            if (_this.scene.getScene(targetScene)) return;
            event$m.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: payload
            });
          };

          _this.handleSwitchSceneEvent = function (payload) {
            var sceneName = payload.sceneName,
                sceneData = payload.sceneData;

            var currMap = _this.themeManager.getCurrentProgress();

            _this.updateCurrentMapInStorage(currMap);

            _this.scene.switchScene(sceneName, sceneData);
          };

          return _this;
        }

        _createClass(DashboardScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.scene.preloadScene('CollectionsScene');
            this.validateRequiredComponents();
            this.listenGameEvents();
            this.scene.listenSwitchSceneEvent(this.handleSwitchSceneEvent);
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.REQUEST_SWITCH_SCENE_LOADING, this.handleShowSwitchSceneLoading);
          }
        }, {
          key: "start",
          value: function start() {
            this.themeManager.init();
            this.coinManager.init();
            this.updateVolumeBackgroundMusic();
            this.updateMapUnlockedProgress();
            return;
          }
        }, {
          key: "handlePlayButtonPress",
          value: function handlePlayButtonPress() {
            var _this2 = this;

            var playerId = player$c.getPlayerId();
            match$4.single.start.processAsync({
              playerId: playerId
            }).then(function () {
              var themePayload = _this2.themeManager.getCurrentProgress();

              storage$3.setStorageData('dashboard', 'lastMapPayload', themePayload);
              storage$3.setStorageData('dashboard', 'animateToCurrentLevel', false);
              storage$3.setStorageData('collection', 'lastLevelPack', themePayload.id);
              storage$3.setStorageData('collection', 'animateLevelPackUnlock', false); //TODO: Remove this when we have another method

              if (isFirstTimeGoToGameScene) {
                event$m.emit(GameCore.Events.OPEN_SCREEN, {
                  screenName: ScreenKeys.LOADING_SCREEN
                });
                isFirstTimeGoToGameScene = false;
              }

              event$m.emit(Events$l.SWITCH_SCENE, {
                sceneName: 'GameScene'
              });
            });
          }
        }, {
          key: "setProgressAndMap",
          value: function setProgressAndMap(payload) {
            var currentMap = payload.currentMap,
                nextMap = payload.nextMap,
                progress = payload.progress,
                max = payload.max;
            this.journeyProgress.setCurrentLevelAvatar(currentMap); // ! Handle case where nextMap is undefined. (i.e. last map)

            this.journeyProgress.setNextLevelAvatar(nextMap !== null && nextMap !== void 0 ? nextMap : currentMap);
            this.journeyProgress.setRange(progress, max);
            this.bgComp.setCurrentMap(currentMap);
          }
        }, {
          key: "setProgressAndAnimateMap",
          value: function () {
            var _setProgressAndAnimateMap = _asyncToGenerator(function* (fromProgress, toPayload) {
              this.setProgressAndMap(_objectSpread2(_objectSpread2({}, toPayload), {}, {
                progress: fromProgress
              }));
              yield this.journeyProgress.animateTo(toPayload.progress);
            });

            function setProgressAndAnimateMap(_x, _x2) {
              return _setProgressAndAnimateMap.apply(this, arguments);
            }

            return setProgressAndAnimateMap;
          }()
        }, {
          key: "setProgressAndAnimateLevelUp",
          value: function () {
            var _setProgressAndAnimateLevelUp = _asyncToGenerator(function* (lastMapPayload, nextMapPayload) {
              var _lastMapPayload$nextM, _nextMapPayload$nextM;

              this.setProgressAndMap(lastMapPayload);
              var lastMap = (_lastMapPayload$nextM = lastMapPayload.nextMap) !== null && _lastMapPayload$nextM !== void 0 ? _lastMapPayload$nextM : nextMapPayload.currentMap;
              var nextMap = (_nextMapPayload$nextM = nextMapPayload.nextMap) !== null && _nextMapPayload$nextM !== void 0 ? _nextMapPayload$nextM : nextMapPayload.currentMap;
              this.bgComp.animateToNextMap(lastMap);
              yield this.journeyProgress.animateToNextLevel(nextMapPayload.progress, nextMapPayload.max, lastMap, nextMap);
            });

            function setProgressAndAnimateLevelUp(_x3, _x4) {
              return _setProgressAndAnimateLevelUp.apply(this, arguments);
            }

            return setProgressAndAnimateLevelUp;
          }()
        }, {
          key: "updateLevelText",
          value: function updateLevelText(level) {
            var levelText = language$4.getText('level');
            this.playButtonLabel.string = levelText + " ".concat(level);
          }
        }, {
          key: "updateMapUnlockedProgress",
          value: function () {
            var _updateMapUnlockedProgress = _asyncToGenerator(function* () {
              var _player$getGameData$l, _player$getGameData;

              var level = (_player$getGameData$l = (_player$getGameData = player$c.getGameData()) === null || _player$getGameData === void 0 ? void 0 : _player$getGameData.level) !== null && _player$getGameData$l !== void 0 ? _player$getGameData$l : 1;
              this.updateLevelText(level);
              var dashboardStorage = storage$3.getStorage('dashboard');

              if (dashboardStorage === null || dashboardStorage === undefined) {
                throw new Error('DashboardScene: dashboardStorage not found');
              }

              var lastMap = dashboardStorage.lastMapPayload;
              var currMap = this.themeManager.getCurrentProgress();

              if (!dashboardStorage.animateToCurrentLevel) {
                this.setProgressAndMap(currMap);
                this.updateCurrentMapInStorage(currMap);
                return;
              }

              if (this.isSameMapProgress(lastMap, currMap)) {
                yield this.setProgressAndAnimateMap(lastMap.progress, currMap);
                this.updateCurrentMapInStorage(currMap);
                return;
              }

              yield this.setProgressAndAnimateLevelUp(lastMap, currMap);
              this.updateCurrentMapInStorage(currMap);
              yield this.navManager.selectByType(DashboardScreens.collections);
            });

            function updateMapUnlockedProgress() {
              return _updateMapUnlockedProgress.apply(this, arguments);
            }

            return updateMapUnlockedProgress;
          }()
        }, {
          key: "updateCurrentMapInStorage",
          value: function updateCurrentMapInStorage(currMap) {
            storage$3.setStorageData('dashboard', 'animateToCurrentLevel', false);
            storage$3.setStorageData('dashboard', 'lastMapPayload', currMap);
          }
        }, {
          key: "isSameMapProgress",
          value: function isSameMapProgress(self, other) {
            return self.currentMap === other.currentMap && self.nextMap === other.nextMap;
          }
        }, {
          key: "updateVolumeBackgroundMusic",
          value: function updateVolumeBackgroundMusic() {
            // ? Channel 'global_music' has been created in 'LoadScene' as a persistent node for playing background music across all scenes.
            GeneralUtils.turnUpBackgroundMusic();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('DashboardScene: SceneManager not found');
            }

            if (!this.themeManager) {
              throw new Error('DashboardScene: ThemeManager not found');
            }

            if (!this.coinManager) {
              throw new Error('DashboardScene: CoinManager not found');
            }

            if (!this.journeyProgress) {
              throw new Error('DashboardScene: journeyProgress not found');
            }

            if (!this.playButtonLabel) {
              throw new Error('DashboardScene: playButtonLabel not found');
            }

            if (!this.bgComp) {
              throw new Error('DashboardScene: bgComp not found');
            }
          }
        }]);

        return DashboardScene;
      }(Component), (_descriptor$D = _applyDecoratedDescriptor(_class2$F.prototype, "themeManager", [_dec3$C], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$v = _applyDecoratedDescriptor(_class2$F.prototype, "coinManager", [_dec4$o], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$l = _applyDecoratedDescriptor(_class2$F.prototype, "journeyProgress", [_dec5$h], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$f = _applyDecoratedDescriptor(_class2$F.prototype, "navManager", [_dec6$e], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$c = _applyDecoratedDescriptor(_class2$F.prototype, "playButtonLabel", [_dec7$a], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$8 = _applyDecoratedDescriptor(_class2$F.prototype, "bgComp", [_dec8$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$F)) || _class$17) || _class$17) || _class$17);

      cclegacy._RF.pop();

      var _dec$13, _dec2$K, _dec3$D, _dec4$p, _dec5$i, _class$18, _class2$G, _descriptor$E, _descriptor2$w, _descriptor3$m;

      cclegacy._RF.push({}, "3e9b1Lvuu1HCZpA0Cp+kt/q", "DashboardScreen", undefined);

      var ccclass$18 = _decorator.ccclass,
          property$H = _decorator.property,
          requireComponent$g = _decorator.requireComponent;
      var DashboardScreen = (_dec$13 = ccclass$18('DashboardScreen'), _dec2$K = requireComponent$g(UITransform), _dec3$D = property$H({
        type: Enum(DashboardScreens)
      }), _dec4$p = property$H({
        type: Node$1,
        displayName: 'Performance Intensive Nodes'
      }), _dec5$i = property$H(Node$1), _dec$13(_class$18 = _dec2$K(_class$18 = (_class2$G = /*#__PURE__*/function (_Component) {
        _inherits(DashboardScreen, _Component);

        var _super = _createSuper(DashboardScreen);

        function DashboardScreen() {
          var _this;

          _classCallCheck(this, DashboardScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "screenType", _descriptor$E, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "perfIntensiveNodes", _descriptor2$w, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "container", _descriptor3$m, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(DashboardScreen, [{
          key: "enableContainer",
          value: function enableContainer() {
            this.container.active = true;
          }
        }, {
          key: "disableContainer",
          value: function disableContainer() {
            this.container.active = false;
          }
        }, {
          key: "getWidth",
          value: function getWidth() {
            return this.uiTransform.width;
          }
        }, {
          key: "getScreenType",
          value: function getScreenType() {
            return this.screenType;
          }
        }, {
          key: "onNavigatedIn",
          value: function onNavigatedIn() {
            this.perfIntensiveNodes.forEach(function (node) {
              node.active = true;
            });
            return Promise.resolve();
          }
        }, {
          key: "onNavigatedOut",
          value: function onNavigatedOut() {
            this.perfIntensiveNodes.forEach(function (node) {
              node.active = false;
            });
            return Promise.resolve();
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.uiTransform = this.getComponent(UITransform);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.uiTransform) {
              throw new Error('DashboardScreen requires UITransform component');
            }
          }
        }]);

        return DashboardScreen;
      }(Component), (_descriptor$E = _applyDecoratedDescriptor(_class2$G.prototype, "screenType", [_dec3$D], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$w = _applyDecoratedDescriptor(_class2$G.prototype, "perfIntensiveNodes", [_dec4$p], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3$m = _applyDecoratedDescriptor(_class2$G.prototype, "container", [_dec5$i], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$G)) || _class$18) || _class$18);

      cclegacy._RF.pop();

      var _dec$14, _dec2$L, _dec3$E, _class$19, _class2$H, _descriptor$F, _descriptor2$x;

      cclegacy._RF.push({}, "8a702TrdCxBC5GB6snz4gCu", "HomeScreen", undefined);

      var ccclass$19 = _decorator.ccclass,
          property$I = _decorator.property;
      var _globalThis$game$h = globalThis.game,
          event$n = _globalThis$game$h.event,
          language$5 = _globalThis$game$h.language,
          player$d = _globalThis$game$h.player,
          match$5 = _globalThis$game$h.match;
      var _GameCore$o = GameCore,
          Events$m = _GameCore$o.Events;
      var HomeScreen = (_dec$14 = ccclass$19('HomeScreen'), _dec2$L = property$I(JourneyProgressAnimator), _dec3$E = property$I(Label), _dec$14(_class$19 = (_class2$H = /*#__PURE__*/function (_DashboardScreen) {
        _inherits(HomeScreen, _DashboardScreen);

        var _super = _createSuper(HomeScreen);

        function HomeScreen() {
          var _this;

          _classCallCheck(this, HomeScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "journeyProgress", _descriptor$F, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playButtonLabel", _descriptor2$x, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(HomeScreen, [{
          key: "setProgress",
          value: function setProgress(payload) {
            var currentTheme = payload.currentMap,
                nextTheme = payload.nextMap,
                progress = payload.progress,
                max = payload.max;
            this.journeyProgress.setCurrentLevelAvatar(currentTheme); // ! Handle case where nextTheme is undefined. (i.e. last theme)

            this.journeyProgress.setNextLevelAvatar(nextTheme !== null && nextTheme !== void 0 ? nextTheme : currentTheme);
            this.journeyProgress.setRange(progress, max);
          }
        }, {
          key: "updateLevelText",
          value: function updateLevelText(level) {
            var levelText = language$5.getText('level');
            this.playButtonLabel.string = levelText + " ".concat(level);
          }
        }, {
          key: "handlePlayerButtonPress",
          value: function handlePlayerButtonPress() {
            var playerId = player$d.getPlayerId();
            match$5.single.start.processAsync({
              playerId: playerId
            }).then(function () {
              event$n.emit(Events$m.SWITCH_SCENE, {
                sceneName: 'GameScene',
                sceneData: {
                  isContextProcessing: true
                }
              });
            });
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            _get(_getPrototypeOf(HomeScreen.prototype), "onLoad", this).call(this);

            this.validateRequiredComponentsExtended();
          }
        }, {
          key: "validateRequiredComponentsExtended",
          value: function validateRequiredComponentsExtended() {
            if (!this.journeyProgress) {
              throw new Error('HomeScreen: journeyProgress not found');
            }

            if (!this.playButtonLabel) {
              throw new Error('HomeScreen: playButtonLabel not found');
            }
          }
        }]);

        return HomeScreen;
      }(DashboardScreen), (_descriptor$F = _applyDecoratedDescriptor(_class2$H.prototype, "journeyProgress", [_dec2$L], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$x = _applyDecoratedDescriptor(_class2$H.prototype, "playButtonLabel", [_dec3$E], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$H)) || _class$19);

      cclegacy._RF.pop();

      var _dec$15, _dec2$M, _dec3$F, _dec4$q, _dec5$j, _dec6$f, _class$1a, _class2$I, _descriptor$G, _descriptor2$y, _descriptor3$n, _descriptor4$g, _descriptor5$d;

      cclegacy._RF.push({}, "16513rBzRdHLYbn0ZhKoJrk", "DashboardUI", undefined);

      var ccclass$1a = _decorator.ccclass,
          property$J = _decorator.property;
      var DashboardUI = (_dec$15 = ccclass$1a('DashboardUI'), _dec2$M = property$J({
        type: DashboardScreens
      }), _dec3$F = property$J({
        type: CCFloat,
        min: 0
      }), _dec4$q = property$J({
        type: CCFloat,
        min: 0
      }), _dec5$j = property$J(UIOpacity), _dec6$f = property$J(NavManager), _dec$15(_class$1a = (_class2$I = /*#__PURE__*/function (_Component) {
        _inherits(DashboardUI, _Component);

        var _super = _createSuper(DashboardUI);

        function DashboardUI() {
          var _this;

          _classCallCheck(this, DashboardUI);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "screenType", _descriptor$G, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeInDuration", _descriptor2$y, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeOutDuration", _descriptor3$n, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "screenContainer", _descriptor4$g, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "navigation", _descriptor5$d, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(DashboardUI, [{
          key: "__preload",
          value: function __preload() {// called before onLoad, use for initialization
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            this.transitionIn();
          }
        }, {
          key: "transitionIn",
          value: function transitionIn() {
            var _this2 = this;

            tween(this.screenContainer).call(function () {
              return _this2.screenContainer.opacity = 0;
            }).to(this.fadeInDuration, {
              opacity: 255
            }).call(function () {
              _this2.node.scene.emit(CollectionSceneEvents.FADE_IN_COMPLETE);
            }).start();
          }
        }, {
          key: "handleNavigation",
          value: function handleNavigation(screenType) {
            if (screenType === this.screenType) {
              return;
            }

            this.transitionOut();
          }
        }, {
          key: "transitionOut",
          value: function transitionOut() {
            tween(this.screenContainer).to(this.fadeOutDuration, {
              opacity: 0
            }).start();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.screenContainer) {
              throw new Error('DashboardUI: Screen container not found');
            }

            if (!this.navigation) {
              throw new Error('DashboardUI: Navigation not found');
            }
          }
        }]);

        return DashboardUI;
      }(Component), (_descriptor$G = _applyDecoratedDescriptor(_class2$I.prototype, "screenType", [_dec2$M], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return DashboardScreens.home;
        }
      }), _descriptor2$y = _applyDecoratedDescriptor(_class2$I.prototype, "fadeInDuration", [_dec3$F], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor3$n = _applyDecoratedDescriptor(_class2$I.prototype, "fadeOutDuration", [_dec4$q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor4$g = _applyDecoratedDescriptor(_class2$I.prototype, "screenContainer", [_dec5$j], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$d = _applyDecoratedDescriptor(_class2$I.prototype, "navigation", [_dec6$f], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$I)) || _class$1a);

      cclegacy._RF.pop();

      var _dec$16, _dec2$N, _class$1b, _class2$J, _descriptor$H;

      cclegacy._RF.push({}, "ab5b34qiJlDx5ND6pHOfNu3", "HomeUI", undefined);

      var ccclass$1b = _decorator.ccclass,
          property$K = _decorator.property;
      var HomeUI = (_dec$16 = ccclass$1b('HomeUI'), _dec2$N = property$K(Button), _dec$16(_class$1b = (_class2$J = /*#__PURE__*/function (_DashboardUI) {
        _inherits(HomeUI, _DashboardUI);

        var _super = _createSuper(HomeUI);

        function HomeUI() {
          var _this;

          _classCallCheck(this, HomeUI);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "buttons", _descriptor$H, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(HomeUI, [{
          key: "transitionIn",
          value: function transitionIn() {
            var _this2 = this;

            tween(this.screenContainer).call(function () {
              _this2.screenContainer.opacity = 0;

              _this2.buttons.forEach(function (button) {
                return button.interactable = false;
              });
            }).to(this.fadeInDuration, {
              opacity: 255
            }).call(function () {
              _this2.buttons.forEach(function (button) {
                return button.interactable = true;
              });
            }).start();
          }
        }, {
          key: "transitionOut",
          value: function transitionOut() {
            var _this3 = this;

            tween(this.screenContainer).call(function () {
              _this3.buttons.forEach(function (button) {
                return button.interactable = false;
              });
            }).to(this.fadeOutDuration, {
              opacity: 0
            }).start();
          }
        }]);

        return HomeUI;
      }(DashboardUI), _descriptor$H = _applyDecoratedDescriptor(_class2$J.prototype, "buttons", [_dec2$N], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2$J)) || _class$1b);

      cclegacy._RF.pop();

      var _dec$17, _dec2$O, _dec3$G, _class$1c, _class2$K, _descriptor$I;

      cclegacy._RF.push({}, "b8271vI+3pO9q8SKMYpqLKv", "EventBadge", undefined);

      var ccclass$1c = _decorator.ccclass,
          property$L = _decorator.property;
      var EventBadge = (_dec$17 = ccclass$1c('EventBadge'), _dec2$O = property$L(Label), _dec3$G = property$L(CCString), _dec$17(_class$1c = (_class2$K = /*#__PURE__*/function (_Component) {
        _inherits(EventBadge, _Component);

        var _super = _createSuper(EventBadge);

        function EventBadge() {
          var _this;

          _classCallCheck(this, EventBadge);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "label", _descriptor$I, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(EventBadge, [{
          key: "text",
          get: function get() {
            return this.label.string;
          },
          set: function set(value) {
            this.label.string = value;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.label) {
              throw new Error('EventBadge: Missing required component Label');
            }
          }
        }]);

        return EventBadge;
      }(Component), (_descriptor$I = _applyDecoratedDescriptor(_class2$K.prototype, "label", [_dec2$O], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2$K.prototype, "text", [_dec3$G], Object.getOwnPropertyDescriptor(_class2$K.prototype, "text"), _class2$K.prototype)), _class2$K)) || _class$1c);

      cclegacy._RF.pop();

      var _dec$18, _dec2$P, _dec3$H, _dec4$r, _dec5$k, _class$1d, _class2$L, _descriptor$J, _descriptor2$z;

      cclegacy._RF.push({}, "7712cs4XLJAgpKqlO3gPqkF", "EventProgressBar", undefined);

      var ccclass$1d = _decorator.ccclass,
          property$M = _decorator.property;
      var EventProgressBar = (_dec$18 = ccclass$1d('EventProgressBar'), _dec2$P = property$M(TapperedProgressBar), _dec3$H = property$M(Label), _dec4$r = property$M(CCString), _dec5$k = property$M({
        range: [0, 1, 0.01],
        slide: true,
        tooltip: 'i18n:progress.progress'
      }), _dec$18(_class$1d = (_class2$L = /*#__PURE__*/function (_Component) {
        _inherits(EventProgressBar, _Component);

        var _super = _createSuper(EventProgressBar);

        function EventProgressBar() {
          var _this;

          _classCallCheck(this, EventProgressBar);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "progressBar", _descriptor$J, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressLabel", _descriptor2$z, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(EventProgressBar, [{
          key: "text",
          get: function get() {
            return this.progressLabel.string;
          },
          set: function set(value) {
            this.progressLabel.string = value;
          }
        }, {
          key: "progress",
          get: function get() {
            return this.progressBar.progress;
          },
          set: function set(value) {
            this.progressBar.progress = value;
          }
        }, {
          key: "__preload",
          value: function __preload() {// called before onLoad, use for initialization
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.progressBar) {
              throw new Error('EventProgressBar: Missing required component TapperedProgressBar');
            }

            if (!this.progressLabel) {
              throw new Error('EventProgressBar: Missing required component Label');
            }
          }
        }]);

        return EventProgressBar;
      }(Component), (_descriptor$J = _applyDecoratedDescriptor(_class2$L.prototype, "progressBar", [_dec2$P], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$z = _applyDecoratedDescriptor(_class2$L.prototype, "progressLabel", [_dec3$H], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2$L.prototype, "text", [_dec4$r], Object.getOwnPropertyDescriptor(_class2$L.prototype, "text"), _class2$L.prototype), _applyDecoratedDescriptor(_class2$L.prototype, "progress", [_dec5$k], Object.getOwnPropertyDescriptor(_class2$L.prototype, "progress"), _class2$L.prototype)), _class2$L)) || _class$1d);

      cclegacy._RF.pop();

      var _dec$19, _dec2$Q, _dec3$I, _dec4$s, _class$1e, _class2$M, _descriptor$K, _descriptor2$A, _descriptor3$o;

      cclegacy._RF.push({}, "83036ocqiZHXrI3Aq0dBJRD", "EventButton", undefined);

      var ccclass$1e = _decorator.ccclass,
          property$N = _decorator.property;
      var EventButton = (_dec$19 = ccclass$1e('EventButton'), _dec2$Q = property$N(Button), _dec3$I = property$N(EventProgressBar), _dec4$s = property$N(EventBadge), _dec$19(_class$1e = (_class2$M = /*#__PURE__*/function (_Component) {
        _inherits(EventButton, _Component);

        var _super = _createSuper(EventButton);

        function EventButton() {
          var _this;

          _classCallCheck(this, EventButton);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "buttonComponent", _descriptor$K, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor2$A, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "badge", _descriptor3$o, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(EventButton, [{
          key: "progress",
          get: function get() {
            return this.progressBar;
          }
        }, {
          key: "button",
          get: function get() {
            return this.buttonComponent;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.buttonComponent) {
              throw new Error('EventButton: Missing required component Button');
            }

            if (!this.progressBar) {
              throw new Error('EventButton: Missing required component EventProgressBar');
            }

            if (!this.badge) {
              throw new Error('EventButton: Missing required component EventBadge');
            }
          }
        }]);

        return EventButton;
      }(Component), (_descriptor$K = _applyDecoratedDescriptor(_class2$M.prototype, "buttonComponent", [_dec2$Q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$A = _applyDecoratedDescriptor(_class2$M.prototype, "progressBar", [_dec3$I], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$o = _applyDecoratedDescriptor(_class2$M.prototype, "badge", [_dec4$s], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$M)) || _class$1e);

      cclegacy._RF.pop();

      var _dec$1a, _dec2$R, _dec3$J, _dec4$t, _dec5$l, _dec6$g, _dec7$b, _dec8$7, _dec9$6, _dec10$5, _dec11$4, _dec12$3, _dec13$1, _dec14$1, _dec15$1, _dec16$1, _dec17, _class$1f, _class2$N, _descriptor$L, _descriptor2$B, _descriptor3$p, _descriptor4$h, _descriptor5$e, _descriptor6$9, _descriptor7$6, _descriptor8$5, _descriptor9$4, _descriptor10$3, _descriptor11$1, _descriptor12$1, _descriptor13$1, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "7741dWPNcdHRqGVvif/L/MP", "NavButton", undefined);

      var ccclass$1f = _decorator.ccclass,
          property$O = _decorator.property,
          executeInEditMode$6 = _decorator.executeInEditMode;
      var NavButton = (_dec$1a = ccclass$1f('NavButton'), _dec2$R = property$O(CCBoolean), _dec3$J = property$O({
        group: {
          name: 'Animation'
        },
        displayName: 'Is Selected',
        tooltip: 'This is for the editor only and will be ignored at runtime',
        editorOnly: true
      }), _dec4$t = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec5$l = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec6$g = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec7$b = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec8$7 = property$O({
        group: {
          name: 'Animation'
        }
      }), _dec9$6 = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec10$5 = property$O({
        group: {
          name: 'Animation'
        }
      }), _dec11$4 = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec12$3 = property$O({
        type: CCFloat,
        group: {
          name: 'Animation'
        }
      }), _dec13$1 = property$O({
        type: UITransform
      }), _dec14$1 = property$O(Node$1), _dec15$1 = property$O(UIOpacity), _dec16$1 = property$O({
        type: Enum(DashboardScreens)
      }), _dec17 = property$O(NavManager), _dec$1a(_class$1f = executeInEditMode$6(_class$1f = (_class2$N = /*#__PURE__*/function (_Component) {
        _inherits(NavButton, _Component);

        var _super = _createSuper(NavButton);

        function NavButton() {
          var _this;

          _classCallCheck(this, NavButton);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args)); // ! Remove this when other screens are ready

          _initializerDefineProperty(_this, "wip", _descriptor$L, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSelectedInEditor", _descriptor2$B, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animationDuration", _descriptor3$p, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedSpacing", _descriptor4$h, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deselectedSpacing", _descriptor5$e, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedIconY", _descriptor6$9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedIconScale", _descriptor7$6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deselectedIconY", _descriptor8$5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deselectedIconScale", _descriptor9$4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedTextY", _descriptor10$3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deselectedTextY", _descriptor11$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spacer", _descriptor12$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon", _descriptor13$1, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "screenType", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "navManager", _descriptor16, _assertThisInitialized(_this));

          _this.isSelected = false;

          _this.onMouseEnter = function (_event) {
            if (_this.isSelected) return;

            _this.playHoverOnAnimation();
          };

          _this.onMouseLeave = function (_event) {
            if (_this.isSelected) return;

            _this.playHoverOffAnimation();
          };

          return _this;
        }

        _createClass(NavButton, [{
          key: "isWIP",
          get: function get() {
            return this.wip;
          }
        }, {
          key: "buttonType",
          get: function get() {
            return this.screenType;
          }
        }, {
          key: "update",
          value: function update() {}
        }, {
          key: "onEnable",
          value: function onEnable() {
            //? Support for window
            this.node.on(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.on(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
          }
        }, {
          key: "onDisable",
          value: function onDisable() {
            //? Support for window
            this.node.off(Node$1.EventType.MOUSE_ENTER, this.onMouseEnter);
            this.node.off(Node$1.EventType.MOUSE_LEAVE, this.onMouseLeave);
          }
        }, {
          key: "onEditorUpdate",
          value: function onEditorUpdate() {
            if (this.icon === null || this.icon === undefined) {
              return;
            }

            if (this.text === null || this.icon === undefined) {
              return;
            }

            if (this.spacer === null || this.spacer === undefined) {
              return;
            }

            if (this.isSelectedInEditor) {
              this.icon.setScale(this.selectedIconScale);
              this.icon.setPosition(this.icon.position.x, this.selectedIconY, 0);
              this.text.node.setPosition(this.text.node.position.x, this.selectedTextY, 0);
              this.spacer.width = this.selectedSpacing;
              this.text.opacity = 255;
            } else {
              this.icon.setScale(this.deselectedIconScale);
              this.icon.setPosition(this.icon.position.x, this.deselectedIconY, 0);
              this.text.node.setPosition(this.text.node.position.x, this.deselectedTextY, 0);
              this.spacer.width = this.deselectedSpacing;
              this.text.opacity = 0;
            }
          }
        }, {
          key: "setSelected",
          value: function setSelected() {
            if (this.isSelected) {
              return;
            }

            GeneralUtils.playSound(CodeSoundKeys.PATCH_SHIFT);
            this.navManager.selectUsingSceneTransition(this);
          }
        }, {
          key: "select",
          value: function select() {
            if (this.isSelected) {
              throw new Error('NavButton: Already selected');
            }

            this.isSelected = true;
            return this.toPromise(this.playSelectAnimation(), undefined);
          }
        }, {
          key: "deselect",
          value: function deselect() {
            if (!this.isSelected) {
              throw new Error('NavButton: Already deselected');
            }

            this.isSelected = false;
            return this.toPromise(this.deselectAnimation(), undefined);
          }
        }, {
          key: "playHoverOnAnimation",
          value: function playHoverOnAnimation() {
            var t = tween(this.icon);
            t.to(0.1, {
              scale: this.deselectedIconScale.clone().add3f(0.1, 0.1, 0)
            }, {
              easing: 'cubicIn'
            });
            return AnimUtils.runTweenAsync(t);
          }
        }, {
          key: "playHoverOffAnimation",
          value: function playHoverOffAnimation() {
            var t = tween(this.icon);
            t.to(0.1, {
              scale: this.deselectedIconScale
            }, {
              easing: 'cubicOut'
            });
            return AnimUtils.runTweenAsync(t);
          }
        }, {
          key: "playSelectAnimation",
          value: function playSelectAnimation() {
            var _this2 = this;

            return tween(this.spacer).to(this.animationDuration, {
              width: this.selectedSpacing
            }, {
              easing: 'linear',
              onUpdate: function onUpdate(_target, ratio) {
                if (ratio === undefined) return;
                var easedRatio = easing.quintInOut(ratio);
                var backRatio = easing.backOut(ratio);
                var linearRatio = easing.linear(ratio);
                var halfRatio = ratio < 0.5 ? ratio * 2 : 1;
                var iconNextY = _this2.deselectedIconY + (_this2.selectedIconY - _this2.deselectedIconY) * backRatio;

                _this2.icon.setPosition(_this2.icon.position.x, iconNextY, 0);

                var iconNextScale = _this2.deselectedIconScale.clone().lerp(_this2.selectedIconScale, easedRatio);

                _this2.icon.setScale(iconNextScale.x, iconNextScale.y, _this2.icon.scale.z);

                var textNextOpacity = halfRatio * 255;
                var textNextY = _this2.deselectedTextY + (_this2.selectedTextY - _this2.deselectedTextY) * linearRatio;
                _this2.text.opacity = textNextOpacity;

                _this2.text.node.setPosition(_this2.text.node.position.x, textNextY, 0);
              }
            });
          }
        }, {
          key: "deselectAnimation",
          value: function deselectAnimation() {
            var _this3 = this;

            return tween(this.spacer).to(this.animationDuration, {
              width: this.deselectedSpacing
            }, {
              easing: 'linear',
              onUpdate: function onUpdate(_target, ratio) {
                if (ratio === undefined) return;
                var easedRatio = easing.quintInOut(ratio);
                var linearRatio = easing.linear(ratio);
                var halfRatio = ratio < 0.5 ? ratio * 2 : 1;
                var iconNextY = _this3.selectedIconY + (_this3.deselectedIconY - _this3.selectedIconY) * linearRatio;

                _this3.icon.setPosition(_this3.icon.position.x, iconNextY, 0);

                var iconNextScale = _this3.selectedIconScale.clone().lerp(_this3.deselectedIconScale, easedRatio);

                _this3.icon.setScale(iconNextScale.x, iconNextScale.y, _this3.icon.scale.z);

                var textNextOpacity = 255 - halfRatio * 255;
                var textNextY = _this3.selectedTextY + (_this3.deselectedTextY - _this3.selectedTextY) * linearRatio;
                _this3.text.opacity = textNextOpacity;

                _this3.text.node.setPosition(_this3.text.node.position.x, textNextY, 0);
              }
            });
          }
        }, {
          key: "toPromise",
          value: function toPromise(tw, payload) {
            return new Promise(function (resolve) {
              tw.call(function () {
                return resolve(payload);
              }).start();
            });
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.navManager) {
              throw new Error('NavButton: NavManager not found');
            }

            if (!this.spacer) {
              throw new Error('NavButton: Spacer not found');
            }

            if (!this.icon) {
              throw new Error('NavButton: Icon not found');
            }

            if (!this.text) {
              throw new Error('NavButton: Text not found');
            }
          }
        }]);

        return NavButton;
      }(Component), (_descriptor$L = _applyDecoratedDescriptor(_class2$N.prototype, "wip", [_dec2$R], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2$B = _applyDecoratedDescriptor(_class2$N.prototype, "isSelectedInEditor", [_dec3$J], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3$p = _applyDecoratedDescriptor(_class2$N.prototype, "animationDuration", [_dec4$t], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor4$h = _applyDecoratedDescriptor(_class2$N.prototype, "selectedSpacing", [_dec5$l], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 150;
        }
      }), _descriptor5$e = _applyDecoratedDescriptor(_class2$N.prototype, "deselectedSpacing", [_dec6$g], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 88;
        }
      }), _descriptor6$9 = _applyDecoratedDescriptor(_class2$N.prototype, "selectedIconY", [_dec7$b], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor7$6 = _applyDecoratedDescriptor(_class2$N.prototype, "selectedIconScale", [_dec8$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(1, 1, 1);
        }
      }), _descriptor8$5 = _applyDecoratedDescriptor(_class2$N.prototype, "deselectedIconY", [_dec9$6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9$4 = _applyDecoratedDescriptor(_class2$N.prototype, "deselectedIconScale", [_dec10$5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0.8, 0.8, 1);
        }
      }), _descriptor10$3 = _applyDecoratedDescriptor(_class2$N.prototype, "selectedTextY", [_dec11$4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -10;
        }
      }), _descriptor11$1 = _applyDecoratedDescriptor(_class2$N.prototype, "deselectedTextY", [_dec12$3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor12$1 = _applyDecoratedDescriptor(_class2$N.prototype, "spacer", [_dec13$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13$1 = _applyDecoratedDescriptor(_class2$N.prototype, "icon", [_dec14$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2$N.prototype, "text", [_dec15$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2$N.prototype, "screenType", [_dec16$1], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class2$N.prototype, "navManager", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$N)) || _class$1f) || _class$1f);

      cclegacy._RF.pop();

      var _dec$1b, _class$1g;

      cclegacy._RF.push({}, "87a11fQFYVFcphsqf5ivVof", "DashboardHeader", undefined);

      var ccclass$1g = _decorator.ccclass;
      var event$o = globalThis.game.event;
      var _GameCore$p = GameCore,
          Events$n = _GameCore$p.Events;
      var DashboardHeader = (_dec$1b = ccclass$1g('DashboardHeader'), _dec$1b(_class$1g = /*#__PURE__*/function (_Component) {
        _inherits(DashboardHeader, _Component);

        var _super = _createSuper(DashboardHeader);

        function DashboardHeader() {
          _classCallCheck(this, DashboardHeader);

          return _super.apply(this, arguments);
        }

        _createClass(DashboardHeader, [{
          key: "handleClickTreasureButton",
          value: function handleClickTreasureButton() {
            event$o.emit(Events$n.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: 'Coming soon!'
              }
            });
          }
        }, {
          key: "handleClickBalloonButton",
          value: function handleClickBalloonButton() {
            event$o.emit(Events$n.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: 'Coming soon!'
              }
            });
          }
        }]);

        return DashboardHeader;
      }(Component)) || _class$1g);

      cclegacy._RF.pop();

      var _dec$1c, _dec2$S, _class$1h;

      cclegacy._RF.push({}, "22d76GFn6BEoKFiZCFN1HmA", "DraftScene", undefined);

      var ccclass$1h = _decorator.ccclass,
          disallowMultiple$f = _decorator.disallowMultiple,
          requireComponent$h = _decorator.requireComponent;
      var DraftScene = (_dec$1c = ccclass$1h('DraftScene'), _dec2$S = requireComponent$h(SceneManager), _dec$1c(_class$1h = disallowMultiple$f(_class$1h = _dec2$S(_class$1h = /*#__PURE__*/function (_Component) {
        _inherits(DraftScene, _Component);

        var _super = _createSuper(DraftScene);

        function DraftScene() {
          _classCallCheck(this, DraftScene);

          return _super.apply(this, arguments);
        }

        _createClass(DraftScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('DraftScene: SceneManager not found');
            }
          }
        }]);

        return DraftScene;
      }(Component)) || _class$1h) || _class$1h) || _class$1h);

      cclegacy._RF.pop();

      var _dec$1d, _dec2$T, _class$1i;

      cclegacy._RF.push({}, "27217ZS55VNqbq0d9w9Cc+3", "Component", undefined);

      var ccclass$1i = _decorator.ccclass,
          executeInEditMode$7 = _decorator.executeInEditMode,
          disallowMultiple$g = _decorator.disallowMultiple;
      var _GameCore$q = GameCore,
          Events$o = _GameCore$q.Events;
      var event$p = globalThis.game.event;
      var DraftComponent = (_dec$1d = ccclass$1i('DraftComponent'), _dec2$T = executeInEditMode$7(true), _dec$1d(_class$1i = disallowMultiple$g(_class$1i = _dec2$T(_class$1i = /*#__PURE__*/function (_Component) {
        _inherits(DraftComponent, _Component);

        var _super = _createSuper(DraftComponent);

        function DraftComponent() {
          var _this;

          _classCallCheck(this, DraftComponent);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.locale = 'en';
          _this.eventPayload = {
            screenName: 'DraftScene'
          };
          return _this;
        }

        _createClass(DraftComponent, [{
          key: "__preload",
          value: function __preload() {
            console.log('DraftComponent', Events$o);
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            console.log('DraftComponent', event$p);
          }
        }, {
          key: "start",
          value: function start() {
            console.log('DraftComponent', EDITOR);
            {
              this.makePersistent();
            }
          }
        }, {
          key: "makePersistent",
          value: function makePersistent() {
            director.addPersistRootNode(this.node);
          }
        }]);

        return DraftComponent;
      }(Component)) || _class$1i) || _class$1i) || _class$1i);

      cclegacy._RF.pop();

      var _dec$1e, _dec2$U, _class$1j;

      cclegacy._RF.push({}, "9b83boaSv9PE6mRFqy0MSI8", "GameScene", undefined);

      var ccclass$1j = _decorator.ccclass,
          disallowMultiple$h = _decorator.disallowMultiple,
          requireComponent$i = _decorator.requireComponent;
      var _globalThis$game$i = globalThis.game,
          audio$3 = _globalThis$game$i.audio,
          ads$2 = _globalThis$game$i.ads,
          event$q = _globalThis$game$i.event;
      var Layout$3 = GameWorld.Layout,
          DesignSize$1 = GameWorld.DesignSize;
      var Portrait$2 = DesignSize$1.Portrait;
      var GameScene = (_dec$1e = ccclass$1j('GameScene'), _dec2$U = requireComponent$i([SceneManager]), _dec$1e(_class$1j = disallowMultiple$h(_class$1j = _dec2$U(_class$1j = /*#__PURE__*/function (_Component) {
        _inherits(GameScene, _Component);

        var _super = _createSuper(GameScene);

        function GameScene() {
          var _this;

          _classCallCheck(this, GameScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleShowSwitchSceneLoading = function (targetScene, payload) {
            if (_this.scene.getScene(targetScene)) return;
            event$q.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: payload
            });
          };

          _this.handleSwitchSceneEvent = function (payload) {
            var sceneName = payload.sceneName,
                sceneData = payload.sceneData;

            _this.scene.switchScene(sceneName, sceneData);
          };

          _this.handleGameMaskWhenLayoutChanged = function (layout) {
            var gameObjectsNode = find('Canvas/Game/GameObjects');
            if (!gameObjectsNode) return;
            var maskComponent = gameObjectsNode.getComponent(Mask);
            if (!maskComponent) return;
            maskComponent.enabled = layout === Layout$3.Landscape;
          };

          _this.handleAdsWhenResize = function () {
            _this.checkBottomBannerAdSize();

            _this.setMaxSizeSideBannerAd();
          };

          _this.handleSubscribeBot = /*#__PURE__*/_asyncToGenerator(function* () {
            if (!('subscribeBotAsync' in GameSDK.extra)) return; // TODO: need to confirm canbe call subscribeBotAsync before startGameAsync

            yield GameSDK.extra.subscribeBotAsync();
          });
          return _this;
        }

        _createClass(GameScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.validateRequiredComponents();
            this.listenGameEvents();
            this.scene.listenSwitchSceneEvent(this.handleSwitchSceneEvent);
            GeneralUtils.showBannerAds();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('GameScene: SceneManager not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.LAYOUT_CHANGED, this.handleGameMaskWhenLayoutChanged);
            this.node.scene.on(GameEvents.VIEW_RESIZE, this.handleAdsWhenResize);
            this.node.scene.on(GameEvents.REQUEST_SWITCH_SCENE_LOADING, this.handleShowSwitchSceneLoading);
          }
        }, {
          key: "checkBottomBannerAdSize",
          value: function checkBottomBannerAdSize() {
            var worldGameSize = View.instance.getVisibleSize();
            var bannerRemainSizeCss = CocosUtils.worldSizeToCssSize(worldGameSize.height * Ads.MAX_BOTTOM_BANNER_RATIO);
            var BannerDisplayAdOptions = GameCore.Configs.Ads.BannerDisplayAdOptions;
            BannerDisplayAdOptions.forEach(function (_ref2) {
              var PlacementId = _ref2.PlacementId,
                  Position = _ref2.Position,
                  BannerHeight = _ref2.BannerHeight;
              if (Position !== 'bottom') return;

              if (BannerHeight > bannerRemainSizeCss) {
                ads$2.hideBannerAdAsync(PlacementId)["catch"](function (_) {// Safe to ignore
                });
              } else {
                ads$2.showBannerAdAsync(PlacementId)["catch"](function (_) {// Safe to ignore
                });
              }
            });
          }
        }, {
          key: "setMaxSizeSideBannerAd",
          value: function setMaxSizeSideBannerAd() {
            var _GameSDK = GameSDK,
                extra = _GameSDK.extra;
            if (!('setSideBannerAdRemainSize' in extra)) return;
            var worldGameSize = View.instance.getVisibleSize();
            var contentWorldWidth = Portrait$2.WIDTH + 12 * 2; // 12 is block line

            var bannerRemainSize = (worldGameSize.width - contentWorldWidth) / 2;
            var bannerRemainSizeCss = CocosUtils.worldSizeToCssSize(bannerRemainSize);
            extra.setSideBannerAdRemainSize(bannerRemainSizeCss);
          }
        }, {
          key: "start",
          value: function start() {
            // ? Show subscribe bot popup of facebook instant game
            this.scheduleOnce(this.handleSubscribeBot, 0.5);
            this.updateVolumeBackgroundMusic();
          }
        }, {
          key: "updateVolumeBackgroundMusic",
          value: function updateVolumeBackgroundMusic() {
            // ? Channel 'global_music' has been created in 'LoadScene' as a persistent node for playing background music across all scenes.
            audio$3.setVolume(1, 'global_music');
          }
        }]);

        return GameScene;
      }(Component)) || _class$1j) || _class$1j) || _class$1j);

      cclegacy._RF.pop();

      var _dec$1f, _dec2$V, _dec3$K, _class$1k, _class2$O, _descriptor$M, _descriptor2$C;

      cclegacy._RF.push({}, "0c0b4cnFOFJ6pJmGNHnMo7m", "ComboEffect", undefined);

      var ccclass$1k = _decorator.ccclass,
          property$P = _decorator.property;
      var ComboEffect = (_dec$1f = ccclass$1k('ComboEffect'), _dec2$V = property$P(UIOpacity), _dec3$K = property$P(ParticleSystem2D), _dec$1f(_class$1k = (_class2$O = /*#__PURE__*/function (_Component) {
        _inherits(ComboEffect, _Component);

        var _super = _createSuper(ComboEffect);

        function ComboEffect() {
          var _this;

          _classCallCheck(this, ComboEffect);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "circleOpacity", _descriptor$M, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particle", _descriptor2$C, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ComboEffect, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.circleOpacity) {
              throw new Error('ComboEffect requires a circleOpacity component');
            }

            if (!this.particle) {
              throw new Error('ComboEffect requires a particle component');
            }
          }
        }, {
          key: "start",
          value: function start() {
            this.node.scene.on(GameplayEvents.COMBO_UPDATED, this.handleOnComboUpdated, this);
          }
        }, {
          key: "handleOnComboUpdated",
          value: function handleOnComboUpdated(combo) {
            if (combo > 1) {
              this.circleOpacity.node.scale = Vec3.ZERO;
              this.circleOpacity.opacity = 127.5;
              this.particle.resetSystem();
              tween(this.circleOpacity.node).to(0.2, {
                scale: new Vec3(1.3, 1.3, 1.3)
              }, {
                easing: 'quadOut'
              }).start();
              tween(this.circleOpacity).delay(0.2).to(0.2, {
                opacity: 0
              }, {
                easing: 'expoIn'
              }).start();
            }
          }
        }]);

        return ComboEffect;
      }(Component), (_descriptor$M = _applyDecoratedDescriptor(_class2$O.prototype, "circleOpacity", [_dec2$V], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$C = _applyDecoratedDescriptor(_class2$O.prototype, "particle", [_dec3$K], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$O)) || _class$1k);

      cclegacy._RF.pop();

      var _dec$1g, _dec2$W, _class$1l, _class2$P, _descriptor$N;

      cclegacy._RF.push({}, "0506aJZ1EdPqJejQ2PpB980", "ComboLabel", undefined);

      var ccclass$1l = _decorator.ccclass,
          property$Q = _decorator.property;
      var ComboLabel = (_dec$1g = ccclass$1l('ComboLabel'), _dec2$W = property$Q(Label), _dec$1g(_class$1l = (_class2$P = /*#__PURE__*/function (_Component) {
        _inherits(ComboLabel, _Component);

        var _super = _createSuper(ComboLabel);

        function ComboLabel() {
          var _this;

          _classCallCheck(this, ComboLabel);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "label", _descriptor$N, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ComboLabel, [{
          key: "onLoad",
          value: function onLoad() {
            this.opacity = this.getComponent(UIOpacity);
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.label) {
              throw new Error('ComboLabel requires a Label component');
            }

            if (!this.opacity) {
              throw new Error('ComboLabel requires a UIOpacity component');
            }
          }
        }, {
          key: "start",
          value: function start() {
            this.node.scene.on(GameplayEvents.COMBO_UPDATED, this.handleOnComboUpdated, this);
          }
        }, {
          key: "handleOnComboUpdated",
          value: function handleOnComboUpdated(combo) {
            if (combo === 0) {
              this.opacity.opacity = 0;
            } else if (combo > 1) {
              this.opacity.opacity = 255;
              this.label.string = "x".concat(combo);
              tween(this.label.node).to(0.1, {
                scale: new Vec3(1.3, 1.3, 1.3)
              }, {
                easing: 'sineIn'
              }).to(0.1, {
                scale: Vec3.ONE
              }, {
                easing: 'sineOut'
              }).start();
            } else {
              this.opacity.opacity = 0;
            }
          }
        }]);

        return ComboLabel;
      }(Component), _descriptor$N = _applyDecoratedDescriptor(_class2$P.prototype, "label", [_dec2$W], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2$P)) || _class$1l);

      cclegacy._RF.pop();

      var _dec$1h, _dec2$X, _dec3$L, _dec4$u, _class$1m, _class2$Q, _descriptor$O, _descriptor2$D, _descriptor3$q;

      cclegacy._RF.push({}, "51871oF8CFOkp81rgCf90UQ", "ComboPopup", undefined);

      var ccclass$1m = _decorator.ccclass,
          property$R = _decorator.property;
      var ComboPopup = (_dec$1h = ccclass$1m('ComboPopup'), _dec2$X = property$R(Sprite), _dec3$L = property$R(SpriteFrame), _dec4$u = property$R(Animation), _dec$1h(_class$1m = (_class2$Q = /*#__PURE__*/function (_Component) {
        _inherits(ComboPopup, _Component);

        var _super = _createSuper(ComboPopup);

        function ComboPopup() {
          var _this;

          _classCallCheck(this, ComboPopup);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "textSprite", _descriptor$O, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "comboSprites", _descriptor2$D, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animation", _descriptor3$q, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ComboPopup, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "start",
          value: function start() {
            this.node.scene.on(GameplayEvents.COMBO_UPDATED, this.handleOnComboUpdated, this);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.textSprite) {
              throw new Error('ComboPopup: textSprite not found');
            }

            if (this.comboSprites.length === 0) {
              throw new Error('ComboPopup: comboSprites not found');
            }

            if (!this.animation) {
              throw new Error('ComboPopup: animation not found');
            }
          }
        }, {
          key: "handleOnComboUpdated",
          value: function handleOnComboUpdated(combo) {
            if (combo < 2) return;

            for (var i = this.comboSprites.length - 1; i >= 0; i--) {
              if (combo >= i + 2) {
                this.textSprite.spriteFrame = this.comboSprites[i];
                this.animation.play();
                break;
              }
            }
          }
        }]);

        return ComboPopup;
      }(Component), (_descriptor$O = _applyDecoratedDescriptor(_class2$Q.prototype, "textSprite", [_dec2$X], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$D = _applyDecoratedDescriptor(_class2$Q.prototype, "comboSprites", [_dec3$L], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3$q = _applyDecoratedDescriptor(_class2$Q.prototype, "animation", [_dec4$u], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$Q)) || _class$1m);

      cclegacy._RF.pop();

      var _dec$1i, _class$1n;

      cclegacy._RF.push({}, "ed00dMDxYRJP4fZMawN9JnW", "ComboProgressBar", undefined);

      var ccclass$1n = _decorator.ccclass;
      var COMBO_DURATION = 5;
      var ComboProgressBar = (_dec$1i = ccclass$1n('ComboProgressBar'), _dec$1i(_class$1n = /*#__PURE__*/function (_Component) {
        _inherits(ComboProgressBar, _Component);

        var _super = _createSuper(ComboProgressBar);

        function ComboProgressBar() {
          _classCallCheck(this, ComboProgressBar);

          return _super.apply(this, arguments);
        }

        _createClass(ComboProgressBar, [{
          key: "start",
          value: function start() {
            this.progressBar = this.getComponent(TapperedProgressBar);
            this.opacity = this.getComponent(UIOpacity);
            this.comboTimer = 0;
            this.isActive = false;
            this.node.scene.on(GameplayEvents.COMBO_UPDATED, this.handleComboUpdated, this);
            this.node.scene.on(GameplayEvents.GAME_PAUSE, this.handleGamePause, this);
            this.node.scene.on(GameplayEvents.GAME_RESUME, this.handleGameResume, this);
          }
        }, {
          key: "update",
          value: function update(dt) {
            if (!this.isActive) return;

            if (this.comboTimer > 0) {
              this.comboTimer -= dt;
              this.progressBar.progress = this.comboTimer / COMBO_DURATION;
            } else {
              this.isActive = false;
              this.opacity.opacity = 0;
              this.node.scene.emit(GameplayEvents.COMBO_ENDED);
            }
          }
        }, {
          key: "handleComboUpdated",
          value: function handleComboUpdated(combo) {
            if (combo === 0) this.opacity.opacity = 0;else if (combo > 0) {
              this.isActive = true;
              this.comboTimer = COMBO_DURATION;
            }

            if (combo > 1) {
              this.opacity.opacity = 255;
            }
          }
        }, {
          key: "handleGamePause",
          value: function handleGamePause() {
            this.isActive = false;
          }
        }, {
          key: "handleGameResume",
          value: function handleGameResume() {
            this.isActive = true;
          }
        }]);

        return ComboProgressBar;
      }(Component)) || _class$1n);

      cclegacy._RF.pop();

      var _dec$1j, _dec2$Y, _class$1o;

      cclegacy._RF.push({}, "254d3fxjCBGlbC4XNKvKhF6", "LoadScene", undefined);

      var ccclass$1o = _decorator.ccclass,
          disallowMultiple$i = _decorator.disallowMultiple,
          requireComponent$j = _decorator.requireComponent;
      var _GameCore$r = GameCore,
          Plugins$1 = _GameCore$r.Plugins,
          Utils$7 = _GameCore$r.Utils,
          Events$p = _GameCore$r.Events,
          Configs$2 = _GameCore$r.Configs;
      var _globalThis$game$j = globalThis.game,
          ads$3 = _globalThis$game$j.ads,
          event$r = _globalThis$game$j.event,
          player$e = _globalThis$game$j.player,
          language$6 = _globalThis$game$j.language,
          analytics$3 = _globalThis$game$j.analytics;
      var LoadScene = (_dec$1j = ccclass$1o('LoadScene'), _dec2$Y = requireComponent$j(SceneManager), _dec$1j(_class$1o = disallowMultiple$i(_class$1o = _dec2$Y(_class$1o = /*#__PURE__*/function (_Component) {
        _inherits(LoadScene, _Component);

        var _super = _createSuper(LoadScene);

        function LoadScene() {
          var _this;

          _classCallCheck(this, LoadScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.isProgressContextData = false;

          _this.handleCoreReady = function () {
            _this.processWhenCoreReady();
          };
          /* private getMapByLevel(level: number) {
              const map = MAP.find((data) => data.id === level)
              if (map) return map.map
              return 1
          } */

          /* private paddingZero(str: string, length: number) {
              return (
                  Array(length - str.length)
                      .fill('0')
                      .join('') + str
              )
          } */


          _this.handleSwitchSceneEvent = function (payload) {
            var sceneName = payload.sceneName,
                sceneData = payload.sceneData; // ? If your game don't have DashboardScene, ResultScene,.. you can handle it here

            _this.scene.switchScene(sceneName, sceneData);
          };

          _this.handlePauseAudio = function () {
            event$r.on(Events$p.VISIBILITY_HIDDEN, _this.handleMuteAudio);
            event$r.on(Events$p.VISIBILITY_VISIBLE, _this.handleUnMuteAudio);
          };

          _this.handleMuteAudio = function () {
            _this.muteMusic();

            _this.muteSound();
          };

          _this.handleUnMuteAudio = function () {
            // ? If ads is showing, don't unmute audio
            if (ads$3.isAdShowing()) return;

            _this.muteMusic(false);

            _this.muteSound(false);
          };

          return _this;
        }

        _createClass(LoadScene, [{
          key: "__preload",
          value: function __preload() {
            this.setupAndroidPlatformAds();
            this.processCrazyGamesLoadingStart();
            this.setupLanguage();
            this.loadLevelThemeData();
            this.scene = this.getComponent(SceneManager);
            this.validateRequiredComponents();
            this.scene.listenSwitchSceneEvent(this.handleSwitchSceneEvent);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('GameScene: SceneManager not found');
            }
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.makeMusicComponentPersistent();
            this.processCrazyGamesLoadingStop(); // const gameData = globalThis.game.player.getGameData()
            //Preload game level
            // if (gameData && gameData.level > 0) {
            //     const mapId = this.getMapByLevel(gameData.level)
            //     const levelStr = this.paddingZero(mapId.toString(), 3)
            //     resources.preload(`${ResourcePaths.MAP_JSON_PREFIX}${levelStr}`)
            // }

            this.preloadScenes();
            event$r.once(Events$p.CORE_READY, this.handleCoreReady);
          }
        }, {
          key: "preloadScenes",
          value: function preloadScenes() {
            this.scene.preloadScene(SceneKeys.GAME_SCENE);
            this.scene.preloadScene(SceneKeys.DASHBOARD_SCENE);
            this.scene.preloadScene(SceneKeys.COLLECTIONS_SCENE);
          }
        }, {
          key: "start",
          value: function start() {
            analytics$3.event(Plugins$1.Analytics.Events.LOAD_COMPLETE); // Check GameCore has emit CORE_READY event

            var isGameCoreReady = event$r.getEventEmitCount(Events$p.CORE_READY) > 0;

            if (isGameCoreReady && !this.isProgressContextData) {
              this.processWhenCoreReady();
            }
          }
        }, {
          key: "processWhenCoreReady",
          value: function () {
            var _processWhenCoreReady = _asyncToGenerator(function* () {
              this.setupGameData();
              this.handlePauseAudio();
              yield this.handleShowAdWhenLoadGame();
              this.playBackgroundMusic();
              this.preloadAds();
            });

            function processWhenCoreReady() {
              return _processWhenCoreReady.apply(this, arguments);
            }

            return processWhenCoreReady;
          }()
        }, {
          key: "handleShowAdWhenLoadGame",
          value: function () {
            var _handleShowAdWhenLoadGame = _asyncToGenerator(function* () {
              try {
                var _Configs$Ads = Configs$2.Ads,
                    Enabled = _Configs$Ads.Enabled,
                    ShowAdOnLoad = _Configs$Ads.ShowAdOnLoad;
                if (!Enabled) return;
                var ShowAdOnLoadEnabled = ShowAdOnLoad.Enabled,
                    DelaySeconds = ShowAdOnLoad.DelaySeconds,
                    PlacementId = ShowAdOnLoad.PlacementId;
                if (!ShowAdOnLoadEnabled) return;

                if (DelaySeconds > 0) {
                  yield Utils$7.Time.sleepAsync(DelaySeconds * 1000);
                }

                var ad = ads$3.getAdByPlacementId(PlacementId);
                if (!ad) return;
                yield this.showAdWhenLoadGame(ad);
              } catch (error) {
                console.warn('handleShowAdWhenLoadGame failed', error);
              }
            });

            function handleShowAdWhenLoadGame() {
              return _handleShowAdWhenLoadGame.apply(this, arguments);
            }

            return handleShowAdWhenLoadGame;
          }()
        }, {
          key: "loadLevelThemeData",
          value: function loadLevelThemeData() {
            resources.load("".concat(ResourcePaths.LEVEL_THEME_DATA), JsonAsset);
          }
        }, {
          key: "makeMusicComponentPersistent",
          value: function makeMusicComponentPersistent() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.makePersistent();
          }
        }, {
          key: "playBackgroundMusic",
          value: function playBackgroundMusic() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.play(CodeSoundKeys.BG_MUSIC, {
              volume: 0.5
            });
            GeneralUtils.turnUpBackgroundMusic();
          }
        }, {
          key: "setupAndroidPlatformAds",
          value: function setupAndroidPlatformAds() {
            return;
          }
        }, {
          key: "setupGameData",
          value: function setupGameData() {
            var gameData = player$e.getGameData();
            if (!gameData) return;
            var MaxLevel = GameSettings.MaxLevel;
            var level = gameData.level,
                totalLevel = gameData.totalLevel,
                passAllLevels = gameData.passAllLevels,
                coins = gameData.coins,
                levelVersion = gameData.levelVersion,
                items = gameData.items,
                themes = gameData.themes;
            var correctTotalLevel = totalLevel === 0 ? MaxLevel : totalLevel; // * Add default game data
            // ? Add interface from /types/game-core/player.d.ts

            player$e.setGameData({
              level: level,
              coins: coins,
              totalLevel: correctTotalLevel,
              levelVersion: levelVersion,
              passAllLevels: passAllLevels,
              items: items,
              themes: themes
            });
          }
        }, {
          key: "setupLanguage",
          value: function setupLanguage() {
            language$6.add('en', enData);
            language$6.choose('en');
            /* const locale = player.getPlayerSetting('language')
            if (!locale) return
             language.choose(locale as Locale) */
          }
        }, {
          key: "preloadAds",
          value: function () {
            var _preloadAds = _asyncToGenerator(function* () {
              var _Configs$Ads2 = Configs$2.Ads,
                  Enabled = _Configs$Ads2.Enabled,
                  InterstitialAdOptions = _Configs$Ads2.InterstitialAdOptions,
                  RewardedVideoAdOptions = _Configs$Ads2.RewardedVideoAdOptions;
              if (!Enabled) return;
              var _GameCore$Plugins$Ads = GameCore.Plugins.Ads.Types,
                  INTERSTITIAL = _GameCore$Plugins$Ads.INTERSTITIAL,
                  REWARDED_VIDEO = _GameCore$Plugins$Ads.REWARDED_VIDEO;
              InterstitialAdOptions.forEach(function (option) {
                var PlacementId = option.PlacementId;
                ads$3.loadAdAsync(INTERSTITIAL, PlacementId)["catch"](function () {// Safe to ignore
                });
              });
              RewardedVideoAdOptions.forEach(function (option) {
                var PlacementId = option.PlacementId;
                ads$3.loadAdAsync(REWARDED_VIDEO, PlacementId)["catch"](function () {// Safe to ignore
                });
              });
            });

            function preloadAds() {
              return _preloadAds.apply(this, arguments);
            }

            return preloadAds;
          }()
        }, {
          key: "showAdWhenLoadGame",
          value: function () {
            var _showAdWhenLoadGame = _asyncToGenerator(function* (ad) {
              try {
                var type = ad.type,
                    placementId = ad.placementId;
                yield ads$3.loadAdAsync(type, placementId);
                this.muteMusic(true);
                this.muteSound(true);
                yield ads$3.showAdAsync(type, placementId);
              } catch (error) {
                console.warn('showAdWhenLoadGame failed', error);
              } finally {
                this.muteMusic(false);
                this.muteSound(false);
              }
            });

            function showAdWhenLoadGame(_x) {
              return _showAdWhenLoadGame.apply(this, arguments);
            }

            return showAdWhenLoadGame;
          }()
        }, {
          key: "muteMusic",
          value: function muteMusic() {
            var isMute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var music = this.getMusicComponent();
            if (!music) return;
            music.mute(isMute);
          }
        }, {
          key: "muteSound",
          value: function muteSound() {
            var isMute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var sound = this.getSoundComponent();
            if (!sound) return;
            sound.mute(isMute);
          }
        }, {
          key: "getMusicComponent",
          value: function getMusicComponent() {
            var _find;

            var music = (_find = find('Music')) === null || _find === void 0 ? void 0 : _find.getComponent(Music);

            if (!music) {
              console.warn('LoadScene: Music not found');
              return null;
            }

            return music;
          }
        }, {
          key: "getSoundComponent",
          value: function getSoundComponent() {
            var _find2;

            var sound = (_find2 = find('Sound')) === null || _find2 === void 0 ? void 0 : _find2.getComponent(Sound);

            if (!sound) {
              console.warn('LoadScene: Sound not found');
              return null;
            }

            return sound;
          }
        }, {
          key: "processCrazyGamesLoadingStart",
          value: function processCrazyGamesLoadingStart() {
            if ('gameLoadingStart' in GameSDK) {
              GameSDK.gameLoadingStart();
            }
          }
        }, {
          key: "processCrazyGamesLoadingStop",
          value: function processCrazyGamesLoadingStop() {
            if ('gameLoadingStop' in GameSDK) {
              GameSDK.gameLoadingStop();
            }
          }
        }]);

        return LoadScene;
      }(Component)) || _class$1o) || _class$1o) || _class$1o);

      cclegacy._RF.pop();

      var _dec$1k, _dec2$Z, _class$1p;

      cclegacy._RF.push({}, "2b2ebUm0nFD64V/fcD8RPF/", "TestLayoutScene", undefined);

      var ccclass$1p = _decorator.ccclass,
          disallowMultiple$j = _decorator.disallowMultiple,
          requireComponent$k = _decorator.requireComponent;
      var _GameCore$s = GameCore,
          Events$q = _GameCore$s.Events;
      var event$s = globalThis.game.event;
      var TestLayoutScene = (_dec$1k = ccclass$1p('TestLayoutScene'), _dec2$Z = requireComponent$k(SceneManager), _dec$1k(_class$1p = disallowMultiple$j(_class$1p = _dec2$Z(_class$1p = /*#__PURE__*/function (_Component) {
        _inherits(TestLayoutScene, _Component);

        var _super = _createSuper(TestLayoutScene);

        function TestLayoutScene() {
          var _this;

          _classCallCheck(this, TestLayoutScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleLayoutChange = function () {
            _this.closeNotificationScreen();

            _this.openNotificationScreen();
          };

          return _this;
        }

        _createClass(TestLayoutScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.validateRequiredComponents();
            this.listenGameEvents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('TestLayoutScene: SceneManager not found');
            }
          }
        }, {
          key: "listenGameEvents",
          value: function listenGameEvents() {
            this.node.scene.on(GameEvents.LAYOUT_CHANGED, this.handleLayoutChange);
          }
        }, {
          key: "openNotificationScreen",
          value: function openNotificationScreen() {
            event$s.emit(Events$q.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                duration: 1.5,
                message: 'Layout changed'
              }
            });
          }
        }, {
          key: "closeNotificationScreen",
          value: function closeNotificationScreen() {
            event$s.emit(Events$q.CLOSE_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN
            });
          }
        }]);

        return TestLayoutScene;
      }(Component)) || _class$1p) || _class$1p) || _class$1p);

      cclegacy._RF.pop();

      var _dec$1l, _dec2$_, _class$1q;

      cclegacy._RF.push({}, "0a4aeK2lAdAjq0xWi6SCbV+", "TestScene", undefined);

      var ccclass$1q = _decorator.ccclass,
          disallowMultiple$k = _decorator.disallowMultiple,
          requireComponent$l = _decorator.requireComponent;
      var _GameCore$t = GameCore,
          Events$r = _GameCore$t.Events;
      var event$t = globalThis.game.event;
      var TestScene = (_dec$1l = ccclass$1q('TestScene'), _dec2$_ = requireComponent$l(SceneManager), _dec$1l(_class$1q = disallowMultiple$k(_class$1q = _dec2$_(_class$1q = /*#__PURE__*/function (_Component) {
        _inherits(TestScene, _Component);

        var _super = _createSuper(TestScene);

        function TestScene() {
          var _this;

          _classCallCheck(this, TestScene);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleSwitchSceneEvent = function (payload) {
            var _this$scene;

            var sceneName = payload.sceneName,
                sceneData = payload.sceneData;
            (_this$scene = _this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.switchScene(sceneName, sceneData);
          };

          return _this;
        }

        _createClass(TestScene, [{
          key: "__preload",
          value: function __preload() {
            this.scene = this.getComponent(SceneManager);
            this.validateRequiredComponents(); // ? Listen events by plugin Event of GameCore

            this.scene.listenSwitchSceneEvent(this.handleSwitchSceneEvent);
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.scene) {
              throw new Error('GameScene: SceneManager not found');
            }
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.listenScreenEvents(); // TODO: add demo play sound in buttons, screen,..
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$t.once(Events$r.CLOSED_SCREEN, function (payload) {
              var screenName = payload.screenName;
              if (screenName !== ScreenKeys.LOADING_SCREEN) return; // event.emit(Events.OPEN_SCREEN, {
              //     screenName: ScreenKeys.NOTIFICATION_SCREEN,
              //     screenData: {
              //         message: 'Test screen events pass!',
              //         duration: 2,
              //         isCloseButtonVisible: false,
              //     },
              // })
            });
          }
        }, {
          key: "start",
          value: function start() {
            console.log('TestScene.start'); // event.emit(Events.OPEN_SCREEN, {
            //     screenName: ScreenKeys.LOADING_SCREEN,
            //     screenData: { duration: 0.5 },
            // })
          }
        }]);

        return TestScene;
      }(Component)) || _class$1q) || _class$1q) || _class$1q);

      cclegacy._RF.pop();

      var _dec$1m, _class$1r;

      cclegacy._RF.push({}, "56a103phldKO7/xShKcD3bI", "AnimationDemo", undefined);

      var ccclass$1r = _decorator.ccclass;
      var AnimationDemo = (_dec$1m = ccclass$1r('AnimationDemo'), _dec$1m(_class$1r = /*#__PURE__*/function (_Component) {
        _inherits(AnimationDemo, _Component);

        var _super = _createSuper(AnimationDemo);

        function AnimationDemo() {
          _classCallCheck(this, AnimationDemo);

          return _super.apply(this, arguments);
        }

        _createClass(AnimationDemo, [{
          key: "onLoad",
          value: // public __preload(): void {
          //     // called before onLoad, use for initialization
          // }
          function onLoad() {
            var _this$node$parent; // called once when the component first activated, before any start methods


            this.scene = (_this$node$parent = this.node.parent) === null || _this$node$parent === void 0 ? void 0 : _this$node$parent.getComponent(SceneManager);
          } // public start(): void {
          //     // called once when the component enabled for first time
          // }

        }, {
          key: "switchToTestScene2",
          value: function switchToTestScene2() {
            this.scene.switchScene('TestTransitionScene');
          }
        }]);

        return AnimationDemo;
      }(Component)) || _class$1r);

      cclegacy._RF.pop();

      var _dec$1n, _class$1s;

      cclegacy._RF.push({}, "a3b8adQtftPmKSSoumHWY1e", "AudioDemo", undefined);

      var ccclass$1s = _decorator.ccclass;
      var AudioDemo = (_dec$1n = ccclass$1s('AudioDemo'), _dec$1n(_class$1s = /*#__PURE__*/function (_Component) {
        _inherits(AudioDemo, _Component);

        var _super = _createSuper(AudioDemo);

        function AudioDemo() {
          var _this;

          _classCallCheck(this, AudioDemo);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.isMusicMute = false;
          _this.isSoundMute = false;
          _this.listSounds = [];
          return _this;
        }

        _createClass(AudioDemo, [{
          key: "onLoad",
          value: function onLoad() {
            var _find, _find2;

            this.musicComp = (_find = find('Music')) === null || _find === void 0 ? void 0 : _find.getComponent(Music);
            this.soundComp = (_find2 = find('Sound')) === null || _find2 === void 0 ? void 0 : _find2.getComponent(Sound);
            this.validateRequiredComponents();
            this.listSounds = [CodeSoundKeys.BEE_FLYING, CodeSoundKeys.BEE_STING_DOGE, CodeSoundKeys.BG_MUSIC, CodeSoundKeys.BUTTON_CLICK, CodeSoundKeys.COLLECTING_COINS, CodeSoundKeys.DOGE_DIES, CodeSoundKeys.DOGE_HURT, CodeSoundKeys.END_DRAW, CodeSoundKeys.HAND_CLAP, CodeSoundKeys.LEVEL_FAIL, CodeSoundKeys.LEVEL_PASS, CodeSoundKeys.LOST_STAR_IN_GAMEPLAY, CodeSoundKeys.RAISE_STAR, CodeSoundKeys.SPAWN_COINS, CodeSoundKeys.STAR_RAISE, CodeSoundKeys.TOUCH_START, CodeSoundKeys.BEE_BULLET_EXPLODE];
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.musicComp) {
              throw new Error('AudioDemo: Music not found');
            }

            if (!this.soundComp) {
              throw new Error('AudioDemo: Sound not found');
            }
          }
        }, {
          key: "playBackgroundMusic",
          value: function playBackgroundMusic() {
            this.musicComp.play(CodeSoundKeys.BG_MUSIC);
          }
        }, {
          key: "pauseBackgroundMusic",
          value: function pauseBackgroundMusic() {
            this.musicComp.pause(CodeSoundKeys.BG_MUSIC);
          }
        }, {
          key: "stopBackgroundMusic",
          value: function stopBackgroundMusic() {
            this.musicComp.stop(CodeSoundKeys.BG_MUSIC);
          }
        }, {
          key: "randomMusicChannelVolume",
          value: function randomMusicChannelVolume() {
            var random = Math.random();
            this.musicComp.setVolume(random);
          }
        }, {
          key: "toggleMuteMusicChannel",
          value: function toggleMuteMusicChannel() {
            if (this.isMusicMute) {
              this.musicComp.mute(false);
              this.isMusicMute = false;
            } else {
              this.musicComp.mute(true);
              this.isMusicMute = true;
            }
          }
        }, {
          key: "playRandomSound",
          value: function playRandomSound() {
            this.soundComp.play(this.listSounds[Math.floor(Math.random() * this.listSounds.length)]);
          }
        }, {
          key: "toggleMuteSoundChannel",
          value: function toggleMuteSoundChannel() {
            if (this.isSoundMute) {
              this.soundComp.mute(false);
              this.isSoundMute = false;
            } else {
              this.soundComp.mute(true);
              this.isSoundMute = true;
            }
          }
        }, {
          key: "randomSoundChannelVolume",
          value: function randomSoundChannelVolume() {
            var random = Math.random();
            this.soundComp.setVolume(random);
          }
        }]);

        return AudioDemo;
      }(Component)) || _class$1s);

      cclegacy._RF.pop();

      var _dec$1o, _class$1t;

      cclegacy._RF.push({}, "6cd06Fd0pBFjbLSPqmcXcU+", "CoinDemo", undefined);

      var ccclass$1t = _decorator.ccclass;
      var event$u = globalThis.game.event;
      var _GameCore$u = GameCore,
          Events$s = _GameCore$u.Events;
      var CoinDemo = (_dec$1o = ccclass$1t('CoinDemo'), _dec$1o(_class$1t = /*#__PURE__*/function (_Component) {
        _inherits(CoinDemo, _Component);

        var _super = _createSuper(CoinDemo);

        function CoinDemo() {
          _classCallCheck(this, CoinDemo);

          return _super.apply(this, arguments);
        }

        _createClass(CoinDemo, [{
          key: "onLoad",
          value: function onLoad() {
            this.node.on(GameplayEvents.REMOVE_COINS_FAILED, this.onRemoveCoinsFailed, this);
          }
        }, {
          key: "add500Coins",
          value: function add500Coins() {
            console.log('Add 500 coins');
            this.node.scene.emit(GameplayEvents.ADD_COINS, 500);
          }
        }, {
          key: "remove500Coins",
          value: function remove500Coins() {
            console.log('Remove 500 coins');
            this.node.scene.emit(GameplayEvents.REMOVE_COINS, 500);
          }
        }, {
          key: "onRemoveCoinsFailed",
          value: function onRemoveCoinsFailed() {
            event$u.emit(Events$s.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                duration: 1.5,
                message: 'Removing coins failed.'
              }
            });
          }
        }]);

        return CoinDemo;
      }(Component)) || _class$1t);

      cclegacy._RF.pop();

      var _dec$1p, _class$1u;

      cclegacy._RF.push({}, "eb414I+s6BFnbJpI9fuQ8ER", "DemoCoinBar", undefined);

      var ccclass$1u = _decorator.ccclass;
      var DemoCoinBar = (_dec$1p = ccclass$1u('DemoCoinBar'), _dec$1p(_class$1u = /*#__PURE__*/function (_Component) {
        _inherits(DemoCoinBar, _Component);

        var _super = _createSuper(DemoCoinBar);

        function DemoCoinBar() {
          _classCallCheck(this, DemoCoinBar);

          return _super.apply(this, arguments);
        }

        _createClass(DemoCoinBar, [{
          key: "onLoad",
          value: function onLoad() {
            this.node.scene.on(GameplayEvents.COIN_CHANGED, this.updateCoinDisplay, this);
          }
        }, {
          key: "updateCoinDisplay",
          value: function updateCoinDisplay(payload) {
            console.log('Update coin display', payload);
            var label = this.node.getComponent(Label);

            if (label) {
              label.string = "Current Coins: ".concat(payload.displayString);
            }
          }
        }]);

        return DemoCoinBar;
      }(Component)) || _class$1u);

      cclegacy._RF.pop();

      var _dec$1q, _class$1v;

      cclegacy._RF.push({}, "9e6b330nHBK2oNz8N9/lpDx", "FlowChallenge", undefined);

      var ccclass$1v = _decorator.ccclass;
      var _globalThis$game$k = globalThis.game,
          match$6 = _globalThis$game$k.match,
          player$f = _globalThis$game$k.player,
          event$v = _globalThis$game$k.event;
      var FlowChallenge = (_dec$1q = ccclass$1v('FlowChallenge'), _dec$1q(_class$1v = /*#__PURE__*/function (_Component) {
        _inherits(FlowChallenge, _Component);

        var _super = _createSuper(FlowChallenge);

        function FlowChallenge() {
          var _this;

          _classCallCheck(this, FlowChallenge);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.playerId = '';
          return _this;
        }

        _createClass(FlowChallenge, [{
          key: "onLoad",
          value: function onLoad() {
            this.playerId = player$f.getPlayerId();
          }
        }, {
          key: "showLoadingScreen",
          value: function showLoadingScreen(duration) {
            event$v.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "closeLoadingScreen",
          value: function closeLoadingScreen() {
            event$v.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$v.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "inviteFriends",
          value: function () {
            var _inviteFriends = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield match$6.challenge.invite.processAsync({
                  playerId: this.playerId
                });
              } catch (error) {
                console.warn('inviteFriends', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function inviteFriends() {
              return _inviteFriends.apply(this, arguments);
            }

            return inviteFriends;
          }()
        }, {
          key: "challengeFriend",
          value: function () {
            var _challengeFriend = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$6.challenge.friend.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('challengeFriend', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function challengeFriend(_x, _x2) {
              return _challengeFriend.apply(this, arguments);
            }

            return challengeFriend;
          }()
        }, {
          key: "joinChallenge",
          value: function () {
            var _joinChallenge = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$6.challenge.join.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('joinChallenge', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function joinChallenge(_x3, _x4) {
              return _joinChallenge.apply(this, arguments);
            }

            return joinChallenge;
          }()
        }, {
          key: "continueChallenge",
          value: function () {
            var _continueChallenge = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$6.challenge["continue"].processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('continueChallenge', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function continueChallenge(_x5, _x6) {
              return _continueChallenge.apply(this, arguments);
            }

            return continueChallenge;
          }()
        }, {
          key: "finishChallenge",
          value: function () {
            var _finishChallenge = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield match$6.challenge.finish.processAsync({
                  playerId: player$f.getPlayerId(),
                  playerScore: Math.floor(Math.random() * 2)
                });
              } catch (error) {
                console.warn('finishChallenge', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function finishChallenge() {
              return _finishChallenge.apply(this, arguments);
            }

            return finishChallenge;
          }()
        }]);

        return FlowChallenge;
      }(Component)) || _class$1v);

      cclegacy._RF.pop();

      var _dec$1r, _class$1w;

      cclegacy._RF.push({}, "f3decJ3ZlRLt6CDMHpl1XCe", "FlowContext", undefined);

      var ccclass$1w = _decorator.ccclass;
      var _globalThis$game$l = globalThis.game,
          match$7 = _globalThis$game$l.match,
          player$g = _globalThis$game$l.player,
          context$1 = _globalThis$game$l.context,
          event$w = _globalThis$game$l.event;
      var FlowContext = (_dec$1r = ccclass$1w('FlowContext'), _dec$1r(_class$1w = /*#__PURE__*/function (_Component) {
        _inherits(FlowContext, _Component);

        var _super = _createSuper(FlowContext);

        function FlowContext() {
          var _this;

          _classCallCheck(this, FlowContext);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.playerId = '';

          _this.changeContext = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator(function* (contextId, contextType, entryPointData) {
              context$1.receiveContext(contextId, contextType, entryPointData);
              yield context$1.detectContextSessionType();
              game.context.detectContextGameMode();
            });

            return function (_x, _x2, _x3) {
              return _ref.apply(this, arguments);
            };
          }();

          return _this;
        }

        _createClass(FlowContext, [{
          key: "onLoad",
          value: function onLoad() {
            this.playerId = player$g.getPlayerId();
          }
        }, {
          key: "showLoadingScreen",
          value: function showLoadingScreen(duration) {
            event$w.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "closeLoadingScreen",
          value: function closeLoadingScreen() {
            event$w.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$w.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "chooseFriends",
          value: function () {
            var _chooseFriends = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$7.context.choose.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('chooseFriends', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function chooseFriends(_x4, _x5) {
              return _chooseFriends.apply(this, arguments);
            }

            return chooseFriends;
          }()
        }, {
          key: "processContextData",
          value: function () {
            var _processContextData = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield context$1.processContextData();
              } catch (error) {
                console.warn('processContext', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function processContextData() {
              return _processContextData.apply(this, arguments);
            }

            return processContextData;
          }()
        }, {
          key: "setSingleContext",
          value: function setSingleContext() {
            var contextId = '';
            var contextType = 'SOLO';
            var entryPointData = {};
            this.changeContext(contextId, contextType, entryPointData);
          }
        }, {
          key: "setTournamentContext",
          value: function setTournamentContext() {
            var contextId = 'mocked-context-id-tournament';
            var contextType = 'THREAD';
            var entryPointData = {}; //? for tournament = true for FBInstant.getTournamentAsync() mock check

            this.changeUrl("/?context_source_id=123&context_type=GENERIC&tournament=true");
            this.changeContext(contextId, contextType, entryPointData);
          }
        }, {
          key: "setShareInviteContext",
          value: function setShareInviteContext() {
            var sessionContextType = context$1.getSessionContextTypes();
            var SHARE_INVITE = sessionContextType.SHARE_INVITE;
            var contextId = 'mocked-context-id-share-invite';
            var contextType = 'THREAD';
            var entryPointData = {
              type: SHARE_INVITE,
              playerId: '4766619483409000',
              playerName: 'Player',
              playerPhoto: ''
            };
            this.changeContext(contextId, contextType, entryPointData);
          }
        }, {
          key: "setMatchingGroupContext",
          value: function setMatchingGroupContext() {
            var sessionContextType = context$1.getSessionContextTypes();
            var MATCHING_GROUP = sessionContextType.MATCHING_GROUP;
            var contextId = 'mocked-context-id-matching-group';
            var contextType = 'GROUP';
            var entryPointData = {
              type: MATCHING_GROUP,
              playerId: '4766619483409000',
              playerName: 'Player',
              playerPhoto: '',
              playerScore: 100
            };
            this.changeContext(contextId, contextType, entryPointData);
          }
        }, {
          key: "setChallengeFriendContext",
          value: function setChallengeFriendContext() {
            var sessionContextType = context$1.getSessionContextTypes();
            var CHALLENGE_FRIEND = sessionContextType.CHALLENGE_FRIEND;
            var contextId = 'mocked-context-id-challenge-friend';
            var contextType = 'THREAD';
            var entryPointData = {
              type: CHALLENGE_FRIEND,
              playerId: '4766619483409000',
              playerName: 'Player',
              playerPhoto: ''
            };
            this.changeContext(contextId, contextType, entryPointData);
          }
        }, {
          key: "changeUrl",
          value: function changeUrl(urlPath) {
            window.history.pushState({}, '', urlPath);
          }
        }]);

        return FlowContext;
      }(Component)) || _class$1w);

      cclegacy._RF.pop();

      var _dec$1s, _class$1x;

      cclegacy._RF.push({}, "36562c8k/RF2p/1aLUWFaf8", "FlowGroup", undefined);

      var ccclass$1x = _decorator.ccclass;
      var _globalThis$game$m = globalThis.game,
          match$8 = _globalThis$game$m.match,
          player$h = _globalThis$game$m.player,
          event$x = _globalThis$game$m.event;
      var FlowGroup = (_dec$1s = ccclass$1x('FlowGroup'), _dec$1s(_class$1x = /*#__PURE__*/function (_Component) {
        _inherits(FlowGroup, _Component);

        var _super = _createSuper(FlowGroup);

        function FlowGroup() {
          var _this;

          _classCallCheck(this, FlowGroup);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.playerId = '';
          return _this;
        }

        _createClass(FlowGroup, [{
          key: "onLoad",
          value: function onLoad() {
            this.playerId = player$h.getPlayerId();
          }
        }, {
          key: "showLoadingScreen",
          value: function showLoadingScreen(duration) {
            event$x.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "closeLoadingScreen",
          value: function closeLoadingScreen() {
            event$x.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$x.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "startGroup",
          value: function () {
            var _startGroup = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$8.group.start.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('startGroup', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function startGroup(_x, _x2) {
              return _startGroup.apply(this, arguments);
            }

            return startGroup;
          }()
        }, {
          key: "joinGroup",
          value: function () {
            var _joinGroup = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$8.group.join.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('joinGroup', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function joinGroup(_x3, _x4) {
              return _joinGroup.apply(this, arguments);
            }

            return joinGroup;
          }()
        }, {
          key: "finishGroup",
          value: function () {
            var _finishGroup = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                player$h.setPlayerDataByName('score', Math.floor(Math.random() * 2));
                yield match$8.group.finish.processAsync();
              } catch (error) {
                console.warn('finishGroup', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function finishGroup() {
              return _finishGroup.apply(this, arguments);
            }

            return finishGroup;
          }()
        }]);

        return FlowGroup;
      }(Component)) || _class$1x);

      cclegacy._RF.pop();

      var _dec$1t, _class$1y;

      cclegacy._RF.push({}, "46e6dOzDGJMa48+tVKTAEIT", "FlowSingle", undefined);

      var ccclass$1y = _decorator.ccclass;
      var _globalThis$game$n = globalThis.game,
          match$9 = _globalThis$game$n.match,
          player$i = _globalThis$game$n.player,
          event$y = _globalThis$game$n.event;
      var FlowSingle = (_dec$1t = ccclass$1y('FlowSingle'), _dec$1t(_class$1y = /*#__PURE__*/function (_Component) {
        _inherits(FlowSingle, _Component);

        var _super = _createSuper(FlowSingle);

        function FlowSingle() {
          var _this;

          _classCallCheck(this, FlowSingle);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.playerId = '';
          return _this;
        }

        _createClass(FlowSingle, [{
          key: "onLoad",
          value: function onLoad() {
            this.playerId = player$i.getPlayerId();
          }
        }, {
          key: "showLoadingScreen",
          value: function showLoadingScreen(duration) {
            event$y.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "closeLoadingScreen",
          value: function closeLoadingScreen() {
            event$y.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$y.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "startSingle",
          value: function () {
            var _startSingle = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield match$9.single.start.processAsync({
                  playerId: this.playerId
                });
              } catch (error) {
                console.warn('startSingle', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function startSingle() {
              return _startSingle.apply(this, arguments);
            }

            return startSingle;
          }()
        }, {
          key: "finishSingle",
          value: function () {
            var _finishSingle = _asyncToGenerator(function* () {
              try {
                player$i.setPlayerDataByName('score', Math.floor(Math.random() * 2));
                yield match$9.single.finish.processAsync();
              } catch (error) {
                console.warn('finishSingle', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function finishSingle() {
              return _finishSingle.apply(this, arguments);
            }

            return finishSingle;
          }()
        }]);

        return FlowSingle;
      }(Component)) || _class$1y);

      cclegacy._RF.pop();

      var _dec$1u, _class$1z;

      cclegacy._RF.push({}, "943b1Zkv9BAaZVhinus8Bkv", "FlowTournament", undefined);

      var ccclass$1z = _decorator.ccclass;
      var _globalThis$game$o = globalThis.game,
          match$a = _globalThis$game$o.match,
          player$j = _globalThis$game$o.player,
          event$z = _globalThis$game$o.event;
      var FlowTournament = (_dec$1u = ccclass$1z('FlowTournament'), _dec$1u(_class$1z = /*#__PURE__*/function (_Component) {
        _inherits(FlowTournament, _Component);

        var _super = _createSuper(FlowTournament);

        function FlowTournament() {
          var _this;

          _classCallCheck(this, FlowTournament);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.playerId = '';
          return _this;
        }

        _createClass(FlowTournament, [{
          key: "onLoad",
          value: function onLoad() {
            this.playerId = player$j.getPlayerId();
          }
        }, {
          key: "showLoadingScreen",
          value: function showLoadingScreen(duration) {
            event$z.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "closeLoadingScreen",
          value: function closeLoadingScreen() {
            event$z.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$z.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "startTournament",
          value: function () {
            var _startTournament = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield match$a.tournament.start.processAsync({
                  playerId: this.playerId
                });
              } catch (error) {
                console.warn('startTournament', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function startTournament() {
              return _startTournament.apply(this, arguments);
            }

            return startTournament;
          }()
        }, {
          key: "joinTournament",
          value: function () {
            var _joinTournament = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$a.tournament.join.processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('joinTournament', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function joinTournament(_x, _x2) {
              return _joinTournament.apply(this, arguments);
            }

            return joinTournament;
          }()
        }, {
          key: "continueTournament",
          value: function () {
            var _continueTournament = _asyncToGenerator(function* (_, customEventData) {
              var payload = JSON.parse(customEventData);

              try {
                this.showLoadingScreen(0);
                yield match$a.tournament["continue"].processAsync(_objectSpread2(_objectSpread2({}, payload), {}, {
                  playerId: this.playerId
                }));
              } catch (error) {
                console.warn('continueTournament', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function continueTournament(_x3, _x4) {
              return _continueTournament.apply(this, arguments);
            }

            return continueTournament;
          }()
        }, {
          key: "finishTournament",
          value: function () {
            var _finishTournament = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                player$j.setPlayerDataByName('score', Math.floor(Math.random() * 2));
                yield match$a.single.finish.processAsync();
              } catch (error) {
                console.warn('finishTournament', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function finishTournament() {
              return _finishTournament.apply(this, arguments);
            }

            return finishTournament;
          }()
        }, {
          key: "createTournament",
          value: function () {
            var _createTournament = _asyncToGenerator(function* () {
              try {
                this.showLoadingScreen(0);
                yield match$a.tournament.create.processAsync({
                  playerId: this.playerId
                });
              } catch (error) {
                console.warn('createTournament', error);

                if (error instanceof Error) {
                  this.showNotificationScreen(error.message);
                }
              } finally {
                this.closeLoadingScreen();
              }
            });

            function createTournament() {
              return _createTournament.apply(this, arguments);
            }

            return createTournament;
          }()
        }]);

        return FlowTournament;
      }(Component)) || _class$1z);

      cclegacy._RF.pop();

      var _dec$1v, _dec2$$, _dec3$M, _class$1A, _class2$R, _descriptor$P, _descriptor2$E;

      cclegacy._RF.push({}, "d78a7DHN+5P/YjKftUFEZcU", "JavaAds", undefined);

      var ccclass$1A = _decorator.ccclass,
          property$S = _decorator.property;
      var _globalThis$game$p = globalThis.game,
          ads$4 = _globalThis$game$p.ads,
          event$A = _globalThis$game$p.event;
      var JavaAds = (_dec$1v = ccclass$1A('JavaAds'), _dec2$$ = property$S(Label), _dec3$M = property$S(Label), _dec$1v(_class$1A = (_class2$R = /*#__PURE__*/function (_Component) {
        _inherits(JavaAds, _Component);

        var _super = _createSuper(JavaAds);

        function JavaAds() {
          var _this;

          _classCallCheck(this, JavaAds);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "interLabel", _descriptor$P, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardedLabel", _descriptor2$E, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(JavaAds, [{
          key: "__preload",
          value: function __preload() {
            // called before onLoad, use for initialization
            this.setupAds();
          }
        }, {
          key: "setupAds",
          value: function setupAds() {
            return;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {// called once when the component first activated, before any start methods
          }
        }, {
          key: "start",
          value: function start() {// called once when the component enabled for first time
          }
        }, {
          key: "showBannerAds",
          value: function showBannerAds() {
            // called when the attached node first activated
            ads$4.showBannerAdAsync()["catch"](function (error) {
              console.log('%c error: ', 'font-size:12px;background-color: #FFDD4D;color:#fff;', error);
            });
          }
        }, {
          key: "hideBannerAds",
          value: function hideBannerAds() {
            // called when the attached node first activated
            ads$4.hideBannerAdAsync()["catch"](function (error) {
              console.log('%c error: ', 'font-size:12px;background-color: #6EC1C2;color:#fff;', error);
            });
          }
        }, {
          key: "loadRewardedAds",
          value: function () {
            var _loadRewardedAds = _asyncToGenerator(function* () {
              try {
                this.showNotificationScreen('loading');
                yield ads$4.preloadRewardedVideoAsync();
                this.closeNotificationScreen();
                this.rewardedLabel.color = new Color(0, 255, 0);
              } catch (error) {
                console.log('%c error: ', 'font-size:12px;background-color: #A8978E;color:#fff;', error);
                this.showNotificationScreen('Load ads fail.', 2);
              }
            });

            function loadRewardedAds() {
              return _loadRewardedAds.apply(this, arguments);
            }

            return loadRewardedAds;
          }()
        }, {
          key: "showRewardAds",
          value: function () {
            var _showRewardAds = _asyncToGenerator(function* () {
              try {
                this.showNotificationScreen('loading');
                yield ads$4.showRewardedVideoAsync();
                this.closeNotificationScreen();
              } catch (error) {
                console.warn('showTips failed', error);

                if (error instanceof Object && 'code' in error && error.code === 'USER_INPUT') {
                  this.showNotificationScreen('Sorry, no rewards!\n You have cancelled the ad.', 2);
                  return;
                }

                this.showNotificationScreen('No ads to display.', 2);
              } finally {
                this.rewardedLabel.color = new Color(0, 0, 0);
              }
            });

            function showRewardAds() {
              return _showRewardAds.apply(this, arguments);
            }

            return showRewardAds;
          }()
        }, {
          key: "loadInterAds",
          value: function () {
            var _loadInterAds = _asyncToGenerator(function* () {
              try {
                this.showNotificationScreen('loading');
                yield ads$4.preloadInterstitialAdAsync();
                this.closeNotificationScreen();
                this.interLabel.color = new Color(0, 255, 0);
              } catch (error) {
                console.log('%c error: ', 'font-size:12px;background-color: #BAAC9A;color:#fff;', error);
                this.showNotificationScreen('Load ads fail.', 2);
              }
            });

            function loadInterAds() {
              return _loadInterAds.apply(this, arguments);
            }

            return loadInterAds;
          }()
        }, {
          key: "showInterAds",
          value: function () {
            var _showInterAds = _asyncToGenerator(function* () {
              try {
                this.showNotificationScreen('loading');
                yield ads$4.showInterstitialAdAsync();
                this.closeNotificationScreen();
              } catch (error) {
                console.warn('showTips failed', error);

                if (error instanceof Object && 'code' in error && error.code === 'USER_INPUT') {
                  this.showNotificationScreen('Sorry, no rewards!\n You have cancelled the ad.', 2);
                  return;
                }

                this.showNotificationScreen('No ads to display.', 2);
              } finally {
                this.interLabel.color = new Color(0, 0, 0);
              }
            });

            function showInterAds() {
              return _showInterAds.apply(this, arguments);
            }

            return showInterAds;
          }()
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message, duration) {
            event$A.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message,
                duration: duration
              }
            });
          }
        }, {
          key: "closeNotificationScreen",
          value: function closeNotificationScreen() {
            event$A.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN
            });
          }
        }]);

        return JavaAds;
      }(Component), (_descriptor$P = _applyDecoratedDescriptor(_class2$R.prototype, "interLabel", [_dec2$$], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$E = _applyDecoratedDescriptor(_class2$R.prototype, "rewardedLabel", [_dec3$M], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$R)) || _class$1A);

      cclegacy._RF.pop();

      var _dec$1w, _class$1B;

      cclegacy._RF.push({}, "64311EGU4RKDpfjDUran9nc", "RewardedAdsTest", undefined);

      var ccclass$1B = _decorator.ccclass;
      var _globalThis$game$q = globalThis.game,
          ads$5 = _globalThis$game$q.ads,
          event$B = _globalThis$game$q.event;
      var RewardedAdsTest = (_dec$1w = ccclass$1B('RewardedAdsTest'), _dec$1w(_class$1B = /*#__PURE__*/function (_Component) {
        _inherits(RewardedAdsTest, _Component);

        var _super = _createSuper(RewardedAdsTest);

        function RewardedAdsTest() {
          _classCallCheck(this, RewardedAdsTest);

          return _super.apply(this, arguments);
        }

        _createClass(RewardedAdsTest, [{
          key: "show",
          value: function show() {
            this.showRewardedAds();
          }
        }, {
          key: "showRewardedAds",
          value: function () {
            var _showRewardedAds = _asyncToGenerator(function* () {
              try {
                event$B.emit(GameCore.Events.OPEN_SCREEN, {
                  screenName: ScreenKeys.LOADING_SCREEN,
                  screenData: {
                    message: 'Loading ads...'
                  }
                });
                yield ads$5.preloadRewardedVideoAsync();
                yield ads$5.showRewardedVideoAsync();
                event$B.emit(GameCore.Events.CLOSE_SCREEN, {
                  screenName: ScreenKeys.LOADING_SCREEN
                });
                event$B.emit(GameCore.Events.OPEN_SCREEN, {
                  screenName: ScreenKeys.NOTIFICATION_SCREEN,
                  screenData: {
                    message: 'Ads finished.',
                    duration: 2
                  }
                });
              } catch (error) {
                console.warn('showTips failed', error);

                if (_typeof(error) === 'object' && error && 'code' in error && error.code === 'USER_INPUT') {
                  event$B.emit(GameCore.Events.OPEN_SCREEN, {
                    screenName: ScreenKeys.NOTIFICATION_SCREEN,
                    screenData: {
                      message: 'Sorry, no rewards!\n You have cancelled the ad.',
                      duration: 2
                    }
                  });
                  return;
                }

                event$B.emit(GameCore.Events.OPEN_SCREEN, {
                  screenName: ScreenKeys.NOTIFICATION_SCREEN,
                  screenData: {
                    message: 'No ads to display.',
                    duration: 2
                  }
                });
              } finally {
                event$B.emit(GameCore.Events.CLOSE_SCREEN, {
                  screenName: ScreenKeys.LOADING_SCREEN
                });
              }
            });

            function showRewardedAds() {
              return _showRewardedAds.apply(this, arguments);
            }

            return showRewardedAds;
          }()
        }, {
          key: "close",
          value: function close() {
            event$B.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }]);

        return RewardedAdsTest;
      }(Component)) || _class$1B);

      cclegacy._RF.pop();

      var _dec$1x, _class$1C;

      cclegacy._RF.push({}, "0fd01MYjfdD+4IeN6PtQl3m", "ScreenCongratulation", undefined);

      var ccclass$1C = _decorator.ccclass;
      var event$C = globalThis.game.event;
      var ScreenCongratulation = (_dec$1x = ccclass$1C('ScreenCongratulation'), _dec$1x(_class$1C = /*#__PURE__*/function (_Component) {
        _inherits(ScreenCongratulation, _Component);

        var _super = _createSuper(ScreenCongratulation);

        function ScreenCongratulation() {
          _classCallCheck(this, ScreenCongratulation);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenCongratulation, [{
          key: "show",
          value: function show() {
            event$C.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.CONGRATULATION_SCREEN
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$C.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.CONGRATULATION_SCREEN
            });
          }
        }]);

        return ScreenCongratulation;
      }(Component)) || _class$1C);

      cclegacy._RF.pop();

      var _dec$1y, _class$1D;

      cclegacy._RF.push({}, "bb2dcIUQjhPDLt7B6ga20s/", "ScreenLoading", undefined);

      var ccclass$1D = _decorator.ccclass;
      var event$D = globalThis.game.event;
      var ScreenLoading = (_dec$1y = ccclass$1D('ScreenLoading'), _dec$1y(_class$1D = /*#__PURE__*/function (_Component) {
        _inherits(ScreenLoading, _Component);

        var _super = _createSuper(ScreenLoading);

        function ScreenLoading() {
          _classCallCheck(this, ScreenLoading);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenLoading, [{
          key: "show",
          value: function show(_, customEventData) {
            var duration = Number(customEventData);
            event$D.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN,
              screenData: {
                duration: duration
              }
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$D.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }]);

        return ScreenLoading;
      }(Component)) || _class$1D);

      cclegacy._RF.pop();

      var _dec$1z, _class$1E;

      cclegacy._RF.push({}, "71603KupFhNAYktx1isDcrj", "ScreenNotification", undefined);

      var ccclass$1E = _decorator.ccclass;
      var event$E = globalThis.game.event;
      var ScreenNotification = (_dec$1z = ccclass$1E('ScreenNotification'), _dec$1z(_class$1E = /*#__PURE__*/function (_Component) {
        _inherits(ScreenNotification, _Component);

        var _super = _createSuper(ScreenNotification);

        function ScreenNotification() {
          _classCallCheck(this, ScreenNotification);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenNotification, [{
          key: "show",
          value: function show(_, customEventData) {
            var message = String(customEventData);
            event$E.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$E.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LOADING_SCREEN
            });
          }
        }]);

        return ScreenNotification;
      }(Component)) || _class$1E);

      cclegacy._RF.pop();

      var _dec$1A, _class$1F;

      cclegacy._RF.push({}, "1fb3eggYuVBQo5Uuzm/Nmjh", "ScreenSettings", undefined);

      var ccclass$1F = _decorator.ccclass;
      var event$F = globalThis.game.event;
      var ScreenSettings = (_dec$1A = ccclass$1F('ScreenSettings'), _dec$1A(_class$1F = /*#__PURE__*/function (_Component) {
        _inherits(ScreenSettings, _Component);

        var _super = _createSuper(ScreenSettings);

        function ScreenSettings() {
          _classCallCheck(this, ScreenSettings);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenSettings, [{
          key: "show",
          value: function show(_, customEventData) {
            var message = String(customEventData);
            event$F.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.SETTINGS_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$F.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.SETTINGS_SCREEN
            });
          }
        }]);

        return ScreenSettings;
      }(Component)) || _class$1F);

      cclegacy._RF.pop();

      var _dec$1B, _class$1G;

      cclegacy._RF.push({}, "08a36NCEUtD0ZoE9o0+nskC", "ScreenTimeUp", undefined);

      var ccclass$1G = _decorator.ccclass;
      var event$G = globalThis.game.event;
      var ScreenTimeUp = (_dec$1B = ccclass$1G('ScreenTimeUp'), _dec$1B(_class$1G = /*#__PURE__*/function (_Component) {
        _inherits(ScreenTimeUp, _Component);

        var _super = _createSuper(ScreenTimeUp);

        function ScreenTimeUp() {
          _classCallCheck(this, ScreenTimeUp);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenTimeUp, [{
          key: "show",
          value: function show() {
            event$G.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.TIME_UP_SCREEN
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$G.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.TIME_UP_SCREEN
            });
          }
        }]);

        return ScreenTimeUp;
      }(Component)) || _class$1G);

      cclegacy._RF.pop();

      var _dec$1C, _class$1H;

      cclegacy._RF.push({}, "ae2cdksVsdJUKhhznchh9wJ", "ScreenWinning", undefined);

      var ccclass$1H = _decorator.ccclass;
      var event$H = globalThis.game.event;
      var ScreenWinning = (_dec$1C = ccclass$1H('ScreenWinning'), _dec$1C(_class$1H = /*#__PURE__*/function (_Component) {
        _inherits(ScreenWinning, _Component);

        var _super = _createSuper(ScreenWinning);

        function ScreenWinning() {
          _classCallCheck(this, ScreenWinning);

          return _super.apply(this, arguments);
        }

        _createClass(ScreenWinning, [{
          key: "show",
          value: function show() {
            event$H.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.LEVEL_COMPLETE_SCREEN,
              screenData: {
                coins: 50,
                level: 12
              }
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$H.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.LEVEL_COMPLETE_SCREEN
            });
          }
        }]);

        return ScreenWinning;
      }(Component)) || _class$1H);

      cclegacy._RF.pop();

      var _dec$1D, _class$1I;

      cclegacy._RF.push({}, "b45724VpPFL5ofnRhHicI4I", "StartLevel", undefined);

      var ccclass$1I = _decorator.ccclass;
      var event$I = globalThis.game.event;
      var StartLevel = (_dec$1D = ccclass$1I('StartLevel'), _dec$1D(_class$1I = /*#__PURE__*/function (_Component) {
        _inherits(StartLevel, _Component);

        var _super = _createSuper(StartLevel);

        function StartLevel() {
          _classCallCheck(this, StartLevel);

          return _super.apply(this, arguments);
        }

        _createClass(StartLevel, [{
          key: "show",
          value: function show() {
            event$I.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.START_LEVEL_SCREEN
            });
          }
        }, {
          key: "close",
          value: function close() {
            event$I.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.START_LEVEL_SCREEN
            });
          }
        }]);

        return StartLevel;
      }(Component)) || _class$1I);

      cclegacy._RF.pop();

      var _dec$1E, _class$1J;

      cclegacy._RF.push({}, "abf91gNohBK7arKnziqu2PF", "AnimationDemo2", undefined);

      var ccclass$1J = _decorator.ccclass;
      var AnimationDemo2 = (_dec$1E = ccclass$1J('AnimationDemo2'), _dec$1E(_class$1J = /*#__PURE__*/function (_Component) {
        _inherits(AnimationDemo2, _Component);

        var _super = _createSuper(AnimationDemo2);

        function AnimationDemo2() {
          _classCallCheck(this, AnimationDemo2);

          return _super.apply(this, arguments);
        }

        _createClass(AnimationDemo2, [{
          key: "onLoad",
          value: function onLoad() {
            var _this$node$parent; // called once when the component first activated, before any start methods


            this.scene = (_this$node$parent = this.node.parent) === null || _this$node$parent === void 0 ? void 0 : _this$node$parent.getComponent(SceneManager);
          }
        }, {
          key: "switchToTestScene2",
          value: function switchToTestScene2() {
            this.scene.switchScene('TestScene');
          }
        }]);

        return AnimationDemo2;
      }(Component)) || _class$1J);

      cclegacy._RF.pop();

      var _dec$1F, _dec2$10, _dec3$N, _dec4$v, _dec5$m, _dec6$h, _dec7$c, _class$1K, _class2$S, _descriptor$Q, _descriptor2$F, _descriptor3$r, _descriptor4$i, _descriptor5$f;

      cclegacy._RF.push({}, "cecf2nUBzhIWZw7uJgVliXz", "CongratulationScreen", undefined);

      var ccclass$1K = _decorator.ccclass,
          property$T = _decorator.property,
          disallowMultiple$l = _decorator.disallowMultiple,
          requireComponent$m = _decorator.requireComponent;
      var _GameCore$v = GameCore,
          Events$t = _GameCore$v.Events;
      var event$J = globalThis.game.event;
      var CongratulationScreen = (_dec$1F = ccclass$1K('CongratulationScreen'), _dec2$10 = requireComponent$m(BaseScreen), _dec3$N = property$T(Node$1), _dec4$v = property$T(Node$1), _dec5$m = property$T(Button), _dec6$h = property$T(Button), _dec7$c = property$T(Button), _dec$1F(_class$1K = disallowMultiple$l(_class$1K = _dec2$10(_class$1K = (_class2$S = /*#__PURE__*/function (_Component) {
        _inherits(CongratulationScreen, _Component);

        var _super = _createSuper(CongratulationScreen);

        function CongratulationScreen() {
          var _this;

          _classCallCheck(this, CongratulationScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "congratulation", _descriptor$Q, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "confirmation", _descriptor2$F, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButtonComponent", _descriptor3$r, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "yesButtonComponent", _descriptor4$i, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noButtonComponent", _descriptor5$f, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
            _this.closeButtonComponent.interactable = true;
            _this.yesButtonComponent.interactable = true;
            _this.noButtonComponent.interactable = true;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(CongratulationScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('CongratulationScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.enabled = false;
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.congratulation) {
              throw new Error('CongratulationScreen: congratulation not found');
            }

            if (!this.confirmation) {
              throw new Error('CongratulationScreen: confirmation not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            // ? Here's a demo of all the events a screen has
            event$J.on(Events$t.OPENING_SCREEN, this.handleOpeningScreen);
            event$J.on(Events$t.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$J.off(Events$t.OPENING_SCREEN, this.handleOpeningScreen);
            event$J.off(Events$t.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            if (!this.enabled) return;
            this.confirmation.active = false;
            this.congratulation.active = true;
          }
        }, {
          key: "close",
          value: function close() {
            this.closeButtonComponent.interactable = false;
            this.yesButtonComponent.interactable = false;
            this.noButtonComponent.interactable = false;
            event$J.emit(Events$t.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          } // ? Callback for click event of StartOverButton

        }, {
          key: "handleStartOver",
          value: function handleStartOver() {
            this.confirmation.active = true;
            this.congratulation.active = false;
            var opacity = this.confirmation.getComponent(UIOpacity);

            if (!opacity) {
              console.warn('CongratulationScreen: UIOpacity not found');
              return;
            }

            tween(opacity).set({
              opacity: 0
            }).to(0.2, {
              opacity: 255
            }, {
              easing: 'smooth'
            }).start();
            tween(this.confirmation).set({
              scale: new Vec3(0, 0, 0)
            }).to(0.2, {
              scale: new Vec3(1, 1, 1)
            }, {
              easing: 'smooth'
            }).start();
          } // ? Callback for click event of YesButton

        }, {
          key: "handleYesStartOver",
          value: function handleYesStartOver() {
            this.close();
            this.node.scene.emit(GameplayEvents.START_OVER);
          } // ? Callback for click event of NoButton

        }, {
          key: "handleNoStartOver",
          value: function handleNoStartOver() {
            this.close();
            this.requestGameReplay();
          } // ? Callback for click event of CloseButton

        }, {
          key: "handleClickedClose",
          value: function handleClickedClose() {
            this.close();
            this.requestGameReplay();
          }
        }, {
          key: "requestGameReplay",
          value: function requestGameReplay() {
            this.node.scene.emit(GameplayEvents.GAME_REPLAY, {
              level: this.screen.data['level']
            });
          }
          /* public closeConfirmation() {
              this.confirmation.active = true
              const opacity = this.confirmation.getComponent(UIOpacity)
              opacity.opacity = 255
              tween(opacity).to(0.2, { opacity: 0 }, { easing: 'smooth' }).start()
              tween(this.confirmation)
                  .to(0.2, { scale: new Vec3(0, 0, 0) }, { easing: 'smooth' })
                  .call(() => {
                      this.confirmation.active = false
                  })
                  .start()
          } */

        }]);

        return CongratulationScreen;
      }(Component), (_descriptor$Q = _applyDecoratedDescriptor(_class2$S.prototype, "congratulation", [_dec3$N], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$F = _applyDecoratedDescriptor(_class2$S.prototype, "confirmation", [_dec4$v], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$r = _applyDecoratedDescriptor(_class2$S.prototype, "closeButtonComponent", [_dec5$m], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$i = _applyDecoratedDescriptor(_class2$S.prototype, "yesButtonComponent", [_dec6$h], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$f = _applyDecoratedDescriptor(_class2$S.prototype, "noButtonComponent", [_dec7$c], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$S)) || _class$1K) || _class$1K) || _class$1K);

      cclegacy._RF.pop();

      var _dec$1G, _dec2$11, _dec3$O, _dec4$w, _class$1L, _class2$T, _descriptor$R, _descriptor2$G, _descriptor3$s;

      cclegacy._RF.push({}, "6fed95tFh5MRKzFqaFB2Ts8", "GetCoinScreen", undefined);

      var ccclass$1L = _decorator.ccclass,
          property$U = _decorator.property;
      var event$K = globalThis.game.event;
      var _GameCore$w = GameCore,
          Events$u = _GameCore$w.Events;
      var GetCoinScreen = (_dec$1G = ccclass$1L('GetCoinScreen'), _dec2$11 = property$U(Label), _dec3$O = property$U(Button), _dec4$w = property$U(Button), _dec$1G(_class$1L = (_class2$T = /*#__PURE__*/function (_Component) {
        _inherits(GetCoinScreen, _Component);

        var _super = _createSuper(GetCoinScreen);

        function GetCoinScreen() {
          var _this;

          _classCallCheck(this, GetCoinScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "quantityLabel", _descriptor$R, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButtonComponent", _descriptor2$G, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getNowButtonComponent", _descriptor3$s, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            console.log('GetCoinScreen.OPENING_SCREEN', payload);
            if (!_this.validateEventPayload(payload)) return;
            _this.closeButtonComponent.interactable = true;
            _this.getNowButtonComponent.interactable = true;

            _this.updateStatus();
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(GetCoinScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('GetCoinScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.quantityLabel) {
              throw new Error('GetCoinScreen: quantityLabel not found');
            }

            if (!this.closeButtonComponent) {
              throw new Error('GetCoinScreen: closeButton not found');
            }

            if (!this.getNowButtonComponent) {
              throw new Error('GetCoinScreen: getNowButton not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$K.on(Events$u.OPENING_SCREEN, this.handleOpeningScreen);
            event$K.on(Events$u.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$K.off(Events$u.OPENING_SCREEN, this.handleOpeningScreen);
            event$K.off(Events$u.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            if (!('screenName' in payload)) return false;
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            this.payload = payload;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.updateStatus();
            this.runPopUpAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            this.closeButtonComponent.interactable = false;
            this.getNowButtonComponent.interactable = false;
            event$K.emit(Events$u.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "updateStatus",
          value: function updateStatus() {
            this.updateCoinQuantity();
          }
        }, {
          key: "runPopUpAnimation",
          value: function runPopUpAnimation() {
            if (!this.screen.container) {
              console.warn('GetCoinScreen: screen not found');
            }
          }
        }, {
          key: "updateCoinQuantity",
          value: function updateCoinQuantity() {
            var quantity = this.getQuantity();

            if (quantity) {
              this.updateQuantityLabel(quantity);
            }
          }
        }, {
          key: "updateQuantityLabel",
          value: function updateQuantityLabel(quantity) {
            this.quantityLabel.string = "x".concat(quantity.toString());
          }
        }, {
          key: "getQuantity",
          value: function getQuantity() {
            if (!this.payload || !('screenData' in this.payload)) {
              return 0;
            }

            var screenData = this.payload.screenData;
            if (!screenData) return 0;

            if ('quantity' in screenData && screenData.quantity && typeof screenData.quantity === 'number') {
              return screenData.quantity;
            }

            return 0;
          }
        }, {
          key: "handleAddCoin",
          value: function handleAddCoin() {
            var quantity = this.getQuantity();
            this.node.scene.emit(GameplayEvents.ADD_COINS, quantity);
            this.close();
          } // ? Callback for click event of GetNowButton

        }, {
          key: "handleGetNowButtonClicked",
          value: function () {
            var _handleGetNowButtonClicked = _asyncToGenerator(function* () {
              var _this2 = this;

              this.stopAllSounds();
              yield GeneralUtils.showRewardVideoAdAsync({
                onSucceedCallback: function onSucceedCallback() {
                  _this2.handleAddCoin();
                }
              });
            });

            function handleGetNowButtonClicked() {
              return _handleGetNowButtonClicked.apply(this, arguments);
            }

            return handleGetNowButtonClicked;
          }()
        }, {
          key: "stopAllSounds",
          value: function stopAllSounds() {
            var _find, _find$getComponent;

            (_find = find('Sound')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Sound)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.stopAll();
          }
        }]);

        return GetCoinScreen;
      }(Component), (_descriptor$R = _applyDecoratedDescriptor(_class2$T.prototype, "quantityLabel", [_dec2$11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$G = _applyDecoratedDescriptor(_class2$T.prototype, "closeButtonComponent", [_dec3$O], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$s = _applyDecoratedDescriptor(_class2$T.prototype, "getNowButtonComponent", [_dec4$w], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$T)) || _class$1L);

      cclegacy._RF.pop();

      var _dec$1H, _dec2$12, _dec3$P, _dec4$x, _dec5$n, _dec6$i, _class$1M, _class2$U, _descriptor$S, _descriptor2$H, _descriptor3$t, _descriptor4$j, _descriptor5$g;

      cclegacy._RF.push({}, "5dc314yNDdKF4taMB0oLQ1H", "ItemIcon", undefined);

      var ccclass$1M = _decorator.ccclass,
          property$V = _decorator.property;
      var ItemIcon = (_dec$1H = ccclass$1M('ItemIcon'), _dec2$12 = property$V(Sprite), _dec3$P = property$V(Sprite), _dec4$x = property$V(Sprite), _dec5$n = property$V(Sprite), _dec6$i = property$V(Label), _dec$1H(_class$1M = (_class2$U = /*#__PURE__*/function (_Component) {
        _inherits(ItemIcon, _Component);

        var _super = _createSuper(ItemIcon);

        function ItemIcon() {
          var _this;

          _classCallCheck(this, ItemIcon);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "iconHint", _descriptor$S, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconStorm", _descriptor2$H, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconThunder", _descriptor3$t, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconPlier", _descriptor4$j, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quantityLabel", _descriptor5$g, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ItemIcon, [{
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.iconHint) {
              throw new Error('ItemIcon: iconHint not found');
            }

            if (!this.iconStorm) {
              throw new Error('ItemIcon: iconStorm not found');
            }

            if (!this.iconThunder) {
              throw new Error('ItemIcon: iconThunder not found');
            }

            if (!this.iconPlier) {
              throw new Error('ItemIcon: iconPlier not found');
            }

            if (!this.quantityLabel) {
              throw new Error('ItemIcon: quantityLabel not found');
            }
          }
        }, {
          key: "updateIcon",
          value: function updateIcon(itemType) {
            switch (itemType) {
              case ItemKeys.HINT:
                this.iconHint.node.active = true;
                this.iconStorm.node.active = false;
                this.iconThunder.node.active = false;
                this.iconPlier.node.active = false;
                break;

              case ItemKeys.STORM:
                this.iconHint.node.active = false;
                this.iconStorm.node.active = true;
                this.iconThunder.node.active = false;
                this.iconPlier.node.active = false;
                break;

              case ItemKeys.THUNDER:
                this.iconHint.node.active = false;
                this.iconStorm.node.active = false;
                this.iconThunder.node.active = true;
                this.iconPlier.node.active = false;
                break;

              case ItemKeys.PLIERS:
                this.iconHint.node.active = false;
                this.iconStorm.node.active = false;
                this.iconThunder.node.active = false;
                this.iconPlier.node.active = true;
                break;

              default:
                console.warn('ItemIcon: unknown item type', itemType);
                break;
            }
          }
        }, {
          key: "updateQuantity",
          value: function updateQuantity(quantity) {
            this.quantityLabel.string = "x".concat(quantity);
          }
        }]);

        return ItemIcon;
      }(Component), (_descriptor$S = _applyDecoratedDescriptor(_class2$U.prototype, "iconHint", [_dec2$12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$H = _applyDecoratedDescriptor(_class2$U.prototype, "iconStorm", [_dec3$P], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$t = _applyDecoratedDescriptor(_class2$U.prototype, "iconThunder", [_dec4$x], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$j = _applyDecoratedDescriptor(_class2$U.prototype, "iconPlier", [_dec5$n], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$g = _applyDecoratedDescriptor(_class2$U.prototype, "quantityLabel", [_dec6$i], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$U)) || _class$1M);

      cclegacy._RF.pop();

      var _dec$1I, _dec2$13, _dec3$Q, _dec4$y, _class$1N, _class2$V, _descriptor$T, _descriptor2$I, _descriptor3$u;

      cclegacy._RF.push({}, "f016fTAlsNKRYkdu72AyCLI", "GetItemScreen", undefined);

      var ccclass$1N = _decorator.ccclass,
          property$W = _decorator.property;
      var _globalThis$game$r = globalThis.game,
          event$L = _globalThis$game$r.event,
          ads$6 = _globalThis$game$r.ads,
          language$7 = _globalThis$game$r.language;
      var _GameCore$x = GameCore,
          Events$v = _GameCore$x.Events;
      var GetItemScreen = (_dec$1I = ccclass$1N('GetItemScreen'), _dec2$13 = property$W(ItemIcon), _dec3$Q = property$W(Button), _dec4$y = property$W(Button), _dec$1I(_class$1N = (_class2$V = /*#__PURE__*/function (_Component) {
        _inherits(GetItemScreen, _Component);

        var _super = _createSuper(GetItemScreen);

        function GetItemScreen() {
          var _this;

          _classCallCheck(this, GetItemScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "itemIcon", _descriptor$T, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButtonComponent", _descriptor2$I, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getNowButtonComponent", _descriptor3$u, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            console.log('SettingsScreen.OPENING_SCREEN', payload);
            if (!_this.validateEventPayload(payload)) return;
            _this.closeButtonComponent.interactable = true;
            _this.getNowButtonComponent.interactable = true;

            _this.updateStatus();
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(GetItemScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('SettingsScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.itemIcon) {
              throw new Error('GetItemScreen: itemIcon not found');
            }

            if (!this.closeButtonComponent) {
              throw new Error('GetItemScreen: closeButton not found');
            }

            if (!this.getNowButtonComponent) {
              throw new Error('GetItemScreen: getNowButton not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$L.on(Events$v.OPENING_SCREEN, this.handleOpeningScreen);
            event$L.on(Events$v.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$L.off(Events$v.OPENING_SCREEN, this.handleOpeningScreen);
            event$L.off(Events$v.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            if (!('screenName' in payload)) return false;
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            this.payload = payload;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.updateStatus();
            this.runPopUpAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            this.closeButtonComponent.interactable = false;
            this.getNowButtonComponent.interactable = false;
            event$L.emit(Events$v.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "updateStatus",
          value: function updateStatus() {
            this.updateItemIcon();
          }
        }, {
          key: "runPopUpAnimation",
          value: function runPopUpAnimation() {
            if (!this.screen.container) {
              console.warn('SettingsScreen: screen not found');
            }
          }
        }, {
          key: "updateItemIcon",
          value: function updateItemIcon() {
            var itemType = this.getItemType();

            if (itemType) {
              this.itemIcon.updateIcon(itemType);
            }

            var quantity = this.getQuantity();

            if (quantity) {
              this.itemIcon.updateQuantity(quantity);
            }
          }
        }, {
          key: "getItemType",
          value: function getItemType() {
            if (!this.payload || !('screenData' in this.payload)) {
              return null;
            }

            var screenData = this.payload.screenData;
            if (!screenData) return null;

            if ('item' in screenData && screenData.item && typeof screenData.item === 'string') {
              return screenData.item;
            }

            return null;
          }
        }, {
          key: "getQuantity",
          value: function getQuantity() {
            if (!this.payload || !('screenData' in this.payload)) {
              return 0;
            }

            var screenData = this.payload.screenData;
            if (!screenData) return 0;

            if ('quantity' in screenData && screenData.quantity && typeof screenData.quantity === 'number') {
              return screenData.quantity;
            }

            return 0;
          }
        }, {
          key: "handleAddItem",
          value: function handleAddItem() {
            var itemType = this.getItemType();
            var quantity = this.getQuantity();
            if (!itemType || !quantity) return;

            switch (itemType) {
              case ItemKeys.HINT:
                this.node.scene.emit(GameplayEvents.ADD_HINT_ITEMS, quantity);
                break;

              case ItemKeys.STORM:
                this.node.scene.emit(GameplayEvents.ADD_STORM_ITEMS, quantity);
                break;

              case ItemKeys.THUNDER:
                this.node.scene.emit(GameplayEvents.ADD_THUNDER_ITEMS, quantity);
                break;

              case ItemKeys.PLIERS:
                this.node.scene.emit(GameplayEvents.ADD_PLIERS_ITEMS, quantity);
                break;
            }

            this.close();
          } // ? Callback for click event of GetNowButton

        }, {
          key: "handleGetNowButtonClicked",
          value: function () {
            var _handleGetNowButtonClicked = _asyncToGenerator(function* () {
              var _this2 = this;

              this.stopAllSounds();
              yield GeneralUtils.showRewardVideoAdAsync({
                onSucceedCallback: function onSucceedCallback() {
                  _this2.handleAddItem();
                }
              });
            });

            function handleGetNowButtonClicked() {
              return _handleGetNowButtonClicked.apply(this, arguments);
            }

            return handleGetNowButtonClicked;
          }()
        }, {
          key: "stopAllSounds",
          value: function stopAllSounds() {
            var _find, _find$getComponent;

            (_find = find('Sound')) === null || _find === void 0 ? void 0 : (_find$getComponent = _find.getComponent(Sound)) === null || _find$getComponent === void 0 ? void 0 : _find$getComponent.stopAll();
          }
        }]);

        return GetItemScreen;
      }(Component), (_descriptor$T = _applyDecoratedDescriptor(_class2$V.prototype, "itemIcon", [_dec2$13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$I = _applyDecoratedDescriptor(_class2$V.prototype, "closeButtonComponent", [_dec3$Q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$u = _applyDecoratedDescriptor(_class2$V.prototype, "getNowButtonComponent", [_dec4$y], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$V)) || _class$1N);

      cclegacy._RF.pop();

      var _dec$1J, _dec2$14, _dec3$R, _dec4$z, _dec5$o, _dec6$j, _dec7$d, _class$1O, _class2$W, _descriptor$U, _descriptor2$J, _descriptor3$v, _descriptor4$k, _descriptor5$h;

      cclegacy._RF.push({}, "31829DUddVEq6NgIYHvnI68", "LevelCompleteScreen", undefined);

      var ccclass$1O = _decorator.ccclass,
          property$X = _decorator.property,
          requireComponent$n = _decorator.requireComponent;
      var _GameCore$y = GameCore,
          Events$w = _GameCore$y.Events,
          Utils$8 = _GameCore$y.Utils;
      var _globalThis$game$s = globalThis.game,
          event$M = _globalThis$game$s.event,
          player$k = _globalThis$game$s.player;
      var LevelCompleteScreen = (_dec$1J = ccclass$1O('LevelCompleteScreen'), _dec2$14 = requireComponent$n(BaseScreen), _dec3$R = property$X(Node$1), _dec4$z = property$X(Node$1), _dec5$o = property$X(Node$1), _dec6$j = property$X(Node$1), _dec7$d = property$X(Button), _dec$1J(_class$1O = _dec2$14(_class$1O = (_class2$W = /*#__PURE__*/function (_Component) {
        _inherits(LevelCompleteScreen, _Component);

        var _super = _createSuper(LevelCompleteScreen);

        function LevelCompleteScreen() {
          var _this;

          _classCallCheck(this, LevelCompleteScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.levelId = 1;
          _this.coins = 40;

          _initializerDefineProperty(_this, "playButton", _descriptor$U, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinText", _descriptor2$J, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelText", _descriptor3$v, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextLevelText", _descriptor4$k, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playButtonComponent", _descriptor5$h, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function () {
            _this.playButtonComponent.interactable = true;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(LevelCompleteScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('LevelCompleteScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.playButton) {
              throw new Error('LevelCompleteScreen: playButton not found');
            }

            if (!this.levelText) {
              throw new Error('LevelCompleteScreen: levelText not found');
            }

            if (!this.coinText) {
              throw new Error('LevelCompleteScreen: missionText not found');
            }

            if (!this.nextLevelText) {
              throw new Error('LevelCompleteScreen: nextLevelText not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$M.on(Events$w.OPENING_SCREEN, this.handleOpeningScreen);
            event$M.on(Events$w.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$M.off(Events$w.OPENING_SCREEN, this.handleOpeningScreen);
            event$M.off(Events$w.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var _ref = payload !== null && payload !== void 0 ? payload : {},
                screenName = _ref.screenName,
                screenData = _ref.screenData;

            if (screenName !== this.node.name) return false;
            if (!Utils$8.Valid.isObject(screenData)) return false;

            if (Utils$8.Valid.isNumber(screenData.level)) {
              this.levelId = screenData.level;
            }

            if (Utils$8.Valid.isNumber(screenData.coins)) {
              this.coins = screenData.coins;
            }

            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.updateComponents();
            this.runPopUpAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            this.handleNextLevel();
            this.playButtonComponent.interactable = false;
            event$M.emit(Events$w.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "handleNextLevel",
          value: function handleNextLevel() {
            var level = this.screen.data['level'];

            if (!level) {
              console.warn('LevelCompleteScreen: level not found');
              return;
            }

            var gameData = player$k.getGameData();

            if (!gameData) {
              console.warn('LevelCompleteScreen: gameData not found');
              return;
            }

            var isLevelEnd = level >= gameData.totalLevel;
            if (isLevelEnd) ;else {
              this.node.scene.emit(GameplayEvents.NEXT_LEVEL, {
                level: level
              });
            }
          }
        }, {
          key: "updateComponents",
          value: function updateComponents() {
            this.updateLevelText();
            this.updateCoinString();
          }
        }, {
          key: "updateLevelText",
          value: function updateLevelText() {
            var gameData = player$k.getGameData();

            if (!gameData) {
              console.warn('LevelCompleteScreen: gameData not found');
              return;
            }

            this.levelText.getComponent(Label).string = "Level ".concat(this.levelId);
            console.log('LevelCompleteScreen: updateLevelText', this.levelId);
            var nextLevel = this.levelId + 1 >= gameData.totalLevel ? 'Complete' : "Level ".concat(this.levelId + 1);
            this.nextLevelText.getComponent(Label).string = nextLevel;
          }
        }, {
          key: "updateCoinString",
          value: function updateCoinString() {
            this.coinText.getComponent(Label).string = "x".concat(this.coins);
            console.log('LevelCompleteScreen: updateCoinString', this.coins);
          }
        }, {
          key: "runPopUpAnimation",
          value: function runPopUpAnimation() {
            if (!this.screen.container) {
              console.warn('LevelCompleteScreen: screen not found');
              return;
            }
          } // ? Callback for click event of PlayButton

        }, {
          key: "handleClickedPlay",
          value: function handleClickedPlay() {
            this.node.scene.emit(GameplayEvents.ADD_COINS, this.coins);
            this.close();
          }
        }]);

        return LevelCompleteScreen;
      }(Component), (_descriptor$U = _applyDecoratedDescriptor(_class2$W.prototype, "playButton", [_dec3$R], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$J = _applyDecoratedDescriptor(_class2$W.prototype, "coinText", [_dec4$z], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$v = _applyDecoratedDescriptor(_class2$W.prototype, "levelText", [_dec5$o], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$k = _applyDecoratedDescriptor(_class2$W.prototype, "nextLevelText", [_dec6$j], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$h = _applyDecoratedDescriptor(_class2$W.prototype, "playButtonComponent", [_dec7$d], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$W)) || _class$1O) || _class$1O);

      cclegacy._RF.pop();

      var _dec$1K, _dec2$15, _class$1P;

      cclegacy._RF.push({}, "61985gSEDBMY6nVNc9Q1D6W", "LoadingScreen", undefined);

      var ccclass$1P = _decorator.ccclass,
          disallowMultiple$m = _decorator.disallowMultiple,
          requireComponent$o = _decorator.requireComponent;
      var _GameCore$z = GameCore,
          Events$x = _GameCore$z.Events;
      var event$N = globalThis.game.event;
      var LoadingScreen = (_dec$1K = ccclass$1P('LoadingScreen'), _dec2$15 = requireComponent$o(BaseScreen), _dec$1K(_class$1P = disallowMultiple$m(_class$1P = _dec2$15(_class$1P = /*#__PURE__*/function (_Component) {
        _inherits(LoadingScreen, _Component);

        var _super = _createSuper(LoadingScreen);

        function LoadingScreen() {
          var _this;

          _classCallCheck(this, LoadingScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
            _this.enabled = true;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          _this.handleClosingScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.unscheduleAllCallbacks();
          };

          _this.handleClosedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
            _this.enabled = false;
          };

          _this.handleOnCloseScreen = function () {
            event$N.emit(Events$x.CLOSE_SCREEN, {
              screenName: _this.node.name
            });
          };

          return _this;
        }

        _createClass(LoadingScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('LoadingScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.enabled = false;
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            // ? Here's a demo of all the events a screen has
            event$N.on(Events$x.OPENING_SCREEN, this.handleOpeningScreen);
            event$N.on(Events$x.OPENED_SCREEN, this.handleOpenedScreen);
            event$N.on(Events$x.CLOSING_SCREEN, this.handleClosingScreen);
            event$N.on(Events$x.CLOSED_SCREEN, this.handleClosedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$N.off(Events$x.OPENING_SCREEN, this.handleOpeningScreen);
            event$N.off(Events$x.OPENED_SCREEN, this.handleOpenedScreen);
            event$N.off(Events$x.CLOSING_SCREEN, this.handleClosingScreen);
            event$N.off(Events$x.CLOSED_SCREEN, this.handleClosedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            if (!this.enabled) return;
            var useBackground = this.screen.data['useBlockInputWithoutBg'];
            var node = this.node.getChildByName('BackgroundMask');

            if (useBackground) {
              if (node) {
                node.active = false;
              }
            } else {
              if (node) {
                node.active = true;
              }
            }

            var duration = this.screen.data['duration'];
            if (!duration) return;

            if (duration > 0) {
              this.scheduleOnce(this.handleOnCloseScreen, duration);
            }
          }
        }]);

        return LoadingScreen;
      }(Component)) || _class$1P) || _class$1P) || _class$1P);

      cclegacy._RF.pop();

      var _dec$1L, _dec2$16, _dec3$S, _dec4$A, _dec5$p, _dec6$k, _dec7$e, _class$1Q, _class2$X, _descriptor$V, _descriptor2$K, _descriptor3$w, _descriptor4$l, _descriptor5$i;

      cclegacy._RF.push({}, "15681ka+CZC45B7BdUhsnhF", "LoseScreen", undefined);

      var ccclass$1Q = _decorator.ccclass,
          property$Y = _decorator.property,
          disallowMultiple$n = _decorator.disallowMultiple,
          requireComponent$p = _decorator.requireComponent;
      var _GameCore$A = GameCore,
          Events$y = _GameCore$A.Events,
          Configs$3 = _GameCore$A.Configs;
      var _globalThis$game$t = globalThis.game,
          ads$7 = _globalThis$game$t.ads,
          language$8 = _globalThis$game$t.language,
          event$O = _globalThis$game$t.event;
      var LoseScreen = (_dec$1L = ccclass$1Q('LoseScreen'), _dec2$16 = requireComponent$p(BaseScreen), _dec3$S = property$Y(Label), _dec4$A = property$Y(Button), _dec5$p = property$Y(Node$1), _dec6$k = property$Y(Button), _dec7$e = property$Y(Button), _dec$1L(_class$1Q = disallowMultiple$n(_class$1Q = _dec2$16(_class$1Q = (_class2$X = /*#__PURE__*/function (_Component) {
        _inherits(LoseScreen, _Component);

        var _super = _createSuper(LoseScreen);

        function LoseScreen() {
          var _this;

          _classCallCheck(this, LoseScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "levelText", _descriptor$V, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "retryButton", _descriptor2$K, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3$w, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "retryButtonComponent", _descriptor4$l, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButtonComponent", _descriptor5$i, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
            _this.retryButtonComponent.interactable = true;
            _this.closeButtonComponent.interactable = true;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          _this.showInterstitialAdAsync = /*#__PURE__*/_asyncToGenerator(function* () {
            if (GameSDK.getSDKName() === 'CrazyGames') return;
            var level = _this.screen.data['level'];
            if (!level) return;
            if (Configs$3.Gameplay.StartAdAtLevel > level) return;
            if (!ads$7.canbeShowInterstitialAd()) return;
            var beforeTime = Date.now();
            var INTERSTITIAL = GameCore.Plugins.Ads.Types.INTERSTITIAL;

            try {
              _this.muteAudio(true);

              var loadingText = language$8.getText('loading');

              _this.showNotificationScreen(loadingText);

              yield ads$7.showAdAsync(INTERSTITIAL);
            } catch (error) {
              console.error('showInterstitialAdAsync failed', error);
            } finally {
              _this.muteAudio(false);

              var displayTime = (Date.now() - beforeTime) / 1000;

              _this.scheduleOnce(function () {
                _this.closeNotificationScreen();
              }, displayTime > 0.5 ? 0 : 0.5);

              ads$7.loadAdAsync(INTERSTITIAL)["catch"](function () {// Safe to ignore
              });
            }
          });
          return _this;
        }

        _createClass(LoseScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('LoseScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.enabled = false;
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.levelText) {
              throw new Error('LoseScreen: levelText not found');
            }

            if (!this.retryButton) {
              throw new Error('LoseScreen: retryButton not found');
            }

            if (!this.title) {
              throw new Error('LoseScreen: title not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            // ? Here's a demo of all the events a screen has
            event$O.on(Events$y.OPENING_SCREEN, this.handleOpeningScreen);
            event$O.on(Events$y.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$O.off(Events$y.OPENING_SCREEN, this.handleOpeningScreen);
            event$O.off(Events$y.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.setLevelText();
            this.resetState();
            this.runOpenAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            this.closeButtonComponent.interactable = false;
            this.retryButtonComponent.interactable = false;
            event$O.emit(Events$y.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "runOpenAnimation",
          value: function runOpenAnimation() {
            var ribbonAnim = this.createRibbonAnim();
            var levelAnim = this.createLevelAnim();
            var retryButtonAnim = this.createRetryButtonAnim();

            if (!ribbonAnim || !levelAnim || !retryButtonAnim) {
              console.warn('LoseScreen: animations not found');
              return;
            } // * This is a demo of how to use tween for parallel any type of tween


            tween({}).delay(0.2).call(function () {
              return ribbonAnim.start();
            }).delay(0.2).call(function () {
              return levelAnim.start();
            }).delay(0.2).call(function () {
              return retryButtonAnim.start();
            }).start();
          }
        }, {
          key: "resetState",
          value: function resetState() {
            var retryOpacity = this.retryButton.getComponent(UIOpacity);
            var titleOpacity = this.title.getComponent(UIOpacity);
            var levelOpacity = this.levelText.getComponent(UIOpacity);

            if (!retryOpacity || !titleOpacity || !levelOpacity) {
              console.warn('LoseScreen: UIOpacity of some component not found');
              return;
            }

            retryOpacity.opacity = 0;
            titleOpacity.opacity = 0;
            levelOpacity.opacity = 0;
            this.retryButton.node.active = false;
          }
        }, {
          key: "setLevelText",
          value: function setLevelText() {
            var level = this.screen.data['level'];
            var levelText = language$8.getText('level');
            this.levelText.string = levelText + " ".concat(level);
          }
        }, {
          key: "createRibbonAnim",
          value: function createRibbonAnim() {
            var opacity = this.title.getComponent(UIOpacity);
            if (!opacity) return null;
            return tween(opacity).set({
              opacity: 0
            }).to(0.3, {
              opacity: 255
            }, {
              easing: 'smooth'
            });
          }
        }, {
          key: "createLevelAnim",
          value: function createLevelAnim() {
            var opacity = this.levelText.getComponent(UIOpacity);
            if (!opacity) return null;
            return tween(opacity).set({
              opacity: 0
            }).to(0.3, {
              opacity: 255
            }, {
              easing: 'smooth'
            });
          }
        }, {
          key: "createRetryButtonAnim",
          value: function createRetryButtonAnim() {
            var opacity = this.retryButton.getComponent(UIOpacity);
            if (!opacity) return null;
            this.retryButton.node.active = true;
            return tween(opacity).set({
              opacity: 0
            }).to(0.4, {
              opacity: 255
            }, {
              easing: 'smooth'
            }).call(this.showInterstitialAdAsync);
          }
        }, {
          key: "showNotificationScreen",
          value: function showNotificationScreen(message) {
            event$O.emit(GameCore.Events.OPEN_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN,
              screenData: {
                message: message
              }
            });
          }
        }, {
          key: "closeNotificationScreen",
          value: function closeNotificationScreen() {
            event$O.emit(GameCore.Events.CLOSE_SCREEN, {
              screenName: ScreenKeys.NOTIFICATION_SCREEN
            });
          }
        }, {
          key: "muteAudio",
          value: function muteAudio(isMute) {
            this.muteMusic(isMute);
            this.muteSound(isMute);
          }
        }, {
          key: "getMusicComponent",
          value: function getMusicComponent() {
            var _find;

            var music = (_find = find('Music')) === null || _find === void 0 ? void 0 : _find.getComponent(Music);

            if (!music) {
              console.warn('LoseScreen: Music not found');
              return null;
            }

            return music;
          }
        }, {
          key: "getSoundComponent",
          value: function getSoundComponent() {
            var _find2;

            var sound = (_find2 = find('Sound')) === null || _find2 === void 0 ? void 0 : _find2.getComponent(Sound);

            if (!sound) {
              console.warn('LoseScreen: Sound not found');
              return null;
            }

            return sound;
          }
        }, {
          key: "muteMusic",
          value: function muteMusic(isMute) {
            var music = this.getMusicComponent();
            if (!music) return;
            music.mute(isMute);
          }
        }, {
          key: "muteSound",
          value: function muteSound(isMute) {
            var sound = this.getSoundComponent();
            if (!sound) return;
            sound.mute(isMute);
          } // ? Callback for click event of RetryButton

        }, {
          key: "handleClickedRetryGame",
          value: function handleClickedRetryGame() {
            this.close();
            this.requestGameReplay();
          } // ? Callback for click event of CloseButton

        }, {
          key: "handleClickedClose",
          value: function handleClickedClose() {
            this.close();
            this.requestGameReplay();
          }
        }, {
          key: "requestGameReplay",
          value: function requestGameReplay() {
            this.node.scene.emit(GameplayEvents.GAME_REPLAY, {
              level: this.screen.data['level']
            });
          }
        }]);

        return LoseScreen;
      }(Component), (_descriptor$V = _applyDecoratedDescriptor(_class2$X.prototype, "levelText", [_dec3$S], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$K = _applyDecoratedDescriptor(_class2$X.prototype, "retryButton", [_dec4$A], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$w = _applyDecoratedDescriptor(_class2$X.prototype, "title", [_dec5$p], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$l = _applyDecoratedDescriptor(_class2$X.prototype, "retryButtonComponent", [_dec6$k], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$i = _applyDecoratedDescriptor(_class2$X.prototype, "closeButtonComponent", [_dec7$e], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$X)) || _class$1Q) || _class$1Q) || _class$1Q);

      cclegacy._RF.pop();

      var _dec$1M, _dec2$17, _dec3$T, _dec4$B, _class$1R, _class2$Y, _descriptor$W, _descriptor2$L;

      cclegacy._RF.push({}, "6460akNFfhP9pDOT2Z0+s2R", "NotificationScreen", undefined);

      var ccclass$1R = _decorator.ccclass,
          disallowMultiple$o = _decorator.disallowMultiple,
          requireComponent$q = _decorator.requireComponent,
          property$Z = _decorator.property;
      var _GameCore$B = GameCore,
          Events$z = _GameCore$B.Events,
          Utils$9 = _GameCore$B.Utils;
      var event$P = globalThis.game.event;
      var NotificationScreen = (_dec$1M = ccclass$1R('NotificationScreen'), _dec2$17 = requireComponent$q(BaseScreen), _dec3$T = property$Z(Label), _dec4$B = property$Z(Button), _dec$1M(_class$1R = disallowMultiple$o(_class$1R = _dec2$17(_class$1R = (_class2$Y = /*#__PURE__*/function (_Component) {
        _inherits(NotificationScreen, _Component);

        var _super = _createSuper(NotificationScreen);

        function NotificationScreen() {
          var _this;

          _classCallCheck(this, NotificationScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "message", _descriptor$W, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchZone", _descriptor2$L, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return; // ? this.screen.data only available after OPENING_SCREEN event
            // ? Or use this.screen.data as payload.screenData

            _this.updateScreenData(payload);
          };

          _this.handleClosingScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.unscheduleAllCallbacks();
          };

          return _this;
        }

        _createClass(NotificationScreen, [{
          key: "__preload",
          value: function __preload() {
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.message) {
              throw new Error('NotificationScreen: message not found');
            }

            if (!this.touchZone) {
              throw new Error('NotificationScreen: touchZone not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$P.on(Events$z.OPENING_SCREEN, this.handleOpeningScreen);
            event$P.on(Events$z.CLOSING_SCREEN, this.handleClosingScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$P.off(Events$z.OPENING_SCREEN, this.handleOpeningScreen);
            event$P.off(Events$z.CLOSING_SCREEN, this.handleClosingScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          }
        }, {
          key: "updateScreenData",
          value: function updateScreenData(payload) {
            var _this2 = this;

            var screenData = payload.screenData;

            if (!Utils$9.Valid.isObject(screenData)) {
              console.warn('NotificationScreen: screenData not found');
              return;
            }

            if (screenData['message']) {
              this.message.string = screenData['message'];
            }

            if (screenData['duration'] && screenData['duration'] > 0) {
              this.scheduleOnce(function () {
                event$P.emit(Events$z.CLOSE_SCREEN, {
                  screenName: _this2.node.name
                });
              }, screenData['duration']);
              this.touchZone.interactable = false;
            } else {
              this.touchZone.interactable = true;
            }
          } // ? Callback for click event of CloseButton

        }, {
          key: "handleClickedClose",
          value: function handleClickedClose() {
            this.touchZone.interactable = false;
            event$P.emit(Events$z.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }]);

        return NotificationScreen;
      }(Component), (_descriptor$W = _applyDecoratedDescriptor(_class2$Y.prototype, "message", [_dec3$T], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$L = _applyDecoratedDescriptor(_class2$Y.prototype, "touchZone", [_dec4$B], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$Y)) || _class$1R) || _class$1R) || _class$1R);

      cclegacy._RF.pop();

      var _dec$1N, _dec2$18, _dec3$U, _dec4$C, _dec5$q, _dec6$l, _dec7$f, _dec8$8, _dec9$7, _class$1S, _class2$Z, _descriptor$X, _descriptor2$M, _descriptor3$x, _descriptor4$m, _descriptor5$j, _descriptor6$a, _descriptor7$7;

      cclegacy._RF.push({}, "61932YLC/5CFrE0eD0ez8Zg", "SettingsScreen", undefined);

      var ccclass$1S = _decorator.ccclass,
          property$_ = _decorator.property,
          requireComponent$r = _decorator.requireComponent;
      var _GameCore$C = GameCore,
          Events$A = _GameCore$C.Events,
          Utils$a = _GameCore$C.Utils;
      var _globalThis$game$u = globalThis.game,
          player$l = _globalThis$game$u.player,
          event$Q = _globalThis$game$u.event,
          match$b = _globalThis$game$u.match,
          storage$4 = _globalThis$game$u.storage;
      var SettingsScreen = (_dec$1N = ccclass$1S('SettingsScreen'), _dec2$18 = requireComponent$r(BaseScreen), _dec3$U = property$_(Node$1), _dec4$C = property$_(Node$1), _dec5$q = property$_(Node$1), _dec6$l = property$_(Button), _dec7$f = property$_(Button), _dec8$8 = property$_(Button), _dec9$7 = property$_(Button), _dec$1N(_class$1S = _dec2$18(_class$1S = (_class2$Z = /*#__PURE__*/function (_Component) {
        _inherits(SettingsScreen, _Component);

        var _super = _createSuper(SettingsScreen);

        function SettingsScreen() {
          var _this;

          _classCallCheck(this, SettingsScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "musicSetting", _descriptor$X, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundSetting", _descriptor2$M, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "vibrateSetting", _descriptor3$x, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButtonComponent", _descriptor4$m, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "continueButtonComponent", _descriptor5$j, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "restartButtonComponent", _descriptor6$a, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "inviteFriendsButtonComponent", _descriptor7$7, _assertThisInitialized(_this)); // ! For Unlocking DevTools


          _this.triggerSequence = '';

          _this.handleOpeningScreen = function (payload) {
            console.log('SettingsScreen.OPENING_SCREEN', payload);
            if (!_this.validateSwitchScreenPayload(payload)) return;
            _this.closeButtonComponent.interactable = true;
            _this.continueButtonComponent.interactable = true;
            _this.restartButtonComponent.interactable = true;
            _this.inviteFriendsButtonComponent.interactable = true;

            _this.updateStatus();
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateSwitchScreenPayload(payload)) return;

            _this.open();
          };

          _this.handleResetSequence = function () {
            _this.triggerSequence = '';
          };

          _this.handleTriggerUnlockKey = function (payload) {
            if (!('code' in payload)) return;
            var code = payload.code;
            var UNLOCK_SEQUENCE = DevTools.UNLOCK_SEQUENCE;
            if (typeof code !== 'number') return;
            if (UNLOCK_SEQUENCE.indexOf(code.toString()) === -1) return;
            _this.triggerSequence += code.toString();
            console.log('SettingsScreen: handleTriggerUnlockKey', code, _this.triggerSequence, _this.triggerSequence === UNLOCK_SEQUENCE);

            if (_this.triggerSequence === UNLOCK_SEQUENCE) {
              _this.node.scene.emit(DevTools.Events.UNLOCK_DEV_TOOLS);

              _this.node.off(DevTools.Events.TRIGGER_UNLOCK_KEY);
            }
          };

          _this.updateVibrateButton = function () {
            var button = _this.vibrateSetting.getComponentInChildren(Button);

            var switchState = _this.vibrateSetting.getComponentInChildren(SwitchButton);

            var opacityState = _this.vibrateSetting.getComponentInChildren(OpacityToggler);

            if (!button || !switchState || !opacityState) {
              console.warn('SettingsScreen: vibrate button missing components');
              return;
            }

            if (!Utils$a.Device.isMobile()) {
              button.interactable = false;
              switchState.setEnabled(false);
              opacityState.changeState(false);
            } else {
              var _player$getPlayerSett;

              var vibrate = (_player$getPlayerSett = player$l.getPlayerSetting('vibrate')) !== null && _player$getPlayerSett !== void 0 ? _player$getPlayerSett : false; // switchState.updateStatus(vibrate)

              switchState.setEnabled(vibrate);
            }
          };

          return _this;
        }

        _createClass(SettingsScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
            this.listenUnlockDevTools();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
            this.unListenUnlockDevTools();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('SettingsScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.validateRequiredComponents();
            this.inviteFriendsButtonComponent.node.active = false;

            if (Utils$a.Device.isDesktop()) {
              this.vibrateSetting.active = false;
            }
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.musicSetting) {
              throw new Error('SettingsScreen: musicSetting not found');
            }

            if (!this.soundSetting) {
              throw new Error('SettingsScreen: soundSetting not found');
            }

            if (!this.vibrateSetting) {
              throw new Error('SettingsScreen: vibrateSetting not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$Q.on(Events$A.OPENING_SCREEN, this.handleOpeningScreen);
            event$Q.on(Events$A.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$Q.off(Events$A.OPENING_SCREEN, this.handleOpeningScreen);
            event$Q.off(Events$A.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateSwitchScreenPayload",
          value: function validateSwitchScreenPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          } // * Music setting switch on/off will have a code: 0 for off, 1 for on
          // * Sound setting switch on/off will have a code: 2 for off, 3 for on

        }, {
          key: "listenUnlockDevTools",
          value: function listenUnlockDevTools() {
            this.node.off(DevTools.Events.TRIGGER_UNLOCK_KEY);
            this.node.on(DevTools.Events.TRIGGER_RESET_SEQUENCE, this.handleResetSequence);
            this.node.on(DevTools.Events.TRIGGER_UNLOCK_KEY, this.handleTriggerUnlockKey);
          }
        }, {
          key: "unListenUnlockDevTools",
          value: function unListenUnlockDevTools() {
            this.node.off(DevTools.Events.TRIGGER_RESET_SEQUENCE, this.handleResetSequence);
            this.node.off(DevTools.Events.TRIGGER_UNLOCK_KEY, this.handleTriggerUnlockKey);
          }
        }, {
          key: "open",
          value: function open() {
            this.updateStatus();
            this.runPopUpAnimation();
            this.node.emit(DevTools.Events.TRIGGER_RESET_SEQUENCE);
          }
        }, {
          key: "close",
          value: function close() {
            this.closeButtonComponent.interactable = false;
            this.continueButtonComponent.interactable = false;
            this.restartButtonComponent.interactable = false;
            this.inviteFriendsButtonComponent.interactable = false;
            this.node.emit(DevTools.Events.TRIGGER_RESET_SEQUENCE);
            event$Q.emit(Events$A.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "updateStatus",
          value: function updateStatus() {
            var _player$getPlayerSett2, _player$getPlayerSett3, _player$getPlayerSett4;

            var settings = {
              music: (_player$getPlayerSett2 = player$l.getPlayerSetting('music')) !== null && _player$getPlayerSett2 !== void 0 ? _player$getPlayerSett2 : false,
              sound: (_player$getPlayerSett3 = player$l.getPlayerSetting('sound')) !== null && _player$getPlayerSett3 !== void 0 ? _player$getPlayerSett3 : false,
              vibrate: (_player$getPlayerSett4 = player$l.getPlayerSetting('vibrate')) !== null && _player$getPlayerSett4 !== void 0 ? _player$getPlayerSett4 : false
            };
            var musicSwitch = this.musicSetting.getComponentInChildren(SwitchButton);
            var soundSwitch = this.soundSetting.getComponentInChildren(SwitchButton);

            if (!musicSwitch) {
              console.warn('SettingsScreen: musicSwitch not found');
              return;
            }

            if (!soundSwitch) {
              console.warn('SettingsScreen: soundSwitch not found');
              return;
            }

            musicSwitch.setEnabled(settings.music);
            soundSwitch.setEnabled(settings.sound);
            if (GameSDK.getSDKName() === 'GameDistributions') return;

            if (!Utils$a.Device.isDesktop()) {
              this.scheduleOnce(this.updateVibrateButton, 0.1);
            }
          }
        }, {
          key: "runPopUpAnimation",
          value: function runPopUpAnimation() {
            if (!this.screen.container) {
              console.warn('SettingsScreen: screen not found');
            }
          }
        }, {
          key: "switchMusicButton",
          value: function switchMusicButton() {
            var musicSwitch = this.musicSetting.getComponentInChildren(SwitchButton);

            if (!musicSwitch) {
              console.warn('SettingsScreen: musicSwitch not found');
              return;
            }

            var state = musicSwitch["switch"]();
            player$l.setSetting('music', state); // ! For Unlocking DevTools

            this.node.emit(DevTools.Events.TRIGGER_UNLOCK_KEY, {
              code: state ? 1 : 0
            });

            if (state) {
              this.playMusic();
            } else {
              this.pauseMusic();
            }
          }
        }, {
          key: "switchSoundButton",
          value: function switchSoundButton() {
            var soundSwitch = this.soundSetting.getComponentInChildren(SwitchButton);

            if (!soundSwitch) {
              console.warn('SettingsScreen: soundSwitch not found');
              return;
            }

            var state = soundSwitch["switch"]();
            player$l.setSetting('sound', state); // ! For Unlocking DevTools

            this.node.emit(DevTools.Events.TRIGGER_UNLOCK_KEY, {
              code: state ? 3 : 2
            });
          }
        }, {
          key: "switchVibrateButton",
          value: function switchVibrateButton() {
            var vibrateSwitch = this.vibrateSetting.getComponentInChildren(SwitchButton);

            if (!vibrateSwitch) {
              console.warn('SettingsScreen: vibrateSwitch not found');
              return;
            }

            var state = vibrateSwitch["switch"]();
            player$l.setSetting('vibrate', state);
          }
        }, {
          key: "handleClickedResume",
          value: // ? Callback for click event of ContinueButton
          function handleClickedResume() {
            this.resumeGame();
          } // ? Callback for click event of CloseButton

        }, {
          key: "handleClickedClose",
          value: function handleClickedClose() {
            this.resumeGame();
          } // ? Callback for click event of ReplayButton

        }, {
          key: "handleClickedReplayGame",
          value: function handleClickedReplayGame() {
            var _player$getGameData;

            this.resumeGame();

            var _ref = (_player$getGameData = player$l.getGameData()) !== null && _player$getGameData !== void 0 ? _player$getGameData : {},
                _ref$level = _ref.level,
                level = _ref$level === void 0 ? 1 : _ref$level;

            this.node.scene.emit(GameplayEvents.GAME_REPLAY, {
              level: level
            });
          } // ? Callback for click event of InviteFriendsButton

        }, {
          key: "handleClickedInviteFriends",
          value: function handleClickedInviteFriends() {// Not implemented
          }
        }, {
          key: "resumeGame",
          value: function resumeGame() {
            this.close();
            this.node.scene.emit(GameplayEvents.GAME_RESUME);
          }
        }, {
          key: "pauseMusic",
          value: function pauseMusic() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.pause(CodeSoundKeys.BG_MUSIC);
          }
        }, {
          key: "playMusic",
          value: function playMusic() {
            var music = this.getMusicComponent();
            if (!music) return;
            music.play(CodeSoundKeys.BG_MUSIC);
          }
        }, {
          key: "getMusicComponent",
          value: function getMusicComponent() {
            var _find;

            var music = (_find = find('Music')) === null || _find === void 0 ? void 0 : _find.getComponent(Music);

            if (!music) {
              console.warn('SettingsScreen: Music not found');
              return null;
            }

            return music;
          }
        }]);

        return SettingsScreen;
      }(Component), (_descriptor$X = _applyDecoratedDescriptor(_class2$Z.prototype, "musicSetting", [_dec3$U], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$M = _applyDecoratedDescriptor(_class2$Z.prototype, "soundSetting", [_dec4$C], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$x = _applyDecoratedDescriptor(_class2$Z.prototype, "vibrateSetting", [_dec5$q], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$m = _applyDecoratedDescriptor(_class2$Z.prototype, "closeButtonComponent", [_dec6$l], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5$j = _applyDecoratedDescriptor(_class2$Z.prototype, "continueButtonComponent", [_dec7$f], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6$a = _applyDecoratedDescriptor(_class2$Z.prototype, "restartButtonComponent", [_dec8$8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7$7 = _applyDecoratedDescriptor(_class2$Z.prototype, "inviteFriendsButtonComponent", [_dec9$7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$Z)) || _class$1S) || _class$1S);

      cclegacy._RF.pop();

      var _dec$1O, _dec2$19, _dec3$V, _dec4$D, _dec5$r, _dec6$m, _class$1T, _class2$_, _descriptor$Y, _descriptor2$N, _descriptor3$y, _descriptor4$n;

      cclegacy._RF.push({}, "ecbb9MLxRlP2Kv7swFe9AXo", "StartLevelScreen", undefined);

      var ccclass$1T = _decorator.ccclass,
          property$$ = _decorator.property,
          requireComponent$s = _decorator.requireComponent;
      var _GameCore$D = GameCore,
          Events$B = _GameCore$D.Events;
      var event$R = globalThis.game.event;
      var StartLevelScreen = (_dec$1O = ccclass$1T('StartLevelScreen'), _dec2$19 = requireComponent$s(BaseScreen), _dec3$V = property$$(Node$1), _dec4$D = property$$(Node$1), _dec5$r = property$$(Node$1), _dec6$m = property$$(Button), _dec$1O(_class$1T = _dec2$19(_class$1T = (_class2$_ = /*#__PURE__*/function (_Component) {
        _inherits(StartLevelScreen, _Component);

        var _super = _createSuper(StartLevelScreen);

        function StartLevelScreen() {
          var _this;

          _classCallCheck(this, StartLevelScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this.levelId = 1;
          _this.missionString = LevelMissionKeys.CLEAR_ALL_TILES_3_MIN;

          _initializerDefineProperty(_this, "playButton", _descriptor$Y, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "missionText", _descriptor2$N, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelText", _descriptor3$y, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playButtonComponent", _descriptor4$n, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
            _this.playButtonComponent.interactable = true;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(StartLevelScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('StartLevelScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.enabled = false;
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.playButton) {
              throw new Error('StartLevelScreen: playButton not found');
            }

            if (!this.levelText) {
              throw new Error('StartLevelScreen: levelText not found');
            }

            if (!this.missionText) {
              throw new Error('StartLevelScreen: missionText not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            event$R.on(Events$B.OPENING_SCREEN, this.handleOpeningScreen);
            event$R.on(Events$B.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$R.off(Events$B.OPENING_SCREEN, this.handleOpeningScreen);
            event$R.off(Events$B.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var _ref = payload !== null && payload !== void 0 ? payload : {},
                screenName = _ref.screenName,
                screenData = _ref.screenData;

            if (screenName !== this.node.name) return false;

            if (screenData && screenData.level) {
              this.levelId = screenData.level;
            }

            if (screenData && screenData.message) {
              this.missionString = screenData.message;
            }

            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.updateComponents();
            this.runPopUpAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            this.playButtonComponent.interactable = false;
            event$R.emit(Events$B.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "updateComponents",
          value: function updateComponents() {
            this.updateLevelText();
            this.updateMissionString();
          }
        }, {
          key: "updateLevelText",
          value: function updateLevelText() {
            this.levelText.getComponent(Label).string = "Level ".concat(this.levelId);
          }
        }, {
          key: "updateMissionString",
          value: function updateMissionString() {
            this.missionText.getComponent(Label).string = this.missionString;
          }
        }, {
          key: "runPopUpAnimation",
          value: function runPopUpAnimation() {
            if (!this.screen.container) {
              console.warn('StartLevelScreen: screen not found');
              return;
            }
          } // ? Callback for click event of PlayButton

        }, {
          key: "handleClickedPlay",
          value: function handleClickedPlay() {
            this.node.scene.emit(GameplayEvents.GAME_START);
            this.close();
          }
        }]);

        return StartLevelScreen;
      }(Component), (_descriptor$Y = _applyDecoratedDescriptor(_class2$_.prototype, "playButton", [_dec3$V], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$N = _applyDecoratedDescriptor(_class2$_.prototype, "missionText", [_dec4$D], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$y = _applyDecoratedDescriptor(_class2$_.prototype, "levelText", [_dec5$r], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4$n = _applyDecoratedDescriptor(_class2$_.prototype, "playButtonComponent", [_dec6$m], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$_)) || _class$1T) || _class$1T);

      cclegacy._RF.pop();

      var _dec$1P, _dec2$1a, _dec3$W, _dec4$E, _dec5$s, _dec6$n, _class$1U, _class2$$, _descriptor$Z, _descriptor2$O, _descriptor3$z, _descriptor4$o;

      cclegacy._RF.push({}, "85907Tnp/NBq7myeciP/4h3", "TimeUpScreen", undefined);

      var ccclass$1U = _decorator.ccclass,
          property$10 = _decorator.property,
          disallowMultiple$p = _decorator.disallowMultiple,
          requireComponent$t = _decorator.requireComponent;
      var _GameCore$E = GameCore,
          Events$C = _GameCore$E.Events;
      var event$S = globalThis.game.event;
      var LoseScreen$1 = (_dec$1P = ccclass$1U('TimeUpScreen'), _dec2$1a = requireComponent$t(BaseScreen), _dec3$W = property$10(Node$1), _dec4$E = property$10(UIOpacity), _dec5$s = property$10([Node$1]), _dec6$n = property$10(Node$1), _dec$1P(_class$1U = disallowMultiple$p(_class$1U = _dec2$1a(_class$1U = (_class2$$ = /*#__PURE__*/function (_Component) {
        _inherits(LoseScreen, _Component);

        var _super = _createSuper(LoseScreen);

        function LoseScreen() {
          var _this;

          _classCallCheck(this, LoseScreen);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "adsContainer", _descriptor$Z, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "adOpacity", _descriptor2$O, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNodes", _descriptor3$z, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bubbleAnimNode", _descriptor4$o, _assertThisInitialized(_this));

          _this.handleOpeningScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;
          };

          _this.handleOpenedScreen = function (payload) {
            if (!_this.validateEventPayload(payload)) return;

            _this.open();
          };

          return _this;
        }

        _createClass(LoseScreen, [{
          key: "__preload",
          value: function __preload() {
            this.getBaseScreen();
            this.listenScreenEvents();
          }
        }, {
          key: "onDestroy",
          value: function onDestroy() {
            this.unListenScreenEvents();
          }
        }, {
          key: "getBaseScreen",
          value: function getBaseScreen() {
            var baseScreen = this.getComponent(BaseScreen);

            if (!baseScreen) {
              console.warn('LoseScreen: BaseScreen not found');
              return;
            }

            this.screen = baseScreen;
          }
        }, {
          key: "onLoad",
          value: function onLoad() {
            this.enabled = false;
            this.validateRequiredComponents();
          }
        }, {
          key: "validateRequiredComponents",
          value: function validateRequiredComponents() {
            if (!this.adsContainer) {
              throw new Error('TimeUpScreen: adsContainer not found');
            }

            if (!this.adOpacity) {
              throw new Error('TimeUpScreen: adOpacity not found');
            }

            if (this.animNodes.length === 0) {
              throw new Error('TimeUpScreen: animNodes not found');
            }

            if (!this.bubbleAnimNode) {
              throw new Error('TimeUpScreen: bubbleAnimNode not found');
            }
          }
        }, {
          key: "listenScreenEvents",
          value: function listenScreenEvents() {
            // ? Here's a demo of all the events a screen has
            event$S.on(Events$C.OPENING_SCREEN, this.handleOpeningScreen);
            event$S.on(Events$C.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "unListenScreenEvents",
          value: function unListenScreenEvents() {
            event$S.off(Events$C.OPENING_SCREEN, this.handleOpeningScreen);
            event$S.off(Events$C.OPENED_SCREEN, this.handleOpenedScreen);
          }
        }, {
          key: "validateEventPayload",
          value: function validateEventPayload(payload) {
            var screenName = payload.screenName;
            if (screenName !== this.node.name) return false;
            return true;
          }
        }, {
          key: "open",
          value: function open() {
            this.resetState();
            this.runOpenAnimation();
          }
        }, {
          key: "close",
          value: function close() {
            event$S.emit(Events$C.CLOSE_SCREEN, {
              screenName: this.node.name
            });
          }
        }, {
          key: "resetState",
          value: function resetState() {
            this.adOpacity.opacity = 0;
          }
        }, {
          key: "runOpenAnimation",
          value: function () {
            var _runOpenAnimation = _asyncToGenerator(function* () {
              var _this2 = this;

              if (!this.screen.container) {
                console.warn('TimeUpScreen: screen not found');
                return;
              }

              this.animNodes.forEach(function (target, index) {
                _this2.runAppearTween(target, index * 0.1);
              });
              yield this.runShowAdContainer();
            });

            function runOpenAnimation() {
              return _runOpenAnimation.apply(this, arguments);
            }

            return runOpenAnimation;
          }()
        }, {
          key: "runAppearTween",
          value: function runAppearTween(target, delay) {
            var t = tween(target);
            t.set({
              scale: new Vec3(0, 0, 0)
            });
            t.delay(delay);
            t.to(1, {
              scale: new Vec3(1, 1, 1)
            }, {
              progress: function progress(start, end, _current, ratio) {
                var newRatio = AnimUtils.elasticOut(ratio, 0.1, 0.45);
                return start + (end - start) * newRatio;
              }
            });
            t.start();
          }
        }, {
          key: "runShowAdContainer",
          value: function runShowAdContainer() {
            var t = tween(this.adOpacity);
            t.delay(1);
            t.to(0.5, {
              opacity: 255
            });
            return AnimUtils.runTweenAsync(t);
          } // ? Callback for click event of PlayAgainButton

        }, {
          key: "handlePlayAgain",
          value: function handlePlayAgain() {
            this.close();
            this.node.scene.emit(GameplayEvents.GAME_REPLAY, {
              level: this.screen.data['level']
            });
          } // ? Callback for click event of GetButton

        }, {
          key: "handleRescueWithTime",
          value: function () {
            var _handleRescueWithTime = _asyncToGenerator(function* () {
              var _this3 = this;

              yield GeneralUtils.showRewardVideoAdAsync({
                onSucceedCallback: function onSucceedCallback() {
                  _this3.node.scene.emit(GameplayEvents.RESCUE_START);

                  _this3.close();
                }
              });
            });

            function handleRescueWithTime() {
              return _handleRescueWithTime.apply(this, arguments);
            }

            return handleRescueWithTime;
          }()
        }]);

        return LoseScreen;
      }(Component), (_descriptor$Z = _applyDecoratedDescriptor(_class2$$.prototype, "adsContainer", [_dec3$W], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2$O = _applyDecoratedDescriptor(_class2$$.prototype, "adOpacity", [_dec4$E], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3$z = _applyDecoratedDescriptor(_class2$$.prototype, "animNodes", [_dec5$s], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4$o = _applyDecoratedDescriptor(_class2$$.prototype, "bubbleAnimNode", [_dec6$n], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2$$)) || _class$1U) || _class$1U) || _class$1U);

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'bundle://main/main.js'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});